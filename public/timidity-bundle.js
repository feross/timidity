var H=Object.create;var T=Object.defineProperty;var i=Object.getOwnPropertyDescriptor;var L=Object.getOwnPropertyNames;var z=Object.getPrototypeOf,e=Object.prototype.hasOwnProperty;var x=(F,U)=>()=>(U||F((U={exports:{}}).exports,U),U.exports);var v=(F,U,Q,R)=>{if(U&&typeof U=="object"||typeof U=="function")for(let V of L(U))!e.call(F,V)&&V!==Q&&T(F,V,{get:()=>U[V],enumerable:!(R=i(U,V))||R.enumerable});return F};var K=(F,U,Q)=>(Q=F!=null?H(z(F)):{},v(U||!F||!F.__esModule?T(Q,"default",{value:F,enumerable:!0}):Q,F));var I=x((q,E)=>{"use strict";var Z=typeof Reflect=="object"?Reflect:null,h=Z&&typeof Z.apply=="function"?Z.apply:function(U,Q,R){return Function.prototype.apply.call(U,Q,R)},S;Z&&typeof Z.ownKeys=="function"?S=Z.ownKeys:Object.getOwnPropertySymbols?S=function(U){return Object.getOwnPropertyNames(U).concat(Object.getOwnPropertySymbols(U))}:S=function(U){return Object.getOwnPropertyNames(U)};function s(F){console&&console.warn&&console.warn(F)}var G=Number.isNaN||function(U){return U!==U};function J(){J.init.call(this)}E.exports=J;E.exports.once=w;J.EventEmitter=J;J.prototype._events=void 0;J.prototype._eventsCount=0;J.prototype._maxListeners=void 0;var D=10;function N(F){if(typeof F!="function")throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof F)}Object.defineProperty(J,"defaultMaxListeners",{enumerable:!0,get:function(){return D},set:function(F){if(typeof F!="number"||F<0||G(F))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+F+".");D=F}});J.init=function(){(this._events===void 0||this._events===Object.getPrototypeOf(this)._events)&&(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0};J.prototype.setMaxListeners=function(U){if(typeof U!="number"||U<0||G(U))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+U+".");return this._maxListeners=U,this};function c(F){return F._maxListeners===void 0?J.defaultMaxListeners:F._maxListeners}J.prototype.getMaxListeners=function(){return c(this)};J.prototype.emit=function(U){for(var Q=[],R=1;R<arguments.length;R++)Q.push(arguments[R]);var V=U==="error",B=this._events;if(B!==void 0)V=V&&B.error===void 0;else if(!V)return!1;if(V){var l;if(Q.length>0&&(l=Q[0]),l instanceof Error)throw l;var d=new Error("Unhandled error."+(l?" ("+l.message+")":""));throw d.context=l,d}var W=B[U];if(W===void 0)return!1;if(typeof W=="function")h(W,this,Q);else for(var k=W.length,y=X(W,k),R=0;R<k;++R)h(y[R],this,Q);return!0};function m(F,U,Q,R){var V,B,l;if(N(Q),B=F._events,B===void 0?(B=F._events=Object.create(null),F._eventsCount=0):(B.newListener!==void 0&&(F.emit("newListener",U,Q.listener?Q.listener:Q),B=F._events),l=B[U]),l===void 0)l=B[U]=Q,++F._eventsCount;else if(typeof l=="function"?l=B[U]=R?[Q,l]:[l,Q]:R?l.unshift(Q):l.push(Q),V=c(F),V>0&&l.length>V&&!l.warned){l.warned=!0;var d=new Error("Possible EventEmitter memory leak detected. "+l.length+" "+String(U)+" listeners added. Use emitter.setMaxListeners() to increase limit");d.name="MaxListenersExceededWarning",d.emitter=F,d.type=U,d.count=l.length,s(d)}return F}J.prototype.addListener=function(U,Q){return m(this,U,Q,!1)};J.prototype.on=J.prototype.addListener;J.prototype.prependListener=function(U,Q){return m(this,U,Q,!0)};function j(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,arguments.length===0?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function b(F,U,Q){var R={fired:!1,wrapFn:void 0,target:F,type:U,listener:Q},V=j.bind(R);return V.listener=Q,R.wrapFn=V,V}J.prototype.once=function(U,Q){return N(Q),this.on(U,b(this,U,Q)),this};J.prototype.prependOnceListener=function(U,Q){return N(Q),this.prependListener(U,b(this,U,Q)),this};J.prototype.removeListener=function(U,Q){var R,V,B,l,d;if(N(Q),V=this._events,V===void 0)return this;if(R=V[U],R===void 0)return this;if(R===Q||R.listener===Q)--this._eventsCount===0?this._events=Object.create(null):(delete V[U],V.removeListener&&this.emit("removeListener",U,R.listener||Q));else if(typeof R!="function"){for(B=-1,l=R.length-1;l>=0;l--)if(R[l]===Q||R[l].listener===Q){d=R[l].listener,B=l;break}if(B<0)return this;B===0?R.shift():O(R,B),R.length===1&&(V[U]=R[0]),V.removeListener!==void 0&&this.emit("removeListener",U,d||Q)}return this};J.prototype.off=J.prototype.removeListener;J.prototype.removeAllListeners=function(U){var Q,R,V;if(R=this._events,R===void 0)return this;if(R.removeListener===void 0)return arguments.length===0?(this._events=Object.create(null),this._eventsCount=0):R[U]!==void 0&&(--this._eventsCount===0?this._events=Object.create(null):delete R[U]),this;if(arguments.length===0){var B=Object.keys(R),l;for(V=0;V<B.length;++V)l=B[V],l!=="removeListener"&&this.removeAllListeners(l);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if(Q=R[U],typeof Q=="function")this.removeListener(U,Q);else if(Q!==void 0)for(V=Q.length-1;V>=0;V--)this.removeListener(U,Q[V]);return this};function C(F,U,Q){var R=F._events;if(R===void 0)return[];var V=R[U];return V===void 0?[]:typeof V=="function"?Q?[V.listener||V]:[V]:Q?u(V):X(V,V.length)}J.prototype.listeners=function(U){return C(this,U,!0)};J.prototype.rawListeners=function(U){return C(this,U,!1)};J.listenerCount=function(F,U){return typeof F.listenerCount=="function"?F.listenerCount(U):p.call(F,U)};J.prototype.listenerCount=p;function p(F){var U=this._events;if(U!==void 0){var Q=U[F];if(typeof Q=="function")return 1;if(Q!==void 0)return Q.length}return 0}J.prototype.eventNames=function(){return this._eventsCount>0?S(this._events):[]};function X(F,U){for(var Q=new Array(U),R=0;R<U;++R)Q[R]=F[R];return Q}function O(F,U){for(;U+1<F.length;U++)F[U]=F[U+1];F.pop()}function u(F){for(var U=new Array(F.length),Q=0;Q<U.length;++Q)U[Q]=F[Q].listener||F[Q];return U}function w(F,U){return new Promise(function(Q,R){function V(l){F.removeListener(U,B),R(l)}function B(){typeof F.removeListener=="function"&&F.removeListener("error",V),Q([].slice.call(arguments))}Y(F,U,B,{once:!0}),U!=="error"&&g(F,V,{once:!0})})}function g(F,U,Q){typeof F.on=="function"&&Y(F,"error",U,Q)}function Y(F,U,Q,R){if(typeof F.on=="function")R.once?F.once(U,Q):F.on(U,Q);else if(typeof F.addEventListener=="function")F.addEventListener(U,function V(B){R.once&&F.removeEventListener(U,V),Q(B)});else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof F)}});var a="data:application/javascript;base64,KCgpPT57dmFyIEVnPU9iamVjdC5jcmVhdGU7dmFyICRBPU9iamVjdC5kZWZpbmVQcm9wZXJ0eTt2YXIgUWc9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjt2YXIgaGc9T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7dmFyIGlnPU9iamVjdC5nZXRQcm90b3R5cGVPZixvZz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O3ZhciBBST0oUz0+dHlwZW9mIHJlcXVpcmU8InUiP3JlcXVpcmU6dHlwZW9mIFByb3h5PCJ1Ij9uZXcgUHJveHkoUyx7Z2V0OihELG8pPT4odHlwZW9mIHJlcXVpcmU8InUiP3JlcXVpcmU6RClbb119KTpTKShmdW5jdGlvbihTKXtpZih0eXBlb2YgcmVxdWlyZTwidSIpcmV0dXJuIHJlcXVpcmUuYXBwbHkodGhpcyxhcmd1bWVudHMpO3Rocm93IEVycm9yKCdEeW5hbWljIHJlcXVpcmUgb2YgIicrUysnIiBpcyBub3Qgc3VwcG9ydGVkJyl9KTt2YXIgZWc9KFMsRCk9PigpPT4oRHx8UygoRD17ZXhwb3J0czp7fX0pLmV4cG9ydHMsRCksRC5leHBvcnRzKTt2YXIgU2c9KFMsRCxvLGQpPT57aWYoRCYmdHlwZW9mIEQ9PSJvYmplY3QifHx0eXBlb2YgRD09ImZ1bmN0aW9uIilmb3IobGV0IEcgb2YgaGcoRCkpIW9nLmNhbGwoUyxHKSYmRyE9PW8mJiRBKFMsRyx7Z2V0OigpPT5EW0ddLGVudW1lcmFibGU6IShkPVFnKEQsRykpfHxkLmVudW1lcmFibGV9KTtyZXR1cm4gU307dmFyIHdnPShTLEQsbyk9PihvPVMhPW51bGw/RWcoaWcoUykpOnt9LFNnKER8fCFTfHwhUy5fX2VzTW9kdWxlPyRBKG8sImRlZmF1bHQiLHt2YWx1ZTpTLGVudW1lcmFibGU6ITB9KTpvLFMpKTt2YXIgQ0k9ZWcoKGdJLE1BKT0+e3ZhciBJST0oKCk9Pnt2YXIgUz10eXBlb2YgZG9jdW1lbnQ8InUiJiZkb2N1bWVudC5jdXJyZW50U2NyaXB0P2RvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjOnZvaWQgMDtyZXR1cm4gZnVuY3Rpb24oRD17fSl7dmFyIG89RCxkLEc7by5yZWFkeT1uZXcgUHJvbWlzZSgoQSxJKT0+e2Q9QSxHPUl9KSxbIl9mcmVlIiwiX21hbGxvYyIsIl9taWRfYWxsb2Nfb3B0aW9ucyIsIl9taWRfZXhpdCIsIl9taWRfZ2V0X2xvYWRfcmVxdWVzdCIsIl9taWRfZ2V0X2xvYWRfcmVxdWVzdF9jb3VudCIsIl9taWRfaW5pdCIsIl9taWRfaXN0cmVhbV9jbG9zZSIsIl9taWRfaXN0cmVhbV9vcGVuX21lbSIsIl9taWRfc29uZ19mcmVlIiwiX21pZF9zb25nX2dldF90aW1lIiwiX21pZF9zb25nX2dldF90b3RhbF90aW1lIiwiX21pZF9zb25nX2xvYWQiLCJfbWlkX3NvbmdfcmVhZF93YXZlIiwiX21pZF9zb25nX3NlZWsiLCJfbWlkX3Nvbmdfc3RhcnQiLCJfbWVtb3J5IiwiX19faW5kaXJlY3RfZnVuY3Rpb25fdGFibGUiLCJfZmZsdXNoIiwib25SdW50aW1lSW5pdGlhbGl6ZWQiXS5mb3JFYWNoKEE9PntPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG8ucmVhZHksQSl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLnJlYWR5LEEse2dldDooKT0+SygiWW91IGFyZSBnZXR0aW5nICIrQSsiIG9uIHRoZSBQcm9taXNlIG9iamVjdCwgaW5zdGVhZCBvZiB0aGUgaW5zdGFuY2UuIFVzZSAudGhlbigpIHRvIGdldCBjYWxsZWQgYmFjayB3aXRoIHRoZSBpbnN0YW5jZSwgc2VlIHRoZSBNT0RVTEFSSVpFIGRvY3MgaW4gc3JjL3NldHRpbmdzLmpzIiksc2V0OigpPT5LKCJZb3UgYXJlIHNldHRpbmcgIitBKyIgb24gdGhlIFByb21pc2Ugb2JqZWN0LCBpbnN0ZWFkIG9mIHRoZSBpbnN0YW5jZS4gVXNlIC50aGVuKCkgdG8gZ2V0IGNhbGxlZCBiYWNrIHdpdGggdGhlIGluc3RhbmNlLCBzZWUgdGhlIE1PRFVMQVJJWkUgZG9jcyBpbiBzcmMvc2V0dGluZ3MuanMiKX0pfSk7dmFyIEFBPU9iamVjdC5hc3NpZ24oe30sbyksd0E9W10sUUk9Ii4vdGhpcy5wcm9ncmFtIixIQT0oQSxJKT0+e3Rocm93IEl9LGhJPSExLEtBPSExLGlJPSExLG9JPSEwO2lmKG8uRU5WSVJPTk1FTlQpdGhyb3cgbmV3IEVycm9yKCJNb2R1bGUuRU5WSVJPTk1FTlQgaGFzIGJlZW4gZGVwcmVjYXRlZC4gVG8gZm9yY2UgdGhlIGVudmlyb25tZW50LCB1c2UgdGhlIEVOVklST05NRU5UIGNvbXBpbGUtdGltZSBvcHRpb24gKGZvciBleGFtcGxlLCAtc0VOVklST05NRU5UPXdlYiBvciAtc0VOVklST05NRU5UPW5vZGUpIik7dmFyIGRBPSIiO2Z1bmN0aW9uIGVJKEEpe3JldHVybiBvLmxvY2F0ZUZpbGU/by5sb2NhdGVGaWxlKEEsZEEpOmRBK0F9dmFyIERBLGtBLFFBO2lmKG9JKXtpZih0eXBlb2YgcHJvY2Vzcz09Im9iamVjdCImJnR5cGVvZiBBST09ImZ1bmN0aW9uInx8dHlwZW9mIHdpbmRvdz09Im9iamVjdCJ8fHR5cGVvZiBpbXBvcnRTY3JpcHRzPT0iZnVuY3Rpb24iKXRocm93IG5ldyBFcnJvcigibm90IGNvbXBpbGVkIGZvciB0aGlzIGVudmlyb25tZW50IChkaWQgeW91IGJ1aWxkIHRvIEhUTUwgYW5kIHRyeSB0byBydW4gaXQgbm90IG9uIHRoZSB3ZWIsIG9yIHNldCBFTlZJUk9OTUVOVCB0byBzb21ldGhpbmcgLSBsaWtlIG5vZGUgLSBhbmQgcnVuIGl0IHNvbWVwbGFjZSBlbHNlIC0gbGlrZSBvbiB0aGUgd2ViPykiKTt0eXBlb2YgcmVhZDwidSImJihEQT1yZWFkKSxRQT1BPT57aWYodHlwZW9mIHJlYWRidWZmZXI9PSJmdW5jdGlvbiIpcmV0dXJuIG5ldyBVaW50OEFycmF5KHJlYWRidWZmZXIoQSkpO2xldCBJPXJlYWQoQSwiYmluYXJ5Iik7cmV0dXJuIHcodHlwZW9mIEk9PSJvYmplY3QiKSxJfSxrQT0oQSxJLGcpPT57c2V0VGltZW91dCgoKT0+SShRQShBKSkpfSx0eXBlb2YgY2xlYXJUaW1lb3V0PiJ1IiYmKGdsb2JhbFRoaXMuY2xlYXJUaW1lb3V0PUE9Pnt9KSx0eXBlb2Ygc2V0VGltZW91dD4idSImJihnbG9iYWxUaGlzLnNldFRpbWVvdXQ9QT0+dHlwZW9mIEE9PSJmdW5jdGlvbiI/QSgpOksoKSksdHlwZW9mIHNjcmlwdEFyZ3M8InUiP3dBPXNjcmlwdEFyZ3M6dHlwZW9mIGFyZ3VtZW50czwidSImJih3QT1hcmd1bWVudHMpLHR5cGVvZiBxdWl0PT0iZnVuY3Rpb24iJiYoSEE9KEEsSSk9Pnt0aHJvdyBzZXRUaW1lb3V0KCgpPT57aWYoIShJIGluc3RhbmNlb2YgSEkpKXtsZXQgZz1JO0kmJnR5cGVvZiBJPT0ib2JqZWN0IiYmSS5zdGFjayYmKGc9W0ksSS5zdGFja10pLE4oYGV4aXRpbmcgZHVlIHRvIGV4Y2VwdGlvbjogJHtnfWApfXF1aXQoQSl9KSxJfSksdHlwZW9mIHByaW50PCJ1IiYmKHR5cGVvZiBjb25zb2xlPiJ1IiYmKGNvbnNvbGU9e30pLGNvbnNvbGUubG9nPXByaW50LGNvbnNvbGUud2Fybj1jb25zb2xlLmVycm9yPXR5cGVvZiBwcmludEVycjwidSI/cHJpbnRFcnI6cHJpbnQpfWVsc2UgdGhyb3cgbmV3IEVycm9yKCJlbnZpcm9ubWVudCBkZXRlY3Rpb24gZXJyb3IiKTt2YXIgWj1vLnByaW50fHxjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpLE49by5wcmludEVycnx8Y29uc29sZS5lcnJvci5iaW5kKGNvbnNvbGUpO09iamVjdC5hc3NpZ24obyxBQSksQUE9bnVsbCwkSSgpLG8uYXJndW1lbnRzJiYod0E9by5hcmd1bWVudHMpLFQoImFyZ3VtZW50cyIsImFyZ3VtZW50c18iKSxvLnRoaXNQcm9ncmFtJiYoUUk9by50aGlzUHJvZ3JhbSksVCgidGhpc1Byb2dyYW0iLCJ0aGlzUHJvZ3JhbSIpLG8ucXVpdCYmKEhBPW8ucXVpdCksVCgicXVpdCIsInF1aXRfIiksdyh0eXBlb2Ygby5tZW1vcnlJbml0aWFsaXplclByZWZpeFVSTD4idSIsIk1vZHVsZS5tZW1vcnlJbml0aWFsaXplclByZWZpeFVSTCBvcHRpb24gd2FzIHJlbW92ZWQsIHVzZSBNb2R1bGUubG9jYXRlRmlsZSBpbnN0ZWFkIiksdyh0eXBlb2Ygby5wdGhyZWFkTWFpblByZWZpeFVSTD4idSIsIk1vZHVsZS5wdGhyZWFkTWFpblByZWZpeFVSTCBvcHRpb24gd2FzIHJlbW92ZWQsIHVzZSBNb2R1bGUubG9jYXRlRmlsZSBpbnN0ZWFkIiksdyh0eXBlb2Ygby5jZEluaXRpYWxpemVyUHJlZml4VVJMPiJ1IiwiTW9kdWxlLmNkSW5pdGlhbGl6ZXJQcmVmaXhVUkwgb3B0aW9uIHdhcyByZW1vdmVkLCB1c2UgTW9kdWxlLmxvY2F0ZUZpbGUgaW5zdGVhZCIpLHcodHlwZW9mIG8uZmlsZVBhY2thZ2VQcmVmaXhVUkw+InUiLCJNb2R1bGUuZmlsZVBhY2thZ2VQcmVmaXhVUkwgb3B0aW9uIHdhcyByZW1vdmVkLCB1c2UgTW9kdWxlLmxvY2F0ZUZpbGUgaW5zdGVhZCIpLHcodHlwZW9mIG8ucmVhZD4idSIsIk1vZHVsZS5yZWFkIG9wdGlvbiB3YXMgcmVtb3ZlZCAobW9kaWZ5IHJlYWRfIGluIEpTKSIpLHcodHlwZW9mIG8ucmVhZEFzeW5jPiJ1IiwiTW9kdWxlLnJlYWRBc3luYyBvcHRpb24gd2FzIHJlbW92ZWQgKG1vZGlmeSByZWFkQXN5bmMgaW4gSlMpIiksdyh0eXBlb2Ygby5yZWFkQmluYXJ5PiJ1IiwiTW9kdWxlLnJlYWRCaW5hcnkgb3B0aW9uIHdhcyByZW1vdmVkIChtb2RpZnkgcmVhZEJpbmFyeSBpbiBKUykiKSx3KHR5cGVvZiBvLnNldFdpbmRvd1RpdGxlPiJ1IiwiTW9kdWxlLnNldFdpbmRvd1RpdGxlIG9wdGlvbiB3YXMgcmVtb3ZlZCAobW9kaWZ5IGVtc2NyaXB0ZW5fc2V0X3dpbmRvd190aXRsZSBpbiBKUykiKSx3KHR5cGVvZiBvLlRPVEFMX01FTU9SWT4idSIsIk1vZHVsZS5UT1RBTF9NRU1PUlkgaGFzIGJlZW4gcmVuYW1lZCBNb2R1bGUuSU5JVElBTF9NRU1PUlkiKSxUKCJhc20iLCJ3YXNtRXhwb3J0cyIpLFQoInJlYWQiLCJyZWFkXyIpLFQoInJlYWRBc3luYyIsInJlYWRBc3luYyIpLFQoInJlYWRCaW5hcnkiLCJyZWFkQmluYXJ5IiksVCgic2V0V2luZG93VGl0bGUiLCJzZXRXaW5kb3dUaXRsZSIpO3ZhciByZz0iSURCRlMgaXMgbm8gbG9uZ2VyIGluY2x1ZGVkIGJ5IGRlZmF1bHQ7IGJ1aWxkIHdpdGggLWxpZGJmcy5qcyIsdGc9IlBST1hZRlMgaXMgbm8gbG9uZ2VyIGluY2x1ZGVkIGJ5IGRlZmF1bHQ7IGJ1aWxkIHdpdGggLWxwcm94eWZzLmpzIixGZz0iV09SS0VSRlMgaXMgbm8gbG9uZ2VyIGluY2x1ZGVkIGJ5IGRlZmF1bHQ7IGJ1aWxkIHdpdGggLWx3b3JrZXJmcy5qcyIsc2c9IkZFVENIRlMgaXMgbm8gbG9uZ2VyIGluY2x1ZGVkIGJ5IGRlZmF1bHQ7IGJ1aWxkIHdpdGggLWxmZXRjaGZzLmpzIixhZz0iSUNBU0VGUyBpcyBubyBsb25nZXIgaW5jbHVkZWQgYnkgZGVmYXVsdDsgYnVpbGQgd2l0aCAtbGljYXNlZnMuanMiLG5nPSJKU0ZJTEVGUyBpcyBubyBsb25nZXIgaW5jbHVkZWQgYnkgZGVmYXVsdDsgYnVpbGQgd2l0aCAtbGpzZmlsZWZzLmpzIixjZz0iT1BGUyBpcyBubyBsb25nZXIgaW5jbHVkZWQgYnkgZGVmYXVsdDsgYnVpbGQgd2l0aCAtbG9wZnMuanMiLHlnPSJOT0RFRlMgaXMgbm8gbG9uZ2VyIGluY2x1ZGVkIGJ5IGRlZmF1bHQ7IGJ1aWxkIHdpdGggLWxub2RlZnMuanMiO3coIWhJLCJ3ZWIgZW52aXJvbm1lbnQgZGV0ZWN0ZWQgYnV0IG5vdCBlbmFibGVkIGF0IGJ1aWxkIHRpbWUuICBBZGQgJ3dlYicgdG8gYC1zRU5WSVJPTk1FTlRgIHRvIGVuYWJsZS4iKSx3KCFLQSwid29ya2VyIGVudmlyb25tZW50IGRldGVjdGVkIGJ1dCBub3QgZW5hYmxlZCBhdCBidWlsZCB0aW1lLiAgQWRkICd3b3JrZXInIHRvIGAtc0VOVklST05NRU5UYCB0byBlbmFibGUuIiksdyghaUksIm5vZGUgZW52aXJvbm1lbnQgZGV0ZWN0ZWQgYnV0IG5vdCBlbmFibGVkIGF0IGJ1aWxkIHRpbWUuICBBZGQgJ25vZGUnIHRvIGAtc0VOVklST05NRU5UYCB0byBlbmFibGUuIik7dmFyIHJBO28ud2FzbUJpbmFyeSYmKHJBPW8ud2FzbUJpbmFyeSksVCgid2FzbUJpbmFyeSIsIndhc21CaW5hcnkiKSx0eXBlb2YgV2ViQXNzZW1ibHkhPSJvYmplY3QiJiZLKCJubyBuYXRpdmUgd2FzbSBzdXBwb3J0IGRldGVjdGVkIiksdHlwZW9mIGF0b2I+InUiJiYodHlwZW9mIGdsb2JhbDwidSImJnR5cGVvZiBnbG9iYWxUaGlzPiJ1IiYmKGdsb2JhbFRoaXM9Z2xvYmFsKSxnbG9iYWxUaGlzLmF0b2I9ZnVuY3Rpb24oQSl7dmFyIEk9IkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89IixnPSIiLEIsRSxRLGgsaSxlLEYsYT0wO0E9QS5yZXBsYWNlKC9bXkEtWmEtejAtOVwrXC9cPV0vZywiIik7ZG8gaD1JLmluZGV4T2YoQS5jaGFyQXQoYSsrKSksaT1JLmluZGV4T2YoQS5jaGFyQXQoYSsrKSksZT1JLmluZGV4T2YoQS5jaGFyQXQoYSsrKSksRj1JLmluZGV4T2YoQS5jaGFyQXQoYSsrKSksQj1oPDwyfGk+PjQsRT0oaSYxNSk8PDR8ZT4+MixRPShlJjMpPDw2fEYsZz1nK1N0cmluZy5mcm9tQ2hhckNvZGUoQiksZSE9PTY0JiYoZz1nK1N0cmluZy5mcm9tQ2hhckNvZGUoRSkpLEYhPT02NCYmKGc9ZytTdHJpbmcuZnJvbUNoYXJDb2RlKFEpKTt3aGlsZShhPEEubGVuZ3RoKTtyZXR1cm4gZ30pO2Z1bmN0aW9uIFNJKEEpe2Zvcih2YXIgST1hdG9iKEEpLGc9bmV3IFVpbnQ4QXJyYXkoSS5sZW5ndGgpLEI9MDtCPEkubGVuZ3RoOysrQilnW0JdPUkuY2hhckNvZGVBdChCKTtyZXR1cm4gZ31mdW5jdGlvbiB3SShBKXtpZih1QShBKSlyZXR1cm4gU0koQS5zbGljZShKQS5sZW5ndGgpKX12YXIgSUEsaEE9ITEsREk7ZnVuY3Rpb24gdyhBLEkpe0F8fEsoIkFzc2VydGlvbiBmYWlsZWQiKyhJPyI6ICIrSToiIikpfXZhciBHZyxMLFgsVixySSxuLGssdEEsRkE7ZnVuY3Rpb24gTkEoKXt2YXIgQT1JQS5idWZmZXI7by5IRUFQOD1MPW5ldyBJbnQ4QXJyYXkoQSksby5IRUFQMTY9Vj1uZXcgSW50MTZBcnJheShBKSxvLkhFQVBVOD1YPW5ldyBVaW50OEFycmF5KEEpLG8uSEVBUFUxNj1yST1uZXcgVWludDE2QXJyYXkoQSksby5IRUFQMzI9bj1uZXcgSW50MzJBcnJheShBKSxvLkhFQVBVMzI9az1uZXcgVWludDMyQXJyYXkoQSksby5IRUFQRjMyPXRBPW5ldyBGbG9hdDMyQXJyYXkoQSksby5IRUFQRjY0PUZBPW5ldyBGbG9hdDY0QXJyYXkoQSl9dyghby5TVEFDS19TSVpFLCJTVEFDS19TSVpFIGNhbiBubyBsb25nZXIgYmUgc2V0IGF0IHJ1bnRpbWUuICBVc2UgLXNTVEFDS19TSVpFIGF0IGxpbmsgdGltZSIpLHcodHlwZW9mIEludDMyQXJyYXk8InUiJiZ0eXBlb2YgRmxvYXQ2NEFycmF5PCJ1IiYmSW50MzJBcnJheS5wcm90b3R5cGUuc3ViYXJyYXkhPW51bGwmJkludDMyQXJyYXkucHJvdG90eXBlLnNldCE9bnVsbCwiSlMgZW5naW5lIGRvZXMgbm90IHByb3ZpZGUgZnVsbCB0eXBlZCBhcnJheSBzdXBwb3J0Iiksdyghby53YXNtTWVtb3J5LCJVc2Ugb2YgYHdhc21NZW1vcnlgIGRldGVjdGVkLiAgVXNlIC1zSU1QT1JURURfTUVNT1JZIHRvIGRlZmluZSB3YXNtTWVtb3J5IGV4dGVybmFsbHkiKSx3KCFvLklOSVRJQUxfTUVNT1JZLCJEZXRlY3RlZCBydW50aW1lIElOSVRJQUxfTUVNT1JZIHNldHRpbmcuICBVc2UgLXNJTVBPUlRFRF9NRU1PUlkgdG8gZGVmaW5lIHdhc21NZW1vcnkgZHluYW1pY2FsbHkiKTtmdW5jdGlvbiB0SSgpe3ZhciBBPV9BKCk7dygoQSYzKT09MCksQT09MCYmKEErPTQpLGtbQT4+Ml09MzQ4MjEyMjMsa1tBKzQ+PjJdPTIzMTA3MjEwMjIsa1swXT0xNjY4NTA5MDI5fWZ1bmN0aW9uIHNBKCl7aWYoIWhBKXt2YXIgQT1fQSgpO0E9PTAmJihBKz00KTt2YXIgST1rW0E+PjJdLGc9a1tBKzQ+PjJdOyhJIT0zNDgyMTIyM3x8ZyE9MjMxMDcyMTAyMikmJksoYFN0YWNrIG92ZXJmbG93ISBTdGFjayBjb29raWUgaGFzIGJlZW4gb3ZlcndyaXR0ZW4gYXQgJHtDQShBKX0sIGV4cGVjdGVkIGhleCBkd29yZHMgMHg4OUJBQ0RGRSBhbmQgMHgyMTM1NDY3LCBidXQgcmVjZWl2ZWQgJHtDQShnKX0gJHtDQShJKX1gKSxrWzBdIT0xNjY4NTA5MDI5JiZLKCJSdW50aW1lIGVycm9yOiBUaGUgYXBwbGljYXRpb24gaGFzIGNvcnJ1cHRlZCBpdHMgaGVhcCBtZW1vcnkgYXJlYSAoYWRkcmVzcyB6ZXJvKSEiKX19KGZ1bmN0aW9uKCl7dmFyIEE9bmV3IEludDE2QXJyYXkoMSksST1uZXcgSW50OEFycmF5KEEuYnVmZmVyKTtpZihBWzBdPTI1NDU5LElbMF0hPT0xMTV8fElbMV0hPT05OSl0aHJvdyJSdW50aW1lIGVycm9yOiBleHBlY3RlZCB0aGUgc3lzdGVtIHRvIGJlIGxpdHRsZS1lbmRpYW4hIChSdW4gd2l0aCAtc1NVUFBPUlRfQklHX0VORElBTiB0byBieXBhc3MpIn0pKCk7dmFyIGZBPVtdLGxBPVtdLFVnPVtdLFJBPVtdLGFBPSExO2Z1bmN0aW9uIEZJKCl7aWYoby5wcmVSdW4pZm9yKHR5cGVvZiBvLnByZVJ1bj09ImZ1bmN0aW9uIiYmKG8ucHJlUnVuPVtvLnByZVJ1bl0pO28ucHJlUnVuLmxlbmd0aDspbkkoby5wcmVSdW4uc2hpZnQoKSk7Y0EoZkEpfWZ1bmN0aW9uIHNJKCl7dyghYUEpLGFBPSEwLHNBKCksIW8ubm9GU0luaXQmJiFDLmluaXQuaW5pdGlhbGl6ZWQmJkMuaW5pdCgpLEMuaWdub3JlUGVybWlzc2lvbnM9ITEscS5pbml0KCksY0EobEEpfWZ1bmN0aW9uIGFJKCl7aWYoc0EoKSxvLnBvc3RSdW4pZm9yKHR5cGVvZiBvLnBvc3RSdW49PSJmdW5jdGlvbiImJihvLnBvc3RSdW49W28ucG9zdFJ1bl0pO28ucG9zdFJ1bi5sZW5ndGg7KXlJKG8ucG9zdFJ1bi5zaGlmdCgpKTtjQShSQSl9ZnVuY3Rpb24gbkkoQSl7ZkEudW5zaGlmdChBKX1mdW5jdGlvbiBjSShBKXtsQS51bnNoaWZ0KEEpfWZ1bmN0aW9uIE1nKEEpe31mdW5jdGlvbiB5SShBKXtSQS51bnNoaWZ0KEEpfXcoTWF0aC5pbXVsLCJUaGlzIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBNYXRoLmltdWwoKSwgYnVpbGQgd2l0aCBMRUdBQ1lfVk1fU1VQUE9SVCBvciBQT0xZRklMTF9PTERfTUFUSF9GVU5DVElPTlMgdG8gYWRkIGluIGEgcG9seWZpbGwiKSx3KE1hdGguZnJvdW5kLCJUaGlzIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBNYXRoLmZyb3VuZCgpLCBidWlsZCB3aXRoIExFR0FDWV9WTV9TVVBQT1JUIG9yIFBPTFlGSUxMX09MRF9NQVRIX0ZVTkNUSU9OUyB0byBhZGQgaW4gYSBwb2x5ZmlsbCIpLHcoTWF0aC5jbHozMiwiVGhpcyBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgTWF0aC5jbHozMigpLCBidWlsZCB3aXRoIExFR0FDWV9WTV9TVVBQT1JUIG9yIFBPTFlGSUxMX09MRF9NQVRIX0ZVTkNUSU9OUyB0byBhZGQgaW4gYSBwb2x5ZmlsbCIpLHcoTWF0aC50cnVuYywiVGhpcyBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgTWF0aC50cnVuYygpLCBidWlsZCB3aXRoIExFR0FDWV9WTV9TVVBQT1JUIG9yIFBPTFlGSUxMX09MRF9NQVRIX0ZVTkNUSU9OUyB0byBhZGQgaW4gYSBwb2x5ZmlsbCIpO3ZhciBPPTAsVz1udWxsLGdBPW51bGwsaj17fTtmdW5jdGlvbiBMQShBKXtmb3IodmFyIEk9QTs7KXtpZighaltBXSlyZXR1cm4gQTtBPUkrTWF0aC5yYW5kb20oKX19ZnVuY3Rpb24gbkEoQSl7TysrLG8ubW9uaXRvclJ1bkRlcGVuZGVuY2llcyYmby5tb25pdG9yUnVuRGVwZW5kZW5jaWVzKE8pLEE/KHcoIWpbQV0pLGpbQV09MSxXPT09bnVsbCYmdHlwZW9mIHNldEludGVydmFsPCJ1IiYmKFc9c2V0SW50ZXJ2YWwoKCk9PntpZihoQSl7Y2xlYXJJbnRlcnZhbChXKSxXPW51bGw7cmV0dXJufXZhciBJPSExO2Zvcih2YXIgZyBpbiBqKUl8fChJPSEwLE4oInN0aWxsIHdhaXRpbmcgb24gcnVuIGRlcGVuZGVuY2llczoiKSksTihgZGVwZW5kZW5jeTogJHtnfWApO0kmJk4oIihlbmQgb2YgbGlzdCkiKX0sMWU0KSkpOk4oIndhcm5pbmc6IHJ1biBkZXBlbmRlbmN5IGFkZGVkIHdpdGhvdXQgSUQiKX1mdW5jdGlvbiBpQShBKXtpZihPLS0sby5tb25pdG9yUnVuRGVwZW5kZW5jaWVzJiZvLm1vbml0b3JSdW5EZXBlbmRlbmNpZXMoTyksQT8odyhqW0FdKSxkZWxldGUgaltBXSk6Tigid2FybmluZzogcnVuIGRlcGVuZGVuY3kgcmVtb3ZlZCB3aXRob3V0IElEIiksTz09MCYmKFchPT1udWxsJiYoY2xlYXJJbnRlcnZhbChXKSxXPW51bGwpLGdBKSl7dmFyIEk9Z0E7Z0E9bnVsbCxJKCl9fWZ1bmN0aW9uIEsoQSl7by5vbkFib3J0JiZvLm9uQWJvcnQoQSksQT0iQWJvcnRlZCgiK0ErIikiLE4oQSksaEE9ITAsREk9MTt2YXIgST1uZXcgV2ViQXNzZW1ibHkuUnVudGltZUVycm9yKEEpO3Rocm93IEcoSSksSX12YXIgSkE9ImRhdGE6YXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtO2Jhc2U2NCwiLHVBPUE9PkEuc3RhcnRzV2l0aChKQSksWWc9QT0+QS5zdGFydHNXaXRoKCJmaWxlOi8vIik7ZnVuY3Rpb24gSChBKXtyZXR1cm4gZnVuY3Rpb24oKXt3KGFBLGBuYXRpdmUgZnVuY3Rpb24gXGAke0F9XGAgY2FsbGVkIGJlZm9yZSBydW50aW1lIGluaXRpYWxpemF0aW9uYCk7dmFyIEk9cFtBXTtyZXR1cm4gdyhJLGBleHBvcnRlZCBuYXRpdmUgZnVuY3Rpb24gXGAke0F9XGAgbm90IGZvdW5kYCksSS5hcHBseShudWxsLGFyZ3VtZW50cyl9fXZhciBfO189ImRhdGE6YXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtO2Jhc2U2NCxBR0Z6YlFFQUFBQUJzZ0ViWUFGL0FYOWdBMzkvZndGL1lBSi9md0YvWUFGL0FHQURmMzkvQUdBQ2YzOEFZQVIvZjM5L0FYOWdBQUYvWUFWL2YzOS9md0JnQUFCZ0EzOStmd0YrWUFWL2YzOS9md0YvWUFSL2YzOS9BR0FEZjM1L0FYOWdBWHdCZkdBRWYzNStmd0JnQ245L2YzOS9mMzkvZjM4QVlBTjhmSDhCZkdBQ2ZIOEJmR0FDZkg4QmYyQUNmSHdCZkdBQ2Yzd0FZQUorZmdGL1lBVi9mbjUrZmdCZ0FuNStBWDFnQkg5L2ZuOEJmbUFFZjM1L2Z3Ri9Bb1FDQ1FObGJuWVVaVzF6WTNKcGNIUmxibDl0WlcxamNIbGZhbk1BQkFObGJuWVFYMTl6ZVhOallXeHNYMjl3Wlc1aGRBQUdBMlZ1ZGhGZlgzTjVjMk5oYkd4ZlptTnVkR3cyTkFBQkEyVnVkZzlmWDNONWMyTmhiR3hmYVc5amRHd0FBUlozWVhOcFgzTnVZWEJ6YUc5MFgzQnlaWFpwWlhjeENHWmtYM2R5YVhSbEFBWVdkMkZ6YVY5emJtRndjMmh2ZEY5d2NtVjJhV1YzTVFkbVpGOXlaV0ZrQUFZV2QyRnphVjl6Ym1Gd2MyaHZkRjl3Y21WMmFXVjNNUWhtWkY5amJHOXpaUUFBQTJWdWRoWmxiWE5qY21sd2RHVnVYM0psYzJsNlpWOW9aV0Z3QUFBV2QyRnphVjl6Ym1Gd2MyaHZkRjl3Y21WMmFXVjNNUWRtWkY5elpXVnJBQXNEd0FHK0FRa0FBQUlKQUFFUUF3UURBZ0lDQWdFQ0FBUUNCUXdJQ0FnSUNBZ0lDQWdDQWdVRUJBUUVCQVFEQXdVREJRVUFBQUVEQXdNREF3TUZBd01FQlFVRUJRVUZBd3dHQVFNR0FnUUFCZ0VCQVFFQkFRRUJCUUFDQmdFQUFBWUJBQUlBQndjSkFBQUFBZ0lFQXdZQUFnQUJBQUVCQUFNREFBQUhBQW9CQVFBQUFnSUFCZzBOQVFBQUNnRURBd2NKQUJFU0Rnc1RGQTRDQWdJQ0FnSUFBQUVCQVFJQ0FnSUFBQWNBQUFFRER4VVdCUThYR0FjREFBY0RCd2tIQndjWkN4b0VCUUZ3QVE4UEJRY0JBWUFDZ0lBQ0JoY0Vmd0ZCZ0lBRUMzOEJRUUFMZndGQkFBdC9BVUVBQ3dlL0JCNEdiV1Z0YjNKNUFnQVJYMTkzWVhOdFgyTmhiR3hmWTNSdmNuTUFDUVp0WVd4c2IyTUFzQUVFWm5KbFpRQ3lBUTV0YVdSZmMyOXVaMTl6ZEdGeWRBQXhEVzFwWkY5emIyNW5YM05sWldzQU5oZHRhV1JmYzI5dVoxOW5aWFJmZEc5MFlXeGZkR2x0WlFBM0VXMXBaRjl6YjI1blgyZGxkRjkwYVcxbEFEZ1NiV2xrWDNOdmJtZGZjbVZoWkY5M1lYWmxBRGtaWDE5cGJtUnBjbVZqZEY5bWRXNWpkR2x2Ymw5MFlXSnNaUUVBRkcxcFpGOXBjM1J5WldGdFgyOXdaVzVmYldWdEFGNFJiV2xrWDJsemRISmxZVzFmWTJ4dmMyVUFad2h0YVdSZlpYaHBkQUJxQ0cxcFpGOXBibWwwQUdzTmJXbGtYM052Ym1kZmJHOWhaQUJ2RFcxcFpGOXpiMjVuWDJaeVpXVUFjUkZ0YVdSZllXeHNiMk5mYjNCMGFXOXVjd0J5R20xcFpGOW5aWFJmYkc5aFpGOXlaWEYxWlhOMFgyTnZkVzUwQUhNVWJXbGtYMmRsZEY5c2IyRmtYM0psY1hWbGMzUUFkQkJmWDJWeWNtNXZYMnh2WTJGMGFXOXVBSDhHWm1ac2RYTm9BSDRWWlcxelkzSnBjSFJsYmw5emRHRmphMTlwYm1sMEFNQUJHV1Z0YzJOeWFYQjBaVzVmYzNSaFkydGZaMlYwWDJaeVpXVUF3UUVaWlcxelkzSnBjSFJsYmw5emRHRmphMTluWlhSZlltRnpaUURDQVJobGJYTmpjbWx3ZEdWdVgzTjBZV05yWDJkbGRGOWxibVFBd3dFSmMzUmhZMnRUWVhabEFMb0JESE4wWVdOclVtVnpkRzl5WlFDN0FRcHpkR0ZqYTBGc2JHOWpBTHdCSEdWdGMyTnlhWEIwWlc1ZmMzUmhZMnRmWjJWMFgyTjFjbkpsYm5RQXZRRU1aSGx1UTJGc2JGOXFhV3BwQU1VQkNSZ0JBRUVCQ3c1ZllHRmlLeXd0THk0d2dRR0NBWU1CaFFFSzJlRUh2Z0VGQUJEQUFRdmNCZ0Z5ZnlNQUlRRkJvQWdoQWlBQklBSnJJUU1nQXlRQUlBTWdBRFlDbUFnZ0F5Z0NtQWdoQkVFQUlRVWdCQ0VHSUFVaEJ5QUdJQWRISVFoQkFTRUpJQWdnQ1hFaENnSkFBa0FDUUNBS1JRMEFJQU1vQXBnSUlRc2dDeTBBQUNFTVFRQWhEVUgvQVNFT0lBd2dEbkVoRDBIL0FTRVFJQTBnRUhFaEVTQVBJQkZISVJKQkFTRVRJQklnRTNFaEZDQVVEUUVMUVFBaEZTQURJQlUyQXB3SURBRUxJQU1vQXBnSUlSWkIxWUVFSVJjZ0ZpQVhFSWNCSVJnZ0F5QVlOZ0tVQ0VFQUlSa2dHQ0VhSUJraEd5QWFJQnRISVJ4QkFTRWRJQndnSFhFaEhnSkFJQjVGRFFBZ0F5Z0NsQWdoSHlBRElCODJBcHdJREFFTElBTW9BcGdJSVNBZ0lDMEFBQ0VoUVJnaElpQWhJQ0owSVNNZ0l5QWlkU0VrUVM4aEpTQWtJU1lnSlNFbklDWWdKMFloS0VFQklTa2dLQ0FwY1NFcUFrQWdLZzBBUVFBaEt5QXJLQUxBdkFRaExDQURJQ3cyQWd3Q1FBTkFJQU1vQWd3aExVRUFJUzRnTFNFdklDNGhNQ0F2SURCSElURkJBU0V5SURFZ01uRWhNeUF6UlEwQlFRQWhOQ0FESURRNkFCQWdBeWdDRENFMUlEVW9BZ0FoTmlBMkVLUUJJVGNnQXlBM05nSUlJQU1vQWdnaE9BSkFJRGhGRFFCQkVDRTVJQU1nT1dvaE9pQTZJVHNnQXlnQ0RDRThJRHdvQWdBaFBTQTdJRDBRb2dFYUlBTW9BZ2doUGtFQklUOGdQaUEvYXlGQVFSQWhRU0FESUVGcUlVSWdRaUZESUVNZ1FHb2hSQ0JFTFFBQUlVVkJHQ0ZHSUVVZ1JuUWhSeUJISUVaMUlVaEJMeUZKSUVnaFNpQkpJVXNnU2lCTFJpRk1RUUVoVFNCTUlFMXhJVTRDUUNCT0RRQWdBeWdDQ0NGUFFSQWhVQ0FESUZCcUlWRWdVU0ZTSUZJZ1Qyb2hVMEV2SVZRZ1V5QlVPZ0FBSUFNb0FnZ2hWVUVCSVZZZ1ZTQldhaUZYUVJBaFdDQURJRmhxSVZrZ1dTRmFJRm9nVjJvaFcwRUFJVndnV3lCY09nQUFDd3RCRUNGZElBTWdYV29oWGlCZUlWOGdBeWdDbUFnaFlDQmZJR0FRblFFYVFSQWhZU0FESUdGcUlXSWdZaUZqUWRXQkJDRmtJR01nWkJDSEFTRmxJQU1nWlRZQ2xBaEJBQ0ZtSUdVaFp5Qm1JV2dnWnlCb1J5RnBRUUVoYWlCcElHcHhJV3NDUUNCclJRMEFJQU1vQXBRSUlXd2dBeUJzTmdLY0NBd0VDeUFES0FJTUlXMGdiU2dDQkNGdUlBTWdiallDREF3QUN3QUxDMEVBSVc4Z0F5QnZOZ0tjQ0FzZ0F5Z0NuQWdoY0VHZ0NDRnhJQU1nY1dvaGNpQnlKQUFnY0E4THNnRUJGSDhqQUNFQlFSQWhBaUFCSUFKcklRTWdBeVFBSUFNZ0FEWUNDQ0FES0FJSUlRUWdCQkN3QVNFRklBTWdCVFlDQkNBREtBSUVJUVpCQUNFSElBWWhDQ0FISVFrZ0NDQUpSaUVLUVFFaEN5QUtJQXR4SVF3Q1FBSkFJQXhGRFFCQkFDRU5JQU1nRFRZQ0RBd0JDeUFES0FJRUlRNGdBeWdDQ0NFUFFRQWhFQ0FPSUJBZ0R4QjVHaUFES0FJRUlSRWdBeUFSTmdJTUN5QURLQUlNSVJKQkVDRVRJQU1nRTJvaEZDQVVKQUFnRWc4TGhnTUJMbjhqQUNFQ1FSQWhBeUFDSUFOcklRUWdCQ1FBSUFRZ0FEWUNDQ0FFSUFFMkFnUkJDQ0VGSUFVUXNBRWhCaUFFSUFZMkFnQWdCQ2dDQUNFSFFRQWhDQ0FISVFrZ0NDRUtJQWtnQ2tjaEMwRUJJUXdnQ3lBTWNTRU5Ba0FDUUNBTkRRQkJmaUVPSUFRZ0RqWUNEQXdCQ3lBRUtBSUVJUTlCQVNFUUlBOGdFR29oRVNBUkVMQUJJUklnQkNnQ0FDRVRJQk1nRWpZQ0FDQUVLQUlBSVJRZ0ZDZ0NBQ0VWUVFBaEZpQVZJUmNnRmlFWUlCY2dHRWNoR1VFQklSb2dHU0FhY1NFYkFrQWdHdzBBSUFRb0FnQWhIQ0FjRUxJQlFYNGhIU0FFSUIwMkFnd01BUXRCQUNFZUlCNG9Bc0M4QkNFZklBUW9BZ0FoSUNBZ0lCODJBZ1FnQkNnQ0FDRWhRUUFoSWlBaUlDRTJBc0M4QkNBRUtBSUFJU01nSXlnQ0FDRWtJQVFvQWdnaEpTQUVLQUlFSVNZZ0pDQWxJQ1lRcGdFYUlBUW9BZ0FoSnlBbktBSUFJU2dnQkNnQ0JDRXBJQ2dnS1dvaEtrRUFJU3NnS2lBck9nQUFRUUFoTENBRUlDdzJBZ3dMSUFRb0Fnd2hMVUVRSVM0Z0JDQXVhaUV2SUM4a0FDQXREd3ZCQVFFV2Z5TUFJUUJCRUNFQklBQWdBV3NoQWlBQ0pBQkJBQ0VESUFNb0FzQzhCQ0VFSUFJZ0JEWUNEQUpBQTBBZ0FpZ0NEQ0VGUVFBaEJpQUZJUWNnQmlFSUlBY2dDRWNoQ1VFQklRb2dDU0FLY1NFTElBdEZEUUVnQWlnQ0RDRU1JQXdvQWdRaERTQUNJQTAyQWdnZ0FpZ0NEQ0VPSUE0b0FnQWhEeUFQRUxJQklBSW9BZ3doRUNBUUVMSUJJQUlvQWdnaEVTQUNJQkUyQWd3TUFBc0FDMEVBSVJKQkFDRVRJQk1nRWpZQ3dMd0VRUkFoRkNBQ0lCUnFJUlVnRlNRQUR3dUlBd0V6ZnlNQUlRRkJFQ0VDSUFFZ0Ftc2hBeUFESkFBZ0F5QUFOZ0lNUVlBQklRUWdBeUFFTmdJSVFRQWhCU0FESUFVMkFnUUNRQU5BSUFNb0FnZ2hCa0YvSVFjZ0JpQUhhaUVJSUFNZ0NEWUNDQ0FHUlEwQklBTW9BZ3doQ1VFY0lRb2dDU0FLYWlFTElBTW9BZ2doREVFQ0lRMGdEQ0FOZENFT0lBc2dEbW9oRHlBUEtBSUFJUkJCQUNFUklCQWhFaUFSSVJNZ0VpQVRSeUVVUVFFaEZTQVVJQlZ4SVJZQ1FDQVdSUTBBSUFNb0Fnd2hGeUFES0FJSUlSaEJBQ0VaSUJjZ0dTQVlFQThoR2lBREtBSUVJUnNnR3lBYWFpRWNJQU1nSERZQ0JBc2dBeWdDRENFZFFad0VJUjRnSFNBZWFpRWZJQU1vQWdnaElFRUNJU0VnSUNBaGRDRWlJQjhnSW1vaEl5QWpLQUlBSVNSQkFDRWxJQ1FoSmlBbElTY2dKaUFuUnlFb1FRRWhLU0FvSUNseElTb0NRQ0FxUlEwQUlBTW9BZ3doS3lBREtBSUlJU3hCQVNFdElDc2dMU0FzRUE4aExpQURLQUlFSVM4Z0x5QXVhaUV3SUFNZ01EWUNCQXNNQUFzQUN5QURLQUlFSVRGQkVDRXlJQU1nTW1vaE15QXpKQUFnTVE4TG1oRUJqZ0ovSXdBaEEwRWdJUVFnQXlBRWF5RUZJQVVrQUNBRklBQTJBaGdnQlNBQk5nSVVJQVVnQWpZQ0VFRUFJUVlnQlNBR05nSUlJQVVvQWhRaEJ3SkFBa0FnQjBVTkFDQUZLQUlZSVFoQm5BUWhDU0FJSUFscUlRb2dCU2dDRUNFTFFRSWhEQ0FMSUF4MElRMGdDaUFOYWlFT0lBNG9BZ0FoRHlBUElSQU1BUXNnQlNnQ0dDRVJRUndoRWlBUklCSnFJUk1nQlNnQ0VDRVVRUUloRlNBVUlCVjBJUllnRXlBV2FpRVhJQmNvQWdBaEdDQVlJUkFMSUJBaEdTQUZJQmsyQWdRZ0JTZ0NCQ0VhUVFBaEd5QWFJUndnR3lFZElCd2dIVWNoSGtFQklSOGdIaUFmY1NFZ0FrQUNRQ0FnRFFCQkFDRWhJQVVnSVRZQ0hBd0JDMEVBSVNJZ0JTQWlOZ0lNQWtBRFFDQUZLQUlNSVNOQmdBRWhKQ0FqSVNVZ0pDRW1JQ1VnSmtnaEowRUJJU2dnSnlBb2NTRXBJQ2xGRFFFZ0JTZ0NCQ0VxUVFRaEt5QXFJQ3RxSVN3Z0JTZ0NEQ0V0UVFJaExpQXRJQzUwSVM4Z0xDQXZhaUV3SURBb0FnQWhNVUYvSVRJZ01TRXpJREloTkNBeklEUkdJVFZCQVNFMklEVWdObkVoTndKQUlEZEZEUUFnQlNnQ0JDRTRJRGdvQWdBaE9TQUZLQUlNSVRwQkhDRTdJRG9nTzJ3aFBDQTVJRHhxSVQwZ1BTZ0NBQ0UrUVFBaFB5QStJVUFnUHlGQklFQWdRVWNoUWtFQklVTWdRaUJEY1NGRUFrQUNRQ0JFRFFBZ0JTZ0NFQ0ZGQWtBZ1JVVU5BQ0FGS0FJVUlVWUNRQUpBSUVZTkFDQUZLQUlZSVVjZ1J5Z0NIQ0ZJUVFRaFNTQklJRWxxSVVvZ0JTZ0NEQ0ZMUVFJaFRDQkxJRXgwSVUwZ1NpQk5haUZPSUU0b0FnQWhUMEVBSVZBZ1R5RlJJRkFoVWlCUklGSkhJVk5CQVNGVUlGTWdWSEVoVlFKQUlGVU5BQ0FGS0FJWUlWWWdWaWdDSENGWFFRUWhXQ0JYSUZocUlWa2dCU2dDRENGYVFRSWhXeUJhSUZ0MElWd2dXU0JjYWlGZFFYOGhYaUJkSUY0MkFnQUxEQUVMSUFVb0FoZ2hYeUJmS0FLY0JDRmdRUVFoWVNCZ0lHRnFJV0lnQlNnQ0RDRmpRUUloWkNCaklHUjBJV1VnWWlCbGFpRm1JR1lvQWdBaFowRUFJV2dnWnlGcElHZ2hhaUJwSUdwSElXdEJBU0ZzSUdzZ2JIRWhiUUpBSUcwTkFDQUZLQUlZSVc0Z2JpZ0NuQVFoYjBFRUlYQWdieUJ3YWlGeElBVW9BZ3doY2tFQ0lYTWdjaUJ6ZENGMElIRWdkR29oZFVGL0lYWWdkU0IyTmdJQUN3c0xJQVVvQWdRaGQwRUVJWGdnZHlCNGFpRjVJQVVvQWd3aGVrRUNJWHNnZWlCN2RDRjhJSGtnZkdvaGZVRUFJWDRnZlNCK05nSUFJQVVvQWdnaGYwRUJJWUFCSUg4Z2dBRnFJWUVCSUFVZ2dRRTJBZ2dNQVFzZ0JTZ0NHQ0dDQVNBRktBSUVJWU1CSUlNQktBSUFJWVFCSUFVb0Fnd2hoUUZCSENHR0FTQ0ZBU0NHQVd3aGh3RWdoQUVnaHdGcUlZZ0JJSWdCS0FJQUlZa0JJQVVvQWdRaGlnRkJCQ0dMQVNDS0FTQ0xBV29oakFFZ0JTZ0NEQ0dOQVVFQ0lZNEJJSTBCSUk0QmRDR1BBU0NNQVNDUEFXb2hrQUVnQlNnQ0ZDR1JBVUVCSVpJQlFRQWhrd0Vna2dFZ2t3RWdrUUViSVpRQklBVW9BZ1FobFFFZ2xRRW9BZ0FobGdFZ0JTZ0NEQ0dYQVVFY0laZ0JJSmNCSUpnQmJDR1pBU0NXQVNDWkFXb2htZ0VnbWdFb0Fnd2htd0VnQlNnQ0JDR2NBU0NjQVNnQ0FDR2RBU0FGS0FJTUlaNEJRUndobndFZ25nRWdud0ZzSWFBQklKMEJJS0FCYWlHaEFTQ2hBU2dDQ0NHaUFTQUZLQUlFSWFNQklLTUJLQUlBSWFRQklBVW9BZ3docFFGQkhDR21BU0NsQVNDbUFXd2hwd0VncEFFZ3B3RnFJYWdCSUtnQktBSUVJYWtCUVg4aHFnRWdxUUVocXdFZ3FnRWhyQUVncXdFZ3JBRkhJYTBCUVFFaHJnRWdyUUVncmdGeElhOEJBa0FDUUNDdkFVVU5BQ0FGS0FJRUliQUJJTEFCS0FJQUliRUJJQVVvQWd3aHNnRkJIQ0d6QVNDeUFTQ3pBV3dodEFFZ3NRRWd0QUZxSWJVQklMVUJLQUlFSWJZQklMWUJJYmNCREFFTElBVW9BaFFodUFFQ1FBSkFJTGdCUlEwQUlBVW9BZ3dodVFFZ3VRRWh1Z0VNQVF0QmZ5RzdBU0M3QVNHNkFRc2d1Z0VodkFFZ3ZBRWh0d0VMSUxjQkliMEJJQVVvQWdRaHZnRWd2Z0VvQWdBaHZ3RWdCU2dDRENIQUFVRWNJY0VCSU1BQklNRUJiQ0hDQVNDL0FTRENBV29od3dFZ3d3RW9BaEFoeEFGQmZ5SEZBU0RFQVNIR0FTREZBU0hIQVNER0FTREhBVWNoeUFGQkFTSEpBU0RJQVNESkFYRWh5Z0VDUUFKQUlNb0JSUTBBSUFVb0FnUWh5d0VneXdFb0FnQWh6QUVnQlNnQ0RDSE5BVUVjSWM0QklNMEJJTTRCYkNIUEFTRE1BU0RQQVdvaDBBRWcwQUVvQWhBaDBRRWcwUUVoMGdFTUFRc2dCU2dDRkNIVEFVRUJJZFFCUVg4aDFRRWcxQUVnMVFFZzB3RWJJZFlCSU5ZQklkSUJDeURTQVNIWEFTQUZLQUlFSWRnQklOZ0JLQUlBSWRrQklBVW9BZ3doMmdGQkhDSGJBU0RhQVNEYkFXd2gzQUVnMlFFZzNBRnFJZDBCSU4wQktBSVVJZDRCUVg4aDN3RWczZ0VoNEFFZzN3RWg0UUVnNEFFZzRRRkhJZUlCUVFFaDR3RWc0Z0VnNHdGeEllUUJBa0FDUUNEa0FVVU5BQ0FGS0FJRUllVUJJT1VCS0FJQUllWUJJQVVvQWd3aDV3RkJIQ0hvQVNEbkFTRG9BV3doNlFFZzVnRWc2UUZxSWVvQklPb0JLQUlVSWVzQklPc0JJZXdCREFFTElBVW9BaFFoN1FGQkFTSHVBVUYvSWU4QklPNEJJTzhCSU8wQkd5SHdBU0R3QVNIc0FRc2c3QUVoOFFFZ0JTZ0NCQ0h5QVNEeUFTZ0NBQ0h6QVNBRktBSU1JZlFCUVJ3aDlRRWc5QUVnOVFGc0lmWUJJUE1CSVBZQmFpSDNBU0QzQVNnQ0dDSDRBU0NDQVNDSkFTQ1FBU0NVQVNDYkFTQ2lBU0M5QVNEWEFTRHhBU0Q0QVJBUUlBVW9BZ1FoK1FGQkJDSDZBU0Q1QVNENkFXb2grd0VnQlNnQ0RDSDhBVUVDSWYwQklQd0JJUDBCZENIK0FTRDdBU0QrQVdvaC93RWcvd0VvQWdBaGdBSkJBQ0dCQWlDQUFpR0NBaUNCQWlHREFpQ0NBaUNEQWtjaGhBSkJBU0dGQWlDRUFpQ0ZBbkVoaGdJQ1FDQ0dBZzBBSUFVb0FnZ2hod0pCQVNHSUFpQ0hBaUNJQW1vaGlRSWdCU0NKQWpZQ0NBc0xDeUFGS0FJTUlZb0NRUUVoaXdJZ2lnSWdpd0pxSVl3Q0lBVWdqQUkyQWd3TUFBc0FDeUFGS0FJSUlZMENJQVVnalFJMkFod0xJQVVvQWh3aGpnSkJJQ0dQQWlBRklJOENhaUdRQWlDUUFpUUFJSTRDRHd2VVJRT2dCMzhHZkFKOUl3QWhDa0dBQ1NFTElBb2dDMnNoRENBTUpBQWdEQ0FBTmdMOENDQU1JQUUyQXZnSUlBd2dBallDOUFnZ0RDQUROZ0x3Q0NBTUlBUTJBdXdJSUF3Z0JUWUM2QWdnRENBR05nTGtDQ0FNSUFjMkF1QUlJQXdnQ0RZQzNBZ2dEQ0FKTmdMWUNDQU1LQUwwQ0NFTlFRQWhEaUFOSUE0MkFnQWdEQ2dDK0FnaEQwRUFJUkFnRHlFUklCQWhFaUFSSUJKSElSTkJBU0VVSUJNZ0ZIRWhGUUpBQWtBZ0ZRMEFEQUVMSUF3b0F2Z0lJUllnRmhBS0lSY2dEQ0FYTmdMTUNFRUFJUmdnRnlFWklCZ2hHaUFaSUJwR0lSdEJBU0VjSUJzZ0hIRWhIUUpBSUIxRkRRQkJBQ0VlSUF3Z0hqWUNQQUpBQTBBZ0RDZ0NQQ0VmUWJDOEJDRWdRUUloSVNBZklDRjBJU0lnSUNBaWFpRWpJQ01vQWdBaEpFRUFJU1VnSkNFbUlDVWhKeUFtSUNkSElTaEJBU0VwSUNnZ0tYRWhLaUFxUlEwQklBd29BdmdJSVNzZ0t4Q2tBU0VzSUF3b0Fqd2hMVUd3dkFRaExrRUNJUzhnTFNBdmRDRXdJQzRnTUdvaE1TQXhLQUlBSVRJZ01oQ2tBU0V6SUN3Z00yb2hORUdBQ0NFMUlEUWhOaUExSVRjZ05pQTNTU0U0UVFFaE9TQTRJRGx4SVRvQ1FDQTZSUTBBUWNBQUlUc2dEQ0E3YWlFOElEd2hQU0FNS0FMNENDRStJRDBnUGhDaUFScEJ3QUFoUHlBTUlEOXFJVUFnUUNGQklBd29BandoUWtHd3ZBUWhRMEVDSVVRZ1FpQkVkQ0ZGSUVNZ1JXb2hSaUJHS0FJQUlVY2dRU0JIRUowQkdrSEFBQ0ZJSUF3Z1NHb2hTU0JKSVVvZ1NoQUtJVXNnRENCTE5nTE1DRUVBSVV3Z1N5Rk5JRXdoVGlCTklFNUhJVTlCQVNGUUlFOGdVSEVoVVFKQUlGRkZEUUFNQXdzTElBd29BandoVWtFQklWTWdVaUJUYWlGVUlBd2dWRFlDUEF3QUN3QUxDeUFNS0FMTUNDRlZRUUFoVmlCVklWY2dWaUZZSUZjZ1dFWWhXVUVCSVZvZ1dTQmFjU0ZiQWtBZ1cwVU5BQ0FNS0FMOENDRmNJRndvQXRCbUlWMUJnQUVoWGlCZElWOGdYaUZnSUY4Z1lFZ2hZVUVCSVdJZ1lTQmljU0ZqQWtBZ1kwVU5BRUVBSVdRZ0RDQmtOZ0k4QWtBRFFDQU1LQUk4SVdVZ0RDZ0MvQWdoWmlCbUtBTFFaaUZuSUdVaGFDQm5JV2tnYUNCcFNDRnFRUUVoYXlCcUlHdHhJV3dnYkVVTkFTQU1LQUw4Q0NGdFFkVG1BQ0Z1SUcwZ2Jtb2hieUFNS0FJOElYQkJBaUZ4SUhBZ2NYUWhjaUJ2SUhKcUlYTWdjeWdDQUNGMElBd29BdmdJSVhVZ2RDQjFFS0FCSVhZQ1FDQjJEUUFNQlFzZ0RDZ0NQQ0YzUVFFaGVDQjNJSGhxSVhrZ0RDQjVOZ0k4REFBTEFBc2dEQ2dDK0FnaGVpQjZFS01CSVhzZ0RDZ0MvQWdoZkVIVTVnQWhmU0I4SUgxcUlYNGdEQ2dDL0FnaGZ5Qi9LQUxRWmlHQUFVRUNJWUVCSUlBQklJRUJkQ0dDQVNCK0lJSUJhaUdEQVNDREFTQjdOZ0lBSUF3b0F2d0lJWVFCSUlRQktBTFFaaUdGQVVFQklZWUJJSVVCSUlZQmFpR0hBU0NFQVNDSEFUWUMwR1lMREFFTFFjQUFJWWdCSUF3Z2lBRnFJWWtCSUlrQklZb0JJQXdvQXN3SUlZc0JRUUVoakFGQjd3RWhqUUVnaWdFZ2pBRWdqUUVnaXdFUWlRRWhqZ0ZCN3dFaGp3RWdqd0Voa0FFZ2pnRWhrUUVna0FFZ2tRRkhJWklCUVFFaGt3RWdrZ0Vna3dGeElaUUJBa0FDUUFKQUlKUUJEUUJCd0FBaGxRRWdEQ0NWQVdvaGxnRWdsZ0VobHdGQjQ0RUVJWmdCUVJZaG1RRWdsd0VnbUFFZ21RRVFrQUVobWdFZ21nRkZEUUZCd0FBaG13RWdEQ0NiQVdvaG5BRWduQUVoblFGQitZRUVJWjRCUVJZaG53RWduUUVnbmdFZ253RVFrQUVob0FFZ29BRkZEUUVMREFFTElBd3RBSklCSWFFQlFSZ2hvZ0Vnb1FFZ29nRjBJYU1CSUtNQklLSUJkU0drQVVFQklhVUJJS1FCSWFZQklLVUJJYWNCSUtZQklLY0JSeUdvQVVFQklha0JJS2dCSUtrQmNTR3FBUUpBSUtvQlJRMEFJQXd0QUpJQklhc0JRUmdockFFZ3F3RWdyQUYwSWEwQklLMEJJS3dCZFNHdUFTQ3VBVVVOQUF3QkN5QU1MUURYQVNHdkFVRVlJYkFCSUs4QklMQUJkQ0d4QVNDeEFTQ3dBWFVoc2dGQkFTR3pBU0N5QVNHMEFTQ3pBU0cxQVNDMEFTQzFBVWNodGdGQkFTRzNBU0MyQVNDM0FYRWh1QUVDUUNDNEFVVU5BQ0FNTFFEWEFTRzVBVUVZSWJvQklMa0JJTG9CZENHN0FTQzdBU0M2QVhVaHZBRWd2QUZGRFFBTUFRdEJDQ0c5QVNDOUFSQUxJYjRCSUF3b0F2UUlJYjhCSUw4QklMNEJOZ0lBSUF3b0F2UUlJY0FCSU1BQktBSUFJY0VCSUF3Z3dRRTJBdFFJSUF3b0F0UUlJY0lCUVFBaHd3RWd3Z0VoeEFFZ3d3RWh4UUVneEFFZ3hRRkhJY1lCUVFFaHh3RWd4Z0VneHdGeEljZ0JBa0FDUUFKQUFrQWd5QUVOQUF3QkN5QU1MUUNHQWlISkFVRVlJY29CSU1rQklNb0JkQ0hMQVNETEFTREtBWFVoekFFZ0RDZ0MxQWdoelFFZ3pRRWd6QUUyQWdBZ0RDZ0MxQWdoemdFZ3pnRW9BZ0FoendGQjdBQWgwQUVnendFZzBBRnNJZEVCSU5FQkVBc2gwZ0VnRENnQzFBZ2gwd0VnMHdFZzBnRTJBZ1FnRENnQzFBZ2gxQUVnMUFFb0FnUWgxUUZCQUNIV0FTRFZBU0hYQVNEV0FTSFlBU0RYQVNEWUFVY2gyUUZCQVNIYUFTRFpBU0RhQVhFaDJ3RUNRQ0RiQVEwQURBRUxRUUFoM0FFZ0RDRGNBVFlDUEFKQUEwQWdEQ2dDUENIZEFTQU1LQUxVQ0NIZUFTRGVBU2dDQUNIZkFTRGRBU0hnQVNEZkFTSGhBU0RnQVNEaEFVZ2g0Z0ZCQVNIakFTRGlBU0RqQVhFaDVBRWc1QUZGRFFFZ0RDZ0N6QWdoNVFGQkJ5SG1BVUVCSWVjQklPVUJJT1lCSU9jQkVJd0JHaUFNS0FMTUNDSG9BVUUzSWVrQklBd2c2UUZxSWVvQklPb0JJZXNCUVFFaDdBRWc2d0VnN0FFZzdBRWc2QUVRaVFFaDdRRkJBU0h1QVNEdUFTSHZBU0R0QVNId0FTRHZBU0R3QVVjaDhRRkJBU0h5QVNEeEFTRHlBWEVoOHdFQ1FDRHpBVVVOQUF3RUN5QU1LQUxVQ0NIMEFTRDBBU2dDQkNIMUFTQU1LQUk4SWZZQlFld0FJZmNCSVBZQklQY0JiQ0g0QVNEMUFTRDRBV29oK1FFZ0RDRDVBVFlDMEFnZ0RDZ0N6QWdoK2dGQk1DSDdBU0FNSVBzQmFpSDhBU0Q4QVNIOUFVRUVJZjRCUVFFaC93RWcvUUVnL2dFZy93RWcrZ0VRaVFFaGdBSkJBU0dCQWlDQkFpR0NBaUNBQWlHREFpQ0NBaUNEQWtjaGhBSkJBU0dGQWlDRUFpQ0ZBbkVoaGdJQ1FDQ0dBa1VOQUF3RUN5QU1LQUl3SVljQ0lBd29BdEFJSVlnQ0lJZ0NJSWNDTmdJSUlBd29Bc3dJSVlrQ1FUQWhpZ0lnRENDS0Ftb2hpd0lnaXdJaGpBSkJCQ0dOQWtFQklZNENJSXdDSUkwQ0lJNENJSWtDRUlrQklZOENRUUVoa0FJZ2tBSWhrUUlnandJaGtnSWdrUUlna2dKSElaTUNRUUVobEFJZ2t3SWdsQUp4SVpVQ0FrQWdsUUpGRFFBTUJBc2dEQ2dDTUNHV0FpQU1LQUxRQ0NHWEFpQ1hBaUNXQWpZQ0FDQU1LQUxNQ0NHWUFrRXdJWmtDSUF3Z21RSnFJWm9DSUpvQ0lac0NRUVFobkFKQkFTR2RBaUNiQWlDY0FpQ2RBaUNZQWhDSkFTR2VBa0VCSVo4Q0lKOENJYUFDSUo0Q0lhRUNJS0FDSUtFQ1J5R2lBa0VCSWFNQ0lLSUNJS01DY1NHa0FnSkFJS1FDUlEwQURBUUxJQXdvQWpBaHBRSWdEQ2dDMEFnaHBnSWdwZ0lncFFJMkFnUWdEQ2dDekFnaHB3SkJMaUdvQWlBTUlLZ0NhaUdwQWlDcEFpR3FBa0VDSWFzQ1FRRWhyQUlncWdJZ3F3SWdyQUlncHdJUWlRRWhyUUpCQVNHdUFpQ3VBaUd2QWlDdEFpR3dBaUN2QWlDd0FrY2hzUUpCQVNHeUFpQ3hBaUN5QW5FaHN3SUNRQ0N6QWtVTkFBd0VDeUFNTHdFdUliUUNRZi8vQXlHMUFpQzBBaUMxQW5FaHRnSWdEQ2dDMEFnaHR3SWd0d0lndGdJMkFnd2dEQ2dDekFnaHVBSkJNQ0c1QWlBTUlMa0NhaUc2QWlDNkFpRzdBa0VFSWJ3Q1FRRWh2UUlndXdJZ3ZBSWd2UUlndUFJUWlRRWh2Z0pCQVNHL0FpQy9BaUhBQWlDK0FpSEJBaURBQWlEQkFrY2h3Z0pCQVNIREFpRENBaUREQW5FaHhBSUNRQ0RFQWtVTkFBd0VDeUFNS0FJd0ljVUNJQXdvQXRBSUljWUNJTVlDSU1VQ05nSVFJQXdvQXN3SUljY0NRVEFoeUFJZ0RDRElBbW9oeVFJZ3lRSWh5Z0pCQkNITEFrRUJJY3dDSU1vQ0lNc0NJTXdDSU1jQ0VJa0JJYzBDUVFFaHpnSWd6Z0loendJZ3pRSWgwQUlnendJZzBBSkhJZEVDUVFFaDBnSWcwUUlnMGdKeElkTUNBa0FnMHdKRkRRQU1CQXNnRENnQ01DSFVBaUFNS0FMUUNDSFZBaURWQWlEVUFqWUNGQ0FNS0FMTUNDSFdBa0V3SWRjQ0lBd2cxd0pxSWRnQ0lOZ0NJZGtDUVFRaDJnSkJBU0hiQWlEWkFpRGFBaURiQWlEV0FoQ0pBU0hjQWtFQklkMENJTjBDSWQ0Q0lOd0NJZDhDSU40Q0lOOENSeUhnQWtFQkllRUNJT0FDSU9FQ2NTSGlBZ0pBSU9JQ1JRMEFEQVFMSUF3b0FqQWg0d0lnRENnQzBBZ2g1QUlnNUFJZzR3STJBaGdnRENnQ3pBZ2g1UUpCQWlIbUFrRUJJZWNDSU9VQ0lPWUNJT2NDRUl3QkdpQU1LQUxNQ0NIb0FrRXRJZWtDSUF3ZzZRSnFJZW9DSU9vQ0llc0NRUUVoN0FJZzZ3SWc3QUlnN0FJZzZBSVFpUUVoN1FKQkFTSHVBaUR1QWlIdkFpRHRBaUh3QWlEdkFpRHdBa2NoOFFKQkFTSHlBaUR4QWlEeUFuRWg4d0lDUUNEekFrVU5BQXdFQ3lBTUxRQXRJZlFDSUF3ZzlBSTZBRUFnRENnQzdBZ2g5UUpCZnlIMkFpRDFBaUgzQWlEMkFpSDRBaUQzQWlENEFrWWgrUUpCQVNINkFpRDVBaUQ2QW5FaCt3SUNRQUpBSVBzQ1JRMEFJQXd0QUVBaC9BSkJHQ0g5QWlEOEFpRDlBblFoL2dJZy9nSWcvUUoxSWY4Q1FRTWhnQU1nL3dJZ2dBTjBJWUVEUVFRaGdnTWdnUU1nZ2dOcUlZTURRZjhBSVlRRElJTURJSVFEY1NHRkF5QU1LQUxRQ0NHR0F5Q0dBeUNGQXpvQVp3d0JDeUFNS0FMc0NDR0hBMEgvQUNHSUF5Q0hBeUNJQTNFaGlRTWdEQ2dDMEFnaGlnTWdpZ01naVFNNkFHY0xRY0FBSVlzRElBd2dpd05xSVl3RElJd0RJWTBESUF3b0Fzd0lJWTREUVFFaGp3TkJFaUdRQXlDTkF5Q1BBeUNRQXlDT0F4Q0pBU0dSQTBFU0laSURJSklESVpNRElKRURJWlFESUpNRElKUURSeUdWQTBFQklaWURJSlVESUpZRGNTR1hBd0pBSUpjRFJRMEFEQVFMSUF3dEFFMGhtQU5CQUNHWkEwSC9BU0dhQXlDWUF5Q2FBM0VobXdOQi93RWhuQU1nbVFNZ25BTnhJWjBESUpzRElKMERSeUdlQTBFQklaOERJSjRESUo4RGNTR2dBd0pBQWtBQ1FDQ2dBMFVOQUNBTUxRQk9JYUVEUVFBaG9nTkIvd0Vob3dNZ29RTWdvd054SWFRRFFmOEJJYVVESUtJRElLVURjU0dtQXlDa0F5Q21BMGNocHdOQkFTR29BeUNuQXlDb0EzRWhxUU1ncVFNTkFRc2dEQ2dDMEFnaHFnTkJBQ0dyQXlDcUF5Q3JBem9BWkNBTUtBTFFDQ0dzQTBFQUlhMERJS3dESUswRE5nSllJQXdvQXRBSUlhNERRUUFocndNZ3JnTWdyd00yQWxRTUFRc2dEQ2dDL0FnaHNBTWdEQzBBVENHeEEwSC9BU0d5QXlDeEF5Q3lBM0Voc3dNZ3NBTWdzd01RRlNHMEF5QU1LQUxRQ0NHMUF5QzFBeUMwQXpZQ1ZDQU1LQUw4Q0NHMkF5QU1MUUJOSWJjRFFmOEJJYmdESUxjRElMZ0RjU0c1QXlDMkF5QzVBeEFXSWJvRElBd29BdEFJSWJzRElMc0RJTG9ETmdKWUlBd3RBRTRodkFNZ0RDZ0MwQWdodlFNZ3ZRTWd2QU02QUdRTElBd3RBRkFodmdOQkFDRy9BMEgvQVNIQUF5QytBeURBQTNFaHdRTkIvd0Vod2dNZ3Z3TWd3Z054SWNNRElNRURJTU1EUnlIRUEwRUJJY1VESU1RRElNVURjU0hHQXdKQUFrQUNRQ0RHQTBVTkFDQU1MUUJSSWNjRFFRQWh5QU5CL3dFaHlRTWd4d01neVFOeEljb0RRZjhCSWNzRElNZ0RJTXNEY1NITUF5REtBeURNQTBjaHpRTkJBU0hPQXlETkF5RE9BM0VoendNZ3p3TU5BUXNnRENnQzBBZ2gwQU5CQUNIUkF5RFFBeURSQXpvQVpTQU1LQUxRQ0NIU0EwRUFJZE1ESU5JRElOTUROZ0pnSUF3b0F0QUlJZFFEUVFBaDFRTWcxQU1nMVFNMkFsd01BUXNnRENnQy9BZ2gxZ01nREMwQVVDSFhBMEgvQVNIWUF5RFhBeURZQTNFaDJRTWcxZ01nMlFNUUZ5SGFBeUFNS0FMUUNDSGJBeURiQXlEYUF6WUNZQ0FNS0FMOENDSGNBeUFNTFFCUElkMERJQXdvQXRBSUlkNERJTjRES0FKZ0lkOERRZjhCSWVBRElOMERJT0FEY1NIaEF5RGNBeURoQXlEZkF4QVlJZUlESUF3b0F0QUlJZU1ESU9NRElPSUROZ0pjSUF3dEFGRWg1QU1nRENnQzBBZ2g1UU1nNVFNZzVBTTZBR1VMSUF3b0Fzd0lJZVlEUVMwaDV3TWdEQ0RuQTJvaDZBTWc2QU1oNlFOQkFTSHFBeURwQXlEcUF5RHFBeURtQXhDSkFTSHJBMEVCSWV3RElPd0RJZTBESU9zREllNERJTzBESU80RFJ5SHZBMEVCSWZBRElPOERJUEFEY1NIeEF3SkFJUEVEUlEwQURBUUxJQXd0QUMwaDhnTWdEQ2dDMEFnaDh3TWc4d01nOGdNNkFHWWdEQ2dDekFnaDlBTkJLQ0gxQTBFQklmWURJUFFESVBVRElQWURFSXdCR2lBTUtBTGtDQ0gzQTBGL0lmZ0RJUGNESWZrRElQZ0RJZm9ESVBrRElQb0RSeUg3QTBFQklmd0RJUHNESVB3RGNTSDlBd0pBQWtBZy9RTkZEUUFnRENnQzVBZ2gvZ01nRENnQzBBZ2gvd01nL3dNZy9nTTZBR2dNQVFzZ0RDZ0MwQWdoZ0FSQkFDR0JCQ0NBQkNDQkJEb0FhQXNnRENnQzBBZ2hnZ1FnZ2dRdEFHWWhnd1JCL3dFaGhBUWdnd1FnaEFSeElZVUVRUVFoaGdRZ2hRUWdoZ1J4SVljRUFrQWdod1JGRFFBZ0RDZ0MwQWdoaUFRZ2lBUXRBR1loaVFSQi93RWhpZ1FnaVFRZ2lnUnhJWXNFUVNBaGpBUWdpd1FnakFSeUlZMEVJSWdFSUkwRU9nQm1DeUFNS0FMZ0NDR09CRUVCSVk4RUlJNEVJWkFFSUk4RUlaRUVJSkFFSUpFRVJpR1NCRUVCSVpNRUlKSUVJSk1FY1NHVUJBSkFJSlFFUlEwQUlBd29BdEFJSVpVRUlKVUVMUUJtSVpZRVFmOEJJWmNFSUpZRUlKY0VjU0dZQkVFOElaa0VJSmdFSUprRWNTR2FCQ0NhQkVVTkFDQU1LQUxRQ0NHYkJDQ2JCQzBBWmlHY0JFSC9BU0dkQkNDY0JDQ2RCSEVobmdSQlF5R2ZCQ0NlQkNDZkJIRWhvQVFnbXdRZ29BUTZBR1lMSUF3b0F0d0lJYUVFUVFFaG9nUWdvUVFob3dRZ29nUWhwQVFnb3dRZ3BBUkdJYVVFUVFFaHBnUWdwUVFncGdSeElhY0VBa0FDUUNDbkJFVU5BQ0FNS0FMUUNDR29CQ0NvQkMwQVppR3BCRUgvQVNHcUJDQ3BCQ0NxQkhFaHF3UkJ3QUFockFRZ3F3UWdyQVJ4SWEwRUFrQWdyUVJGRFFBTElBd29BdEFJSWE0RUlLNEVMUUJtSWE4RVFmOEJJYkFFSUs4RUlMQUVjU0d4QkVHL2Z5R3lCQ0N4QkNDeUJIRWhzd1FncmdRZ3N3UTZBR1lNQVFzZ0RDZ0MzQWdodEFRQ1FDQzBCRVVOQUNBTUtBTFFDQ0cxQkNDMUJDMEFaaUcyQkVIL0FTRzNCQ0MyQkNDM0JIRWh1QVJCSENHNUJDQzRCQ0M1QkhFaHVnUUNRQUpBSUxvRURRQWdEQ2dDMEFnaHV3UWd1d1F0QUdZaHZBUkIvd0VodlFRZ3ZBUWd2UVJ4SWI0RVFaOS9JYjhFSUw0RUlMOEVjU0hBQkNDN0JDREFCRG9BWmd3QkMwSEFBQ0hCQkNBTUlNRUVhaUhDQkNEQ0JDSERCRUhjZ1FRaHhBUkJCaUhGQkNEREJDREVCQ0RGQkJDUUFTSEdCQUpBQWtBQ1FDREdCRVVOQUNBTUxRQkxJY2NFUVJnaHlBUWd4d1FneUFSMElja0VJTWtFSU1nRWRTSEtCRUhrQUNITEJDREtCQ0hNQkNETEJDSE5CQ0RNQkNETkJFNGh6Z1JCQVNIUEJDRE9CQ0RQQkhFaDBBUWcwQVJGRFFFTElBd29BdEFJSWRFRUlORUVMUUJtSWRJRVFmOEJJZE1FSU5JRUlOTUVjU0hVQkVHL2Z5SFZCQ0RVQkNEVkJIRWgxZ1FnMFFRZzFnUTZBR1lNQVFzZ0RDZ0MwQWdoMXdRZzF3UXRBR1loMkFSQi93RWgyUVFnMkFRZzJRUnhJZG9FUVNBaDJ3UWcyZ1FnMndSeElkd0VBa0FnM0FRTkFDQU1LQUxRQ0NIZEJDRGRCQzBBWmlIZUJFSC9BU0hmQkNEZUJDRGZCSEVoNEFSQnYzOGg0UVFnNEFRZzRRUnhJZUlFSU4wRUlPSUVPZ0JtQ3dzTEN3dEJBQ0hqQkNBTUlPTUVOZ0k0QWtBRFFDQU1LQUk0SWVRRVFRWWg1UVFnNUFRaDVnUWc1UVFoNXdRZzVnUWc1d1JJSWVnRVFRRWg2UVFnNkFRZzZRUnhJZW9FSU9vRVJRMEJJQXdvQXZ3SUllc0VJQXdvQWpnaDdBUkJ3QUFoN1FRZ0RDRHRCR29oN2dRZzdnUWg3d1FnN3dRZzdBUnFJZkFFSVBBRUxRQUFJZkVFUWY4QklmSUVJUEVFSVBJRWNTSHpCQ0RyQkNEekJCQVpJZlFFSUF3b0F0QUlJZlVFUVJ3aDlnUWc5UVFnOWdScUlmY0VJQXdvQWpnaCtBUkJBaUg1QkNENEJDRDVCSFFoK2dRZzl3UWcrZ1JxSWZzRUlQc0VJUFFFTmdJQUlBd29BamdoL0FSQkJpSDlCQ0Q4QkNEOUJHb2gvZ1JCd0FBaC93UWdEQ0QvQkdvaGdBVWdnQVVoZ1FVZ2dRVWcvZ1JxSVlJRklJSUZMUUFBSVlNRlFmOEJJWVFGSUlNRklJUUZjU0dGQlNDRkJSQWFJWVlGSUF3b0F0QUlJWWNGUVRRaGlBVWdod1VnaUFWcUlZa0ZJQXdvQWpnaGlnVkJBaUdMQlNDS0JTQ0xCWFFoakFVZ2lRVWdqQVZxSVkwRklJMEZJSVlGTmdJQUlBd29BamdoamdWQkFTR1BCU0NPQlNDUEJXb2hrQVVnRENDUUJUWUNPQXdBQ3dBTElBd29BdEFJSVpFRklKRUZLQUlJSVpJRlFRUWhrd1Vna2dVZ2t3VnFJWlFGSUpRRkVBc2hsUVVnRENnQzBBZ2hsZ1VnbGdVZ2xRVTJBbEFnRENnQzBBZ2hsd1VnbHdVb0FsQWhtQVZCQUNHWkJTQ1lCU0dhQlNDWkJTR2JCU0NhQlNDYkJVY2huQVZCQVNHZEJTQ2NCU0NkQlhFaG5nVUNRQ0NlQlEwQURBTUxJQXdvQXRBSUlaOEZJSjhGS0FKUUlhQUZJQXdvQXRBSUlhRUZJS0VGS0FJSUlhSUZJQXdvQXN3SUlhTUZRUUVocEFVZ29BVWdvZ1VncEFVZ293VVFpUUVocFFWQkFTR21CU0NtQlNHbkJTQ2xCU0dvQlNDbkJTQ29CVWNocVFWQkFTR3FCU0NwQlNDcUJYRWhxd1VDUUNDckJVVU5BQXdFQ3lBTUtBTFFDQ0dzQlNDc0JTMEFaaUd0QlVIL0FTR3VCU0N0QlNDdUJYRWhyd1ZCQVNHd0JTQ3ZCU0N3QlhFaHNRVUNRQ0N4QlEwQUlBd29BdEFJSWJJRklMSUZLQUlJSWJNRklBd2dzd1UyQWlnZ0RDZ0MwQWdodEFVZ3RBVW9BbEFodFFVZ0RDQzFCVFlDSkNBTUtBTFFDQ0cyQlNDMkJTZ0NDQ0czQlVFQkliZ0ZJTGNGSUxnRmRDRzVCU0MyQlNDNUJUWUNDQ0FNS0FMUUNDRzZCU0M2QlNnQ0FDRzdCVUVCSWJ3RklMc0ZJTHdGZENHOUJTQzZCU0M5QlRZQ0FDQU1LQUxRQ0NHK0JTQytCU2dDQkNHL0JVRUJJY0FGSUw4RklNQUZkQ0hCQlNDK0JTREJCVFlDQkNBTUtBTFFDQ0hDQlNEQ0JTZ0NDQ0hEQlVFRUljUUZJTU1GSU1RRmFpSEZCU0RGQlJBTEljWUZJQXdneGdVMkFod2dEQ0RHQlRZQ0lDQU1LQUljSWNjRlFRQWh5QVVneHdVaHlRVWd5QVVoeWdVZ3lRVWd5Z1ZISWNzRlFRRWh6QVVneXdVZ3pBVnhJYzBGQWtBZ3pRVU5BQXdFQ3dKQUEwQWdEQ2dDS0NIT0JVRi9JYzhGSU00RklNOEZhaUhRQlNBTUlOQUZOZ0lvSU00RlJRMEJJQXdvQWlRaDBRVkJBU0hTQlNEUkJTRFNCV29oMHdVZ0RDRFRCVFlDSkNEUkJTMEFBQ0hVQlVIL0FTSFZCU0RVQlNEVkJYRWgxZ1ZCLy84RElkY0ZJTllGSU5jRmNTSFlCVUVJSWRrRklOZ0ZJTmtGZENIYUJTQU1LQUlnSWRzRlFRSWgzQVVnMndVZzNBVnFJZDBGSUF3ZzNRVTJBaUFnMndVZzJnVTdBUUFNQUFzQUN5QU1LQUxRQ0NIZUJTRGVCU2dDVUNIZkJTRGZCUkN5QVNBTUtBSWNJZUFGSUF3b0F0QUlJZUVGSU9FRklPQUZOZ0pRQ3lBTUtBTFFDQ0hpQlNEaUJTMEFaaUhqQlVIL0FTSGtCU0RqQlNEa0JYRWg1UVZCQWlIbUJTRGxCU0RtQlhFaDV3VUNRQ0RuQlVVTkFDQU1LQUxRQ0NIb0JTRG9CU2dDQ0NIcEJVRUNJZW9GSU9rRklPb0ZiU0hyQlNBTUlPc0ZOZ0lZSUF3b0F0QUlJZXdGSU93RktBSlFJZTBGSUF3ZzdRVTJBaFFDUUFOQUlBd29BaGdoN2dWQmZ5SHZCU0R1QlNEdkJXb2g4QVVnRENEd0JUWUNHQ0R1QlVVTkFTQU1LQUlVSWZFRlFRSWg4Z1VnOFFVZzhnVnFJZk1GSUF3Zzh3VTJBaFFnOFFVdkFRQWg5QVZCRUNIMUJTRDBCU0QxQlhRaDlnVWc5Z1VnOVFWMUlmY0ZRWUNBQWlINEJTRDNCU0Q0QlhNaCtRVWc4UVVnK1FVN0FRQU1BQXNBQ3dzZ0RDZ0MwQWdoK2dVZytnVXRBR1loK3dWQi93RWgvQVVnK3dVZy9BVnhJZjBGUVJBaC9nVWcvUVVnL2dWeElmOEZBa0FnL3dWRkRRQWdEQ2dDMEFnaGdBWWdnQVlvQWxBaGdRWWdEQ2dDMEFnaGdnWWdnZ1lvQWdnaGd3WkJBaUdFQmlDREJpQ0VCbTBoaFFaQkFDR0dCaUNCQmlDR0JpQ0ZCaEFiSUF3b0F0QUlJWWNHSUljR0tBSUFJWWdHSUF3Z2lBWTJBaEFnRENnQzBBZ2hpUVlnaVFZb0FnZ2hpZ1lnRENnQzBBZ2hpd1lnaXdZb0FnUWhqQVlnaWdZZ2pBWnJJWTBHSUF3b0F0QUlJWTRHSUk0R0lJMEdOZ0lBSUF3b0F0QUlJWThHSUk4R0tBSUlJWkFHSUF3b0FoQWhrUVlna0FZZ2tRWnJJWklHSUF3b0F0QUlJWk1HSUpNR0lKSUdOZ0lFSUF3b0F0QUlJWlFHSUpRR0xRQm1JWlVHUWY4QklaWUdJSlVHSUpZR2NTR1hCa0Z2SVpnR0lKY0dJSmdHY1NHWkJpQ1VCaUNaQmpvQVppQU1LQUxRQ0NHYUJpQ2FCaTBBWmlHYkJrSC9BU0djQmlDYkJpQ2NCbkVoblFaQkJDR2VCaUNkQmlDZUJuSWhud1lnbWdZZ253WTZBR1lMSUF3b0F1Z0lJYUFHUVg4aG9RWWdvQVlob2dZZ29RWWhvd1lnb2dZZ293WkhJYVFHUVFFaHBRWWdwQVlncFFaeElhWUdBa0FDUUNDbUJrVU5BQ0FNS0FMb0NDR25CaUNuQnJjaHFnZEVBQUFBQUFBQVdVQWhxd2NncWdjZ3F3ZWpJYXdISUt3SHRpR3dCeUFNS0FMUUNDR29CaUNvQmlDd0J6Z0NUQXdCQ3lBTUtBTFFDQ0dwQmlDcEJpZ0NDQ0dxQmtFQ0lhc0dJS29HSUtzR2JTR3NCaUFNSUt3R05nSU1RUUFoclFZZ0RDQ3RCanNCQ2lBTUtBTFFDQ0d1QmlDdUJpZ0NVQ0d2QmlBTUlLOEdOZ0lFQWtBRFFDQU1LQUlNSWJBR1FYOGhzUVlnc0FZZ3NRWnFJYklHSUF3Z3NnWTJBZ3dnc0FaRkRRRWdEQ2dDQkNHekJrRUNJYlFHSUxNR0lMUUdhaUcxQmlBTUlMVUdOZ0lFSUxNR0x3RUFJYllHSUF3Z3RnWTdBUWdnREM4QkNDRzNCa0VRSWJnR0lMY0dJTGdHZENHNUJpQzVCaUM0Qm5VaHVnWkJBQ0c3QmlDNkJpRzhCaUM3QmlHOUJpQzhCaUM5QmtnaHZnWkJBU0cvQmlDK0JpQy9CbkVod0FZQ1FDREFCa1VOQUNBTUx3RUlJY0VHUVJBaHdnWWd3UVlnd2daMEljTUdJTU1HSU1JR2RTSEVCa0VBSWNVR0lNVUdJTVFHYXlIR0JpQU1JTVlHT3dFSUN5QU1Md0VJSWNjR1FSQWh5QVlneHdZZ3lBWjBJY2tHSU1rR0lNZ0dkU0hLQmlBTUx3RUtJY3NHUVJBaHpBWWd5d1lnekFaMEljMEdJTTBHSU13R2RTSE9CaURLQmlIUEJpRE9CaUhRQmlEUEJpRFFCa29oMFFaQkFTSFNCaURSQmlEU0JuRWgwd1lDUUNEVEJrVU5BQ0FNTHdFSUlkUUdJQXdnMUFZN0FRb0xEQUFMQUFzZ0RDNEJDaUhWQmlEVkJyY2hyUWRFQUFBQUFBQUE0RUFocmdjZ3JnY2dyUWVqSWE4SElLOEh0aUd4QnlBTUtBTFFDQ0hXQmlEV0JpQ3hCemdDVEFzZ0RDZ0MwQWdoMXdZZzF3WW9BZ2doMkFaQkFpSFpCaURZQmlEWkJtMGgyZ1lnMXdZZzJnWTJBZ2dnRENnQzBBZ2gyd1lnMndZb0FnQWgzQVpCQWlIZEJpRGNCaURkQm0waDNnWWcyd1lnM2dZMkFnQWdEQ2dDMEFnaDN3WWczd1lvQWdRaDRBWkJBaUhoQmlEZ0JpRGhCbTBoNGdZZzN3WWc0Z1kyQWdRZ0RDZ0MwQWdoNHdZZzR3WW9BZ2doNUFaQkRDSGxCaURrQmlEbEJuUWg1Z1lnNHdZZzVnWTJBZ2dnRENnQzBBZ2g1d1lnNXdZb0FnQWg2QVpCRENIcEJpRG9CaURwQm5RaDZnWWc1d1lnNmdZMkFnQWdEQ2dDMEFnaDZ3WWc2d1lvQWdRaDdBWkJEQ0h0QmlEc0JpRHRCblFoN2dZZzZ3WWc3Z1kyQWdRZ0RDMEFOeUh2QmtIL0FTSHdCaUR2QmlEd0JuRWg4UVpCRHlIeUJpRHhCaUR5Qm5FaDh3WkJDQ0gwQmlEekJpRDBCblFoOVFZZ0RDZ0MwQWdoOWdZZzlnWW9BZ0FoOXdZZzl3WWc5UVp5SWZnR0lQWUdJUGdHTmdJQUlBd3RBRGNoK1FaQi93RWgrZ1lnK1FZZytnWnhJZnNHUVFRaC9BWWcrd1lnL0FaMUlmMEdRUThoL2dZZy9RWWcvZ1p4SWY4R1FRZ2hnQWNnL3dZZ2dBZDBJWUVISUF3b0F0QUlJWUlISUlJSEtBSUVJWU1ISUlNSElJRUhjaUdFQnlDQ0J5Q0VCellDQkNBTUtBTFFDQ0dGQnlDRkJ5MEFhQ0dHQjBFWUlZY0hJSVlISUljSGRDR0lCeUNJQnlDSEIzVWhpUWNDUUNDSkIwVU5BQ0FNS0FMUUNDR0tCeUNLQnkwQVppR0xCMEgvQVNHTUJ5Q0xCeUNNQjNFaGpRZEJCQ0dPQnlDTkJ5Q09CM0VoandjZ2p3Y05BQ0FNS0FMOENDR1FCeUFNS0FMUUNDR1JCeUNRQnlDUkJ4QmNJQXdvQXZ3SUlaSUhJSklIS0FJQUlaTUhBa0Fna3dkRkRRQU1CZ3NMSUF3b0F0Z0lJWlFIUVFFaGxRY2dsQWNobGdjZ2xRY2hsd2NnbGdjZ2x3ZEdJWmdIUVFFaG1RY2dtQWNnbVFkeElab0hBa0FnbWdkRkRRQWdEQ2dDMEFnaG13Y2dtd2NvQWdRaG5BY2dEQ2dDMEFnaG5RY2duUWNnbkFjMkFnZ0xJQXdvQWp3aG5nZEJBU0dmQnlDZUJ5Q2ZCMm9ob0FjZ0RDQ2dCellDUEF3QUN3QUxJQXdvQXN3SUlhRUhJS0VIRUgwYURBUUxJQXdvQXZ3SUlhSUhRUUVob3djZ29nY2dvd2MyQWdBTUFRc0xJQXdvQXRRSUlhUUhJS1FIRUJNTElBd29Bc3dJSWFVSElLVUhFSDBhSUF3b0F2UUlJYVlIUVFBaHB3Y2dwZ2NncHdjMkFnQUxRWUFKSWFnSElBd2dxQWRxSWFrSElLa0hKQUFQQzhZQ0FTdC9Jd0FoQVVFUUlRSWdBU0FDYXlFRElBTWtBQ0FESUFBMkFneEJnQUVoQkNBRElBUTJBZ2dDUUFOQUlBTW9BZ2doQlVGL0lRWWdCU0FHYWlFSElBTWdCellDQ0NBRlJRMEJJQU1vQWd3aENFRWNJUWtnQ0NBSmFpRUtJQU1vQWdnaEMwRUNJUXdnQ3lBTWRDRU5JQW9nRFdvaERpQU9LQUlBSVE5QkFDRVFJQThoRVNBUUlSSWdFU0FTUnlFVFFRRWhGQ0FUSUJSeElSVUNRQ0FWUlEwQUlBTW9BZ3doRmlBREtBSUlJUmRCQUNFWUlCWWdHQ0FYRUJJTElBTW9BZ3doR1VHY0JDRWFJQmtnR21vaEd5QURLQUlJSVJ4QkFpRWRJQndnSFhRaEhpQWJJQjVxSVI4Z0h5Z0NBQ0VnUVFBaElTQWdJU0lnSVNFaklDSWdJMGNoSkVFQklTVWdKQ0FsY1NFbUFrQWdKa1VOQUNBREtBSU1JU2NnQXlnQ0NDRW9RUUVoS1NBbklDa2dLQkFTQ3d3QUN3QUxRUkFoS2lBRElDcHFJU3NnS3lRQUR3dThCQUZQZnlNQUlRTkJJQ0VFSUFNZ0JHc2hCU0FGSkFBZ0JTQUFOZ0ljSUFVZ0FUWUNHQ0FGSUFJMkFoUWdCU2dDR0NFR0FrQUNRQ0FHUlEwQUlBVW9BaHdoQjBHY0JDRUlJQWNnQ0dvaENTQUZLQUlVSVFwQkFpRUxJQW9nQzNRaERDQUpJQXhxSVEwZ0RTZ0NBQ0VPSUE0aER3d0JDeUFGS0FJY0lSQkJIQ0VSSUJBZ0VXb2hFaUFGS0FJVUlSTkJBaUVVSUJNZ0ZIUWhGU0FTSUJWcUlSWWdGaWdDQUNFWElCY2hEd3NnRHlFWUlBVWdHRFlDREVFQUlSa2dCU0FaTmdJUUFrQURRQ0FGS0FJUUlScEJnQUVoR3lBYUlSd2dHeUVkSUJ3Z0hVZ2hIa0VCSVI4Z0hpQWZjU0VnSUNCRkRRRWdCU2dDRENFaFFRUWhJaUFoSUNKcUlTTWdCU2dDRUNFa1FRSWhKU0FrSUNWMElTWWdJeUFtYWlFbklDY29BZ0FoS0VFQUlTa2dLQ0VxSUNraEt5QXFJQ3RISVN4QkFTRXRJQ3dnTFhFaExnSkFJQzVGRFFBZ0JTZ0NEQ0V2UVFRaE1DQXZJREJxSVRFZ0JTZ0NFQ0V5UVFJaE15QXlJRE4wSVRRZ01TQTBhaUUxSURVb0FnQWhOa0YvSVRjZ05pRTRJRGNoT1NBNElEbEhJVHBCQVNFN0lEb2dPM0VoUEFKQUlEeEZEUUFnQlNnQ0RDRTlRUVFoUGlBOUlENXFJVDhnQlNnQ0VDRkFRUUloUVNCQUlFRjBJVUlnUHlCQ2FpRkRJRU1vQWdBaFJDQkVFQk1MSUFVb0Fnd2hSVUVFSVVZZ1JTQkdhaUZISUFVb0FoQWhTRUVDSVVrZ1NDQkpkQ0ZLSUVjZ1Ntb2hTMEVBSVV3Z1N5Qk1OZ0lBQ3lBRktBSVFJVTFCQVNGT0lFMGdUbW9oVHlBRklFODJBaEFNQUFzQUMwRWdJVkFnQlNCUWFpRlJJRkVrQUE4TDFRSUJLMzhqQUNFQlFSQWhBaUFCSUFKcklRTWdBeVFBSUFNZ0FEWUNEQ0FES0FJTUlRUkJBQ0VGSUFRaEJpQUZJUWNnQmlBSFJ5RUlRUUVoQ1NBSUlBbHhJUW9DUUFKQUlBb05BQXdCQ3lBREtBSU1JUXNnQ3lnQ0JDRU1RUUFoRFNBTUlRNGdEU0VQSUE0Z0QwY2hFRUVCSVJFZ0VDQVJjU0VTQWtBZ0VrVU5BRUVBSVJNZ0F5QVROZ0lFQWtBRFFDQURLQUlFSVJRZ0F5Z0NEQ0VWSUJVb0FnQWhGaUFVSVJjZ0ZpRVlJQmNnR0VnaEdVRUJJUm9nR1NBYWNTRWJJQnRGRFFFZ0F5Z0NEQ0VjSUJ3b0FnUWhIU0FES0FJRUlSNUI3QUFoSHlBZUlCOXNJU0FnSFNBZ2FpRWhJQU1nSVRZQ0NDQURLQUlJSVNJZ0lpZ0NVQ0VqSUNNUXNnRWdBeWdDQkNFa1FRRWhKU0FrSUNWcUlTWWdBeUFtTmdJRURBQUxBQXNnQXlnQ0RDRW5JQ2NvQWdRaEtDQW9FTElCQ3lBREtBSU1JU2tnS1JDeUFRdEJFQ0VxSUFNZ0ttb2hLeUFySkFBUEM5OEJBUmwvSXdBaEFrRVFJUU1nQWlBRGF5RUVJQVFrQUNBRUlBQTJBZ2dnQkNBQk5nSUVJQVFvQWdnaEJTQUVLQUlFSVFZZ0JDZ0NDQ0VIUVp3SUlRZ2dCeUFJYWlFSlFRQWhDa0YvSVFzZ0JTQUdJQWtnQ2lBTElBc2dDeUFLSUFvZ0NoQVFJQVFvQWdnaERDQU1LQUtjQ0NFTlFRQWhEaUFOSVE4Z0RpRVFJQThnRUVjaEVVRUJJUklnRVNBU2NTRVRBa0FDUUNBVERRQkJmeUVVSUFRZ0ZEWUNEQXdCQ3lBRUtBSUlJUlZCZnlFV0lCVWdGallDb0FoQkFDRVhJQVFnRnpZQ0RBc2dCQ2dDRENFWVFSQWhHU0FFSUJscUlSb2dHaVFBSUJnUEM5SUJBUnQvSXdBaEFrRVFJUU1nQWlBRGF5RUVJQVFnQURZQ0NDQUVJQUU2QUFjZ0JDMEFCeUVGUVFBaEJrSC9BU0VISUFVZ0IzRWhDRUgvQVNFSklBWWdDWEVoQ2lBSUlBcEhJUXRCQVNFTUlBc2dESEVoRFFKQUFrQWdEUTBBUVFBaERpQUVJQTQyQWd3TUFRc2dCQ2dDQ0NFUElBOG9Bb1JtSVJCQkppRVJJQkFnRVd3aEVrRVFJUk1nRWlBVGRDRVVJQVFvQWdnaEZTQVZLQUlJSVJZZ0JDMEFCeUVYUWY4QklSZ2dGeUFZY1NFWklCWWdHV3doR2lBVUlCcHRJUnNnQkNBYk5nSU1DeUFFS0FJTUlSd2dIQThMZ3dFQkVuOGpBQ0VDUVJBaEF5QUNJQU5ySVFRZ0JDQUFOZ0lNSUFRZ0FUb0FDeUFFS0FJTUlRVWdCU2dDaEdZaEJrRUtJUWNnQmlBSGRDRUlJQVF0QUFzaENVSC9BU0VLSUFrZ0NuRWhDeUFJSUF0c0lReEJCU0VOSUF3Z0RYUWhEaUFFS0FJTUlROGdEeWdDQ0NFUVFTWWhFU0FRSUJGc0lSSWdEaUFTYlNFVElCTVBDMjBCRDM4akFDRUNRUkFoQXlBQ0lBTnJJUVFnQkNBQU5nSU1JQVFnQVRvQUN5QUVLQUlNSVFVZ0JTZ0NDQ0VHUVNZaEJ5QUdJQWRzSVFnZ0JDMEFDeUVKUWY4QklRb2dDU0FLY1NFTFFRRWhEQ0FMSUF4MElRMUJCU0VPSUEwZ0RuUWhEeUFJSUE5dElSQWdFQThMdUFJREczOEtmQUY5SXdBaEEwRVFJUVFnQXlBRWF5RUZJQVVnQURZQ0NDQUZJQUU2QUFjZ0JTQUNOZ0lBSUFVdEFBY2hCa0VBSVFkQi93RWhDQ0FHSUFoeElRbEIvd0VoQ2lBSElBcHhJUXNnQ1NBTFJ5RU1RUUVoRFNBTUlBMXhJUTRDUUFKQUlBNE5BRUVBSVE4Z0JTQVBOZ0lNREFFTElBVW9BZ0FoRUNBUXR5RWVSQUFBQUFBQUFFTkFJUjhnSGlBZm9pRWdSQUFBQUFBQUFQQkFJU0VnSUNBaG9pRWlJQ0sySVNnZ0tMc2hJeUFGS0FJSUlSRWdFU2dDQ0NFU0lBVXRBQWNoRTBIL0FTRVVJQk1nRkhFaEZTQVNJQlZzSVJZZ0ZyY2hKQ0FqSUNTaklTVWdKWmtoSmtRQUFBQUFBQURnUVNFbklDWWdKMk1oRnlBWFJTRVlBa0FDUUNBWURRQWdKYW9oR1NBWklSb01BUXRCZ0lDQWdIZ2hHeUFiSVJvTElCb2hIQ0FGSUJ3MkFnd0xJQVVvQWd3aEhTQWREd3VEQWdFaWZ5TUFJUUpCRUNFRElBSWdBMnNoQkNBRUlBQTJBZ3dnQkNBQk9nQUxJQVF0QUFzaEJVSC9BU0VHSUFVZ0JuRWhCMEVHSVFnZ0J5QUlkU0VKUVFNaENpQUpJQXB4SVF0QkF5RU1JQXdnQzJzaERTQUVJQTAyQWdRZ0JDZ0NCQ0VPUVFNaER5QU9JQTlzSVJBZ0JDQVFOZ0lFSUFRdEFBc2hFVUgvQVNFU0lCRWdFbkVoRTBFL0lSUWdFeUFVY1NFVklBUW9BZ1FoRmlBVklCWjBJUmNnQkNBWE5nSUVJQVFvQWdRaEdFSEUyQUloR1NBWUlCbHNJUm9nQkNnQ0RDRWJJQnNvQWdnaEhDQWFJQnh0SVIwZ0JDZ0NEQ0VlSUI0b0FvUm1JUjhnSFNBZmJDRWdJQVFnSURZQ0JDQUVLQUlFSVNGQkNpRWlJQ0VnSW5RaEl5QWpEd3M3QVFoL0l3QWhBVUVRSVFJZ0FTQUNheUVESUFNZ0FEb0FEeUFETFFBUElRUkIvd0VoQlNBRUlBVnhJUVpCRmlFSElBWWdCM1FoQ0NBSUR3dTlBZ0VoZnlNQUlRTkJJQ0VFSUFNZ0JHc2hCU0FGSUFBMkFod2dCU0FCTmdJWUlBVWdBallDRkNBRktBSWNJUVlnQlNnQ0ZDRUhRUUVoQ0NBSElBaDBJUWtnQmlBSmFpRUtJQVVnQ2pZQ0RDQUZLQUlZSVFzZ0JTZ0NIQ0VNUVFFaERTQUxJQTEwSVE0Z0RDQU9haUVQSUFVZ0R6WUNIQ0FGS0FJWUlSQWdCU2dDRkNFUklCRWdFR3NoRWlBRklCSTJBaFFnQlNnQ0ZDRVRRUUloRkNBVElCUnRJUlVnQlNBVk5nSVVBa0FEUUNBRktBSVVJUlpCZnlFWElCWWdGMm9oR0NBRklCZzJBaFFnRmtVTkFTQUZLQUljSVJrZ0dTOEJBQ0VhSUFVZ0dqc0JFaUFGS0FJTUlSc2dHeThCQUNFY0lBVW9BaHdoSFVFQ0lSNGdIU0FlYWlFZklBVWdIellDSENBZElCdzdBUUFnQlM4QkVpRWdJQVVvQWd3aElVRitJU0lnSVNBaWFpRWpJQVVnSXpZQ0RDQWhJQ0E3QVFBTUFBc0FDdzhMcHc4QitnRi9Jd0FoQWtFUUlRTWdBaUFEYXlFRUlBUWtBQ0FFSUFBMkFnZ2dCQ0FCTmdJRUlBUW9BZ2doQlVHOERTRUdJQVVnQm1vaEJ5QUVLQUlFSVFoQjdBRWhDU0FJSUFsc0lRb2dCeUFLYWlFTElBc29BdHdCSVF3Z0JDQU1OZ0lBSUFRb0FnQWhEVUVGSVE0Z0RTRVBJQTRoRUNBUElCQktJUkZCQVNFU0lCRWdFbkVoRXdKQUFrQWdFMFVOQUNBRUtBSUlJUlJCdkEwaEZTQVVJQlZxSVJZZ0JDZ0NCQ0VYUWV3QklSZ2dGeUFZYkNFWklCWWdHV29oR2tFQUlSc2dHaUFiT2dBQVFRRWhIQ0FFSUJ3MkFnd01BUXNnQkNnQ0NDRWRRYndOSVI0Z0hTQWVhaUVmSUFRb0FnUWhJRUhzQVNFaElDQWdJV3doSWlBZklDSnFJU01nSXlnQ0JDRWtJQ1F0QUdZaEpVSC9BU0VtSUNVZ0puRWhKMEhBQUNFb0lDY2dLSEVoS1FKQUlDbEZEUUFnQkNnQ0NDRXFRYndOSVNzZ0tpQXJhaUVzSUFRb0FnUWhMVUhzQVNFdUlDMGdMbXdoTHlBc0lDOXFJVEFnTUMwQUFDRXhRZjhCSVRJZ01TQXljU0V6UVFFaE5DQXpJVFVnTkNFMklEVWdOa1loTjBFQklUZ2dOeUE0Y1NFNUFrQUNRQ0E1RFFBZ0JDZ0NDQ0U2UWJ3TklUc2dPaUE3YWlFOElBUW9BZ1FoUFVIc0FTRStJRDBnUG13aFB5QThJRDlxSVVBZ1FDMEFBQ0ZCUWY4QklVSWdRU0JDY1NGRFFRSWhSQ0JESVVVZ1JDRkdJRVVnUmtZaFIwRUJJVWdnUnlCSWNTRkpJRWxGRFFFTElBUW9BZ0FoU2tFQ0lVc2dTaUZNSUVzaFRTQk1JRTFLSVU1QkFTRlBJRTRnVDNFaFVBSkFJRkJGRFFBZ0JDZ0NDQ0ZSUWJ3TklWSWdVU0JTYWlGVElBUW9BZ1FoVkVIc0FTRlZJRlFnVld3aFZpQlRJRlpxSVZkQkFDRllJRmNnV0RZQ0lFRUFJVmtnQkNCWk5nSU1EQU1MQ3dzZ0JDZ0NBQ0ZhUVFFaFd5QmFJRnRxSVZ3Z0JDZ0NDQ0ZkUWJ3TklWNGdYU0JlYWlGZklBUW9BZ1FoWUVIc0FTRmhJR0FnWVd3aFlpQmZJR0pxSVdNZ1l5QmNOZ0xjQVNBRUtBSUlJV1JCdkEwaFpTQmtJR1ZxSVdZZ0JDZ0NCQ0ZuUWV3QklXZ2daeUJvYkNGcElHWWdhV29oYWlCcUtBSVlJV3NnQkNnQ0NDRnNRYndOSVcwZ2JDQnRhaUZ1SUFRb0FnUWhiMEhzQVNGd0lHOGdjR3doY1NCdUlIRnFJWElnY2lnQ0JDRnpRVFFoZENCeklIUnFJWFVnQkNnQ0FDRjJRUUloZHlCMklIZDBJWGdnZFNCNGFpRjVJSGtvQWdBaGVpQnJJWHNnZWlGOElIc2dmRVloZlVFQklYNGdmU0IrY1NGL0FrQUNRQ0IvRFFBZ0JDZ0NBQ0dBQVVFQ0lZRUJJSUFCSVlJQklJRUJJWU1CSUlJQklJTUJTaUdFQVVFQklZVUJJSVFCSUlVQmNTR0dBU0NHQVVVTkFTQUVLQUlJSVljQlFid05JWWdCSUljQklJZ0JhaUdKQVNBRUtBSUVJWW9CUWV3QklZc0JJSW9CSUlzQmJDR01BU0NKQVNDTUFXb2hqUUVnalFFb0FoZ2hqZ0VnQkNnQ0NDR1BBVUc4RFNHUUFTQ1BBU0NRQVdvaGtRRWdCQ2dDQkNHU0FVSHNBU0dUQVNDU0FTQ1RBV3dobEFFZ2tRRWdsQUZxSVpVQklKVUJLQUlFSVpZQlFUUWhsd0VnbGdFZ2x3RnFJWmdCSUFRb0FnQWhtUUZCQWlHYUFTQ1pBU0NhQVhRaG13RWdtQUVnbXdGcUlad0JJSndCS0FJQUlaMEJJSTRCSVo0QklKMEJJWjhCSUo0QklKOEJTQ0dnQVVFQklhRUJJS0FCSUtFQmNTR2lBU0NpQVVVTkFRc2dCQ2dDQ0NHakFTQUVLQUlFSWFRQklLTUJJS1FCRUJ3aHBRRWdCQ0NsQVRZQ0RBd0JDeUFFS0FJSUlhWUJRYndOSWFjQklLWUJJS2NCYWlHb0FTQUVLQUlFSWFrQlFld0JJYW9CSUtrQklLb0JiQ0dyQVNDb0FTQ3JBV29ockFFZ3JBRW9BZ1FoclFGQk5DR3VBU0N0QVNDdUFXb2hyd0VnQkNnQ0FDR3dBVUVDSWJFQklMQUJJTEVCZENHeUFTQ3ZBU0N5QVdvaHN3RWdzd0VvQWdBaHRBRWdCQ2dDQ0NHMUFVRzhEU0cyQVNDMUFTQzJBV29odHdFZ0JDZ0NCQ0c0QVVIc0FTRzVBU0M0QVNDNUFXd2h1Z0VndHdFZ3VnRnFJYnNCSUxzQklMUUJOZ0ljSUFRb0FnZ2h2QUZCdkEwaHZRRWd2QUVndlFGcUliNEJJQVFvQWdRaHZ3RkI3QUVod0FFZ3Z3RWd3QUZzSWNFQklMNEJJTUVCYWlIQ0FTRENBU2dDQkNIREFVRWNJY1FCSU1NQklNUUJhaUhGQVNBRUtBSUFJY1lCUVFJaHh3RWd4Z0VneHdGMEljZ0JJTVVCSU1nQmFpSEpBU0RKQVNnQ0FDSEtBU0FFS0FJSUljc0JRYndOSWN3QklNc0JJTXdCYWlITkFTQUVLQUlFSWM0QlFld0JJYzhCSU00QklNOEJiQ0hRQVNETkFTRFFBV29oMFFFZzBRRWd5Z0UyQWlBZ0JDZ0NDQ0hTQVVHOERTSFRBU0RTQVNEVEFXb2gxQUVnQkNnQ0JDSFZBVUhzQVNIV0FTRFZBU0RXQVd3aDF3RWcxQUVnMXdGcUlkZ0JJTmdCS0FJY0lka0JJQVFvQWdnaDJnRkJ2QTBoMndFZzJnRWcyd0ZxSWR3QklBUW9BZ1FoM1FGQjdBRWgzZ0VnM1FFZzNnRnNJZDhCSU53QklOOEJhaUhnQVNEZ0FTZ0NHQ0hoQVNEWkFTSGlBU0RoQVNIakFTRGlBU0RqQVVnaDVBRkJBU0hsQVNEa0FTRGxBWEVoNWdFQ1FDRG1BVVVOQUNBRUtBSUlJZWNCUWJ3TkllZ0JJT2NCSU9nQmFpSHBBU0FFS0FJRUllb0JRZXdCSWVzQklPb0JJT3NCYkNIc0FTRHBBU0RzQVdvaDdRRWc3UUVvQWlBaDdnRkJBQ0h2QVNEdkFTRHVBV3NoOEFFZ0JDZ0NDQ0h4QVVHOERTSHlBU0R4QVNEeUFXb2g4d0VnQkNnQ0JDSDBBVUhzQVNIMUFTRDBBU0QxQVd3aDlnRWc4d0VnOWdGcUlmY0JJUGNCSVBBQk5nSWdDMEVBSWZnQklBUWcrQUUyQWd3TElBUW9BZ3doK1FGQkVDSDZBU0FFSVBvQmFpSDdBU0Q3QVNRQUlQa0JEd3VwRHdPL0FYOGdmUXg4SXdBaEFrRWdJUU1nQWlBRGF5RUVJQVFnQURZQ0hDQUVJQUUyQWhnZ0JDZ0NIQ0VGUWJ3TklRWWdCU0FHYWlFSElBUW9BaGdoQ0VIc0FTRUpJQWdnQ1d3aENpQUhJQXBxSVFzZ0N5b0NSQ0hCQVNBRUlNRUJPQUlVSUFRb0Fod2hERUc4RFNFTklBd2dEV29oRGlBRUtBSVlJUTlCN0FFaEVDQVBJQkJzSVJFZ0RpQVJhaUVTSUJJb0F1Z0JJUk1DUUFKQUlCTU5BQ0FFS0FJY0lSUkJ2QTBoRlNBVUlCVnFJUllnQkNnQ0dDRVhRZXdCSVJnZ0Z5QVliQ0VaSUJZZ0dXb2hHaUFhS2dKSUljSUJJQVFnd2dFNEFoQWdCQ2dDSENFYlFid05JUndnR3lBY2FpRWRJQVFvQWhnaEhrSHNBU0VmSUI0Z0gyd2hJQ0FkSUNCcUlTRWdJU2dDTUNFaUFrQWdJa1VOQUNBRUtBSWNJU05CdkEwaEpDQWpJQ1JxSVNVZ0JDZ0NHQ0VtUWV3QklTY2dKaUFuYkNFb0lDVWdLR29oS1NBcEtnSk1JY01CSUFRcUFoUWh4QUVneEFFZ3d3R1VJY1VCSUFRZ3hRRTRBaFFnQkNnQ0hDRXFRYndOSVNzZ0tpQXJhaUVzSUFRb0FoZ2hMVUhzQVNFdUlDMGdMbXdoTHlBc0lDOXFJVEFnTUNvQ1RDSEdBU0FFS2dJUUljY0JJTWNCSU1ZQmxDSElBU0FFSU1nQk9BSVFDeUFFS0FJY0lURkJ2QTBoTWlBeElESnFJVE1nQkNnQ0dDRTBRZXdCSVRVZ05DQTFiQ0UySURNZ05tb2hOeUEzS0FJRUlUZ2dPQzBBWmlFNVFmOEJJVG9nT1NBNmNTRTdRY0FBSVR3Z095QThjU0U5QWtBZ1BVVU5BQ0FFS0FJY0lUNGdCQ2dDR0NFL1Fld0JJVUFnUHlCQWJDRkJJRDRnUVdvaFFrSFVEU0ZESUVJZ1Eyb2hSQ0JFS0FJQUlVVkJGeUZHSUVVZ1JuVWhSMEVESVVnZ1J5QklkQ0ZKUVpDR0JDRktJRW9nU1dvaFN5QkxLd01BSWVFQklPRUJ0aUhKQVNBRUtnSVVJY29CSU1vQklNa0JsQ0hMQVNBRUlNc0JPQUlVSUFRb0Fod2hUQ0FFS0FJWUlVMGdUU0JBYkNGT0lFd2dUbW9oVHlCUElFTnFJVkFnVUNnQ0FDRlJJRkVnUm5VaFVpQlNJRWgwSVZNZ1NpQlRhaUZVSUZRckF3QWg0Z0VnNGdHMkljd0JJQVFxQWhBaHpRRWd6UUVnekFHVUljNEJJQVFnemdFNEFoQUxJQVFxQWhRaHp3RWd6d0c3SWVNQlJBQUFBQUFBQUxCQUllUUJJT01CSU9RQm9pSGxBU0RsQWJZaDBBRWcwQUdMSWRFQlF3QUFBRThoMGdFZzBRRWcwZ0ZkSVZVZ1ZVVWhWZ0pBQWtBZ1ZnMEFJTkFCcUNGWElGY2hXQXdCQzBHQWdJQ0FlQ0ZaSUZraFdBc2dXQ0ZhSUFRZ1dqWUNEQ0FFS0FJTUlWdEIvejhoWENCYklWMGdYQ0ZlSUYwZ1hrb2hYMEVCSVdBZ1h5QmdjU0ZoQWtBZ1lVVU5BRUgvUHlGaUlBUWdZallDREFzZ0JDb0NFQ0hUQVNEVEFic2g1Z0ZFQUFBQUFBQUFzRUFoNXdFZzVnRWc1d0dpSWVnQklPZ0J0aUhVQVNEVUFZc2gxUUZEQUFBQVR5SFdBU0RWQVNEV0FWMGhZeUJqUlNGa0FrQUNRQ0JrRFFBZzFBR29JV1VnWlNGbURBRUxRWUNBZ0lCNElXY2daeUZtQ3lCbUlXZ2dCQ0JvTmdJSUlBUW9BZ2doYVVIL1B5RnFJR2toYXlCcUlXd2dheUJzU2lGdFFRRWhiaUJ0SUc1eElXOENRQ0J2UlEwQVFmOC9JWEFnQkNCd05nSUlDeUFFS0FJTUlYRWdCQ2dDSENGeVFid05JWE1nY2lCemFpRjBJQVFvQWhnaGRVSHNBU0YySUhVZ2Rtd2hkeUIwSUhkcUlYZ2dlQ0J4TmdJOElBUW9BZ2doZVNBRUtBSWNJWHBCdkEwaGV5QjZJSHRxSVh3Z0JDZ0NHQ0Y5UWV3QklYNGdmU0IrYkNGL0lId2dmMm9oZ0FFZ2dBRWdlVFlDUUF3QkN5QUVLQUljSVlFQlFid05JWUlCSUlFQklJSUJhaUdEQVNBRUtBSVlJWVFCUWV3QklZVUJJSVFCSUlVQmJDR0dBU0NEQVNDR0FXb2hod0VnaHdFb0FqQWhpQUVDUUNDSUFVVU5BQ0FFS0FJY0lZa0JRYndOSVlvQklJa0JJSW9CYWlHTEFTQUVLQUlZSVl3QlFld0JJWTBCSUl3QklJMEJiQ0dPQVNDTEFTQ09BV29oandFZ2p3RXFBa3doMXdFZ0JDb0NGQ0hZQVNEWUFTRFhBWlFoMlFFZ0JDRFpBVGdDRkFzZ0JDZ0NIQ0dRQVVHOERTR1JBU0NRQVNDUkFXb2hrZ0VnQkNnQ0dDR1RBVUhzQVNHVUFTQ1RBU0NVQVd3aGxRRWdrZ0VnbFFGcUlaWUJJSllCS0FJRUlaY0JJSmNCTFFCbUlaZ0JRZjhCSVprQklKZ0JJSmtCY1NHYUFVSEFBQ0diQVNDYUFTQ2JBWEVobkFFQ1FDQ2NBVVVOQUNBRUtBSWNJWjBCSUFRb0FoZ2huZ0ZCN0FFaG53RWduZ0VnbndGc0lhQUJJSjBCSUtBQmFpR2hBVUhVRFNHaUFTQ2hBU0NpQVdvaG93RWdvd0VvQWdBaHBBRkJGeUdsQVNDa0FTQ2xBWFVocGdGQkF5R25BU0NtQVNDbkFYUWhxQUZCa0lZRUlha0JJS2tCSUtnQmFpR3FBU0NxQVNzREFDSHBBU0RwQWJZaDJnRWdCQ29DRkNIYkFTRGJBU0RhQVpRaDNBRWdCQ0RjQVRnQ0ZBc2dCQ29DRkNIZEFTRGRBYnNoNmdGRUFBQUFBQUFBc0VBaDZ3RWc2Z0VnNndHaUlld0JJT3dCdGlIZUFTRGVBWXNoM3dGREFBQUFUeUhnQVNEZkFTRGdBVjBocXdFZ3F3RkZJYXdCQWtBQ1FDQ3NBUTBBSU40QnFDR3RBU0N0QVNHdUFRd0JDMEdBZ0lDQWVDR3ZBU0N2QVNHdUFRc2dyZ0Voc0FFZ0JDQ3dBVFlDRENBRUtBSU1JYkVCUWY4L0liSUJJTEVCSWJNQklMSUJJYlFCSUxNQklMUUJTaUcxQVVFQkliWUJJTFVCSUxZQmNTRzNBUUpBSUxjQlJRMEFRZjgvSWJnQklBUWd1QUUyQWd3TElBUW9BZ3dodVFFZ0JDZ0NIQ0c2QVVHOERTRzdBU0M2QVNDN0FXb2h2QUVnQkNnQ0dDRzlBVUhzQVNHK0FTQzlBU0MrQVd3aHZ3RWd2QUVndndGcUljQUJJTUFCSUxrQk5nSThDdzhMMmdrQmlRRi9Jd0FoQkVFZ0lRVWdCQ0FGYXlFR0lBWWtBQ0FHSUFBMkFod2dCaUFCTmdJWUlBWWdBallDRkNBR0lBTTJBaEFnQmlnQ0hDRUhRYndOSVFnZ0J5QUlhaUVKSUFZb0FoUWhDa0hzQVNFTElBb2dDMndoRENBSklBeHFJUTBnQmlBTk5nSU1JQVlvQWd3aERpQU9MUUFBSVE5Qi93RWhFQ0FQSUJCeElSRkJCQ0VTSUJFaEV5QVNJUlFnRXlBVVJpRVZRUUVoRmlBVklCWnhJUmNDUUFKQUlCZEZEUUFnQmlnQ0VDRVlRUlFoR1NBWUlSb2dHU0ViSUJvZ0cwNGhIRUVCSVIwZ0hDQWRjU0VlQWtBZ0hrVU5BRUVVSVI4Z0JpQWZOZ0lRQ3lBR0tBSWNJU0FnQmlnQ0ZDRWhRUkFoSWlBR0lDSnFJU01nSXlFa0lDQWdJU0FrRUZRaEpTQUdJQ1UyQWdnZ0JpZ0NFQ0VtUVFBaEp5QW1JU2dnSnlFcElDZ2dLVW9oS2tFQklTc2dLaUFyY1NFc0FrQWdMRVVOQUNBR0tBSWNJUzBnQmlnQ0NDRXVJQVlvQWhnaEx5QUdLQUlVSVRBZ0JpZ0NFQ0V4SUMwZ0xpQXZJREFnTVJBZkN5QUdLQUlNSVRKQkFDRXpJRElnTXpvQUFBd0JDeUFHS0FJY0lUUWdCaWdDRkNFMVFSQWhOaUFHSURacUlUY2dOeUU0SURRZ05TQTRFRlFoT1NBR0lEazJBZ2dnQmlnQ0hDRTZJRG9vQWd3aE8wRUJJVHdnT3lBOGNTRTlBa0FDUUNBOVJRMEFJQVlvQWd3aFBpQStLQUlnSVQ4Q1FBSkFBa0FnUHcwQUlBWW9BZ3doUUNCQUtBSXdJVUVnUVVVTkFRc2dCaWdDSENGQ0lBWW9BZ2doUXlBR0tBSVlJVVFnQmlnQ0ZDRkZJQVlvQWhBaFJpQkNJRU1nUkNCRklFWVFJQXdCQ3lBR0tBSWNJVWNnQmlnQ0NDRklJQVlvQWhnaFNTQUdLQUlVSVVvZ0JpZ0NFQ0ZMSUVjZ1NDQkpJRW9nU3hBaEN3d0JDeUFHS0FJTUlVd2dUQ2dDNkFFaFRRSkFBa0FnVFEwQUlBWW9BZ3doVGlCT0tBSWdJVThDUUFKQUFrQWdUdzBBSUFZb0Fnd2hVQ0JRS0FJd0lWRWdVVVVOQVFzZ0JpZ0NIQ0ZTSUFZb0FnZ2hVeUFHS0FJWUlWUWdCaWdDRkNGVklBWW9BaEFoVmlCU0lGTWdWQ0JWSUZZUUlnd0JDeUFHS0FJY0lWY2dCaWdDQ0NGWUlBWW9BaGdoV1NBR0tBSVVJVm9nQmlnQ0VDRmJJRmNnV0NCWklGb2dXeEFqQ3d3QkN5QUdLQUlNSVZ3Z1hDZ0M2QUVoWFVFRElWNGdYU0ZmSUY0aFlDQmZJR0JHSVdGQkFTRmlJR0VnWW5FaFl3SkFBa0FnWTBVTkFDQUdLQUlNSVdRZ1pDZ0NJQ0ZsQWtBQ1FBSkFJR1VOQUNBR0tBSU1JV1lnWmlnQ01DRm5JR2RGRFFFTElBWW9BaHdoYUNBR0tBSUlJV2tnQmlnQ0dDRnFJQVlvQWhRaGF5QUdLQUlRSVd3Z2FDQnBJR29nYXlCc0VDUU1BUXNnQmlnQ0hDRnRJQVlvQWdnaGJpQUdLQUlZSVc4Z0JpZ0NGQ0Z3SUFZb0FoQWhjU0J0SUc0Z2J5QndJSEVRSlFzTUFRc2dCaWdDRENGeUlISW9BdWdCSVhOQkFpRjBJSE1oZFNCMElYWWdkU0IyUmlGM1FRRWhlQ0IzSUhoeElYa0NRQ0I1UlEwQUlBWW9BaGdoZWtFRUlYc2dlaUI3YWlGOElBWWdmRFlDR0FzZ0JpZ0NEQ0Y5SUgwb0FpQWhmZ0pBQWtBQ1FDQitEUUFnQmlnQ0RDRi9JSDhvQWpBaGdBRWdnQUZGRFFFTElBWW9BaHdoZ1FFZ0JpZ0NDQ0dDQVNBR0tBSVlJWU1CSUFZb0FoUWhoQUVnQmlnQ0VDR0ZBU0NCQVNDQ0FTQ0RBU0NFQVNDRkFSQW1EQUVMSUFZb0Fod2hoZ0VnQmlnQ0NDR0hBU0FHS0FJWUlZZ0JJQVlvQWhRaGlRRWdCaWdDRUNHS0FTQ0dBU0NIQVNDSUFTQ0pBU0NLQVJBbkN3c0xDd3RCSUNHTEFTQUdJSXNCYWlHTUFTQ01BU1FBRHd1ekV3R0tBbjhqQUNFRlFUQWhCaUFGSUFacklRY2dCeUFBTmdJc0lBY2dBVFlDS0NBSElBSTJBaVFnQnlBRE5nSWdJQWNnQkRZQ0hFRUFJUWdnQnlBSU93RUtJQWNvQWl3aENVRzhEU0VLSUFrZ0Ntb2hDeUFIS0FJZ0lReEI3QUVoRFNBTUlBMXNJUTRnQ3lBT2FpRVBJQThvQWp3aEVDQUhJQkEyQWhnZ0J5Z0NHQ0VSSUFjb0Fod2hFaUFSSUJKdElSTkJBQ0VVSUJRZ0Uyc2hGU0FISUJVMkFoQWdCeWdDRUNFV0FrQWdGZzBBUVg4aEZ5QUhJQmMyQWhBTElBY29BaXdoR0NBWUtBSU1JUmxCQVNFYUlCa2dHbkVoR3dKQUFrQWdHdzBBSUFjb0Fpd2hIRUc4RFNFZElCd2dIV29oSGlBSEtBSWdJUjlCN0FFaElDQWZJQ0JzSVNFZ0hpQWhhaUVpSUNJb0F1Z0JJU01DUUFKQUlDTU5BQ0FIS0FJc0lTUkJ2QTBoSlNBa0lDVnFJU1lnQnlnQ0lDRW5RZXdCSVNnZ0p5QW9iQ0VwSUNZZ0tXb2hLaUFxS0FKQUlTc2dCeUFyTmdJVUlBY29BaFFoTENBSEtBSWNJUzBnTENBdGJTRXVRUUFoTHlBdklDNXJJVEFnQnlBd05nSU1Ba0FEUUNBSEtBSWNJVEZCZnlFeUlERWdNbW9oTXlBSElETTJBaHdnTVVVTkFTQUhLQUlRSVRRZ0J5Z0NHQ0UxSURVZ05Hb2hOaUFISURZMkFoZ2dCeWdDR0NFM1FRQWhPQ0EzSVRrZ09DRTZJRGtnT2tnaE8wRUJJVHdnT3lBOGNTRTlBa0FnUFVVTkFFRUFJVDRnQnlBK05nSVlDeUFIS0FJTUlUOGdCeWdDRkNGQUlFQWdQMm9oUVNBSElFRTJBaFFnQnlnQ0ZDRkNRUUFoUXlCQ0lVUWdReUZGSUVRZ1JVZ2hSa0VCSVVjZ1JpQkhjU0ZJQWtBZ1NFVU5BRUVBSVVrZ0J5QkpOZ0lVQ3lBSEtBSW9JVXBCQWlGTElFb2dTMm9oVENBSElFdzJBaWdnU2k4QkFDRk5JQWNnVFRzQkNpQUhLQUlZSVU0Z0J5OEJDaUZQUVJBaFVDQlBJRkIwSVZFZ1VTQlFkU0ZTSUU0Z1Vtd2hVeUFIS0FJa0lWUkJCQ0ZWSUZRZ1ZXb2hWaUFISUZZMkFpUWdWQ2dDQUNGWElGY2dVMm9oV0NCVUlGZzJBZ0FnQnlnQ0ZDRlpJQWN2QVFvaFdrRVFJVnNnV2lCYmRDRmNJRndnVzNVaFhTQlpJRjFzSVY0Z0J5Z0NKQ0ZmUVFRaFlDQmZJR0JxSVdFZ0J5QmhOZ0lrSUY4b0FnQWhZaUJpSUY1cUlXTWdYeUJqTmdJQURBQUxBQXNNQVFzZ0J5Z0NMQ0ZrUWJ3TklXVWdaQ0JsYWlGbUlBY29BaUFoWjBIc0FTRm9JR2NnYUd3aGFTQm1JR2xxSVdvZ2FpZ0M2QUVoYTBFRElXd2dheUZ0SUd3aGJpQnRJRzVHSVc5QkFTRndJRzhnY0hFaGNRSkFBa0FnY1VVTkFBSkFBMEFnQnlnQ0hDRnlRWDhoY3lCeUlITnFJWFFnQnlCME5nSWNJSEpGRFFFZ0J5Z0NFQ0YxSUFjb0FoZ2hkaUIySUhWcUlYY2dCeUIzTmdJWUlBY29BaGdoZUVFQUlYa2dlQ0Y2SUhraGV5QjZJSHRJSVh4QkFTRjlJSHdnZlhFaGZnSkFJSDVGRFFBTUJ3c2dCeWdDS0NGL1FRSWhnQUVnZnlDQUFXb2hnUUVnQnlDQkFUWUNLQ0IvTHdFQUlZSUJJQWNnZ2dFN0FRb2dCeWdDR0NHREFTQUhMd0VLSVlRQlFSQWhoUUVnaEFFZ2hRRjBJWVlCSUlZQklJVUJkU0dIQVNDREFTQ0hBV3doaUFFZ0J5Z0NKQ0dKQVVFRUlZb0JJSWtCSUlvQmFpR0xBU0FISUlzQk5nSWtJSWtCS0FJQUlZd0JJSXdCSUlnQmFpR05BU0NKQVNDTkFUWUNBQ0FIS0FJWUlZNEJJQWN2QVFvaGp3RkJFQ0dRQVNDUEFTQ1FBWFFoa1FFZ2tRRWdrQUYxSVpJQklJNEJJSklCYkNHVEFTQUhLQUlrSVpRQlFRUWhsUUVnbEFFZ2xRRnFJWllCSUFjZ2xnRTJBaVFnbEFFb0FnQWhsd0VnbHdFZ2t3RnFJWmdCSUpRQklKZ0JOZ0lBREFBTEFBc01BUXNnQnlnQ0xDR1pBVUc4RFNHYUFTQ1pBU0NhQVdvaG13RWdCeWdDSUNHY0FVSHNBU0dkQVNDY0FTQ2RBV3dobmdFZ213RWduZ0ZxSVo4QklKOEJLQUxvQVNHZ0FVRUJJYUVCSUtBQklhSUJJS0VCSWFNQklLSUJJS01CUmlHa0FVRUJJYVVCSUtRQklLVUJjU0dtQVFKQUFrQWdwZ0ZGRFFBQ1FBTkFJQWNvQWh3aHB3RkJmeUdvQVNDbkFTQ29BV29ocVFFZ0J5Q3BBVFlDSENDbkFVVU5BU0FIS0FJUUlhb0JJQWNvQWhnaHF3RWdxd0VncWdGcUlhd0JJQWNnckFFMkFoZ2dCeWdDR0NHdEFVRUFJYTRCSUswQklhOEJJSzRCSWJBQklLOEJJTEFCU0NHeEFVRUJJYklCSUxFQklMSUJjU0d6QVFKQUlMTUJSUTBBREFnTElBY29BaWdodEFGQkFpRzFBU0MwQVNDMUFXb2h0Z0VnQnlDMkFUWUNLQ0MwQVM4QkFDRzNBU0FISUxjQk93RUtJQWNvQWhnaHVBRWdCeThCQ2lHNUFVRVFJYm9CSUxrQklMb0JkQ0c3QVNDN0FTQzZBWFVodkFFZ3VBRWd2QUZzSWIwQklBY29BaVFodmdGQkJDRy9BU0MrQVNDL0FXb2h3QUVnQnlEQUFUWUNKQ0MrQVNnQ0FDSEJBU0RCQVNDOUFXb2h3Z0VndmdFZ3dnRTJBZ0FnQnlnQ0pDSERBVUVFSWNRQklNTUJJTVFCYWlIRkFTQUhJTVVCTmdJa0RBQUxBQXNNQVFzZ0J5Z0NMQ0hHQVVHOERTSEhBU0RHQVNESEFXb2h5QUVnQnlnQ0lDSEpBVUhzQVNIS0FTREpBU0RLQVd3aHl3RWd5QUVneXdGcUljd0JJTXdCS0FMb0FTSE5BVUVDSWM0QklNMEJJYzhCSU00QklkQUJJTThCSU5BQlJpSFJBVUVCSWRJQklORUJJTklCY1NIVEFRSkFJTk1CUlEwQUFrQURRQ0FIS0FJY0lkUUJRWDhoMVFFZzFBRWcxUUZxSWRZQklBY2cxZ0UyQWh3ZzFBRkZEUUVnQnlnQ0VDSFhBU0FIS0FJWUlkZ0JJTmdCSU5jQmFpSFpBU0FISU5rQk5nSVlJQWNvQWhnaDJnRkJBQ0hiQVNEYUFTSGNBU0RiQVNIZEFTRGNBU0RkQVVnaDNnRkJBU0hmQVNEZUFTRGZBWEVoNEFFQ1FDRGdBVVVOQUF3SUN5QUhLQUlvSWVFQlFRSWg0Z0VnNFFFZzRnRnFJZU1CSUFjZzR3RTJBaWdnNFFFdkFRQWg1QUVnQnlEa0FUc0JDaUFIS0FJa0llVUJRUVFoNWdFZzVRRWc1Z0ZxSWVjQklBY2c1d0UyQWlRZ0J5Z0NHQ0hvQVNBSEx3RUtJZWtCUVJBaDZnRWc2UUVnNmdGMEllc0JJT3NCSU9vQmRTSHNBU0RvQVNEc0FXd2g3UUVnQnlnQ0pDSHVBVUVFSWU4QklPNEJJTzhCYWlId0FTQUhJUEFCTmdJa0lPNEJLQUlBSWZFQklQRUJJTzBCYWlIeUFTRHVBU0R5QVRZQ0FBd0FDd0FMQ3dzTEN3d0JDd0pBQTBBZ0J5Z0NIQ0h6QVVGL0lmUUJJUE1CSVBRQmFpSDFBU0FISVBVQk5nSWNJUE1CUlEwQklBY29BaEFoOWdFZ0J5Z0NHQ0gzQVNEM0FTRDJBV29oK0FFZ0J5RDRBVFlDR0NBSEtBSVlJZmtCUVFBaCtnRWcrUUVoK3dFZytnRWgvQUVnK3dFZy9BRklJZjBCUVFFaC9nRWcvUUVnL2dGeElmOEJBa0FnL3dGRkRRQU1Bd3NnQnlnQ0tDR0FBa0VDSVlFQ0lJQUNJSUVDYWlHQ0FpQUhJSUlDTmdJb0lJQUNMd0VBSVlNQ0lBY2dnd0k3QVFvZ0J5Z0NHQ0dFQWlBSEx3RUtJWVVDUVJBaGhnSWdoUUlnaGdKMElZY0NJSWNDSUlZQ2RTR0lBaUNFQWlDSUFtd2hpUUlnQnlnQ0pDR0tBa0VFSVlzQ0lJb0NJSXNDYWlHTUFpQUhJSXdDTmdJa0lJb0NLQUlBSVkwQ0lJMENJSWtDYWlHT0FpQ0tBaUNPQWpZQ0FBd0FDd0FMQ3c4TG1BWUJVWDhqQUNFRlFUQWhCaUFGSUFacklRY2dCeVFBSUFjZ0FEWUNMQ0FISUFFMkFpZ2dCeUFDTmdJa0lBY2dBellDSUNBSElBUTJBaHdnQnlnQ0xDRUlRYndOSVFrZ0NDQUphaUVLSUFjb0FpQWhDMEhzQVNFTUlBc2dER3doRFNBS0lBMXFJUTRnQnlBT05nSVlJQWNvQWhnaER5QVBLQUk4SVJBZ0J5QVFOZ0lVSUFjb0FoZ2hFU0FSS0FMZ0FTRVNJQWNnRWpZQ0VBSkFBa0FnRWcwQUlBY29BaXdoRXlBVEtBS0VaaUVVSUFjZ0ZEWUNFQ0FIS0FJc0lSVWdCeWdDSUNFV0lCVWdGaEFvSVJjQ1FDQVhSUTBBREFJTElBY29BaGdoR0NBWUtBSThJUmtnQnlBWk5nSVVDd05BSUFjb0Fod2hHaUFhUlEwQklBY29BaEFoR3lBSEtBSWNJUndnR3lFZElCd2hIaUFkSUI1SUlSOUJBU0VnSUI4Z0lIRWhJUUpBQWtBZ0lVVU5BQ0FIS0FJUUlTSWdCeWdDSENFaklDTWdJbXNoSkNBSElDUTJBaHdDUUFOQUlBY29BaEFoSlVGL0lTWWdKU0FtYWlFbklBY2dKellDRUNBbFJRMEJJQWNvQWlnaEtFRUNJU2tnS0NBcGFpRXFJQWNnS2pZQ0tDQW9Md0VBSVNzZ0J5QXJPd0VPSUFjb0FoUWhMQ0FITHdFT0lTMUJFQ0V1SUMwZ0xuUWhMeUF2SUM1MUlUQWdMQ0F3YkNFeElBY29BaVFoTWtFRUlUTWdNaUF6YWlFMElBY2dORFlDSkNBeUtBSUFJVFVnTlNBeGFpRTJJRElnTmpZQ0FBd0FDd0FMSUFjb0Fpd2hOeUEzS0FLRVppRTRJQWNnT0RZQ0VDQUhLQUlzSVRrZ0J5Z0NJQ0U2SURrZ09oQW9JVHNDUUNBN1JRMEFEQVFMSUFjb0FoZ2hQQ0E4S0FJOElUMGdCeUE5TmdJVURBRUxJQWNvQWhBaFBpQUhLQUljSVQ4Z1BpQS9heUZBSUFjb0FoZ2hRU0JCSUVBMkF1QUJBa0FEUUNBSEtBSWNJVUpCZnlGRElFSWdRMm9oUkNBSElFUTJBaHdnUWtVTkFTQUhLQUlvSVVWQkFpRkdJRVVnUm1vaFJ5QUhJRWMyQWlnZ1JTOEJBQ0ZJSUFjZ1NEc0JEaUFIS0FJVUlVa2dCeThCRGlGS1FSQWhTeUJLSUV0MElVd2dUQ0JMZFNGTklFa2dUV3doVGlBSEtBSWtJVTlCQkNGUUlFOGdVR29oVVNBSElGRTJBaVFnVHlnQ0FDRlNJRklnVG1vaFV5QlBJRk0yQWdBTUFBc0FDd3dDQ3d3QUN3QUxRVEFoVkNBSElGUnFJVlVnVlNRQUR3dVZBZ0VkZnlNQUlRVkJJQ0VHSUFVZ0Jtc2hCeUFISUFBMkFod2dCeUFCTmdJWUlBY2dBallDRkNBSElBTTJBaEFnQnlBRU5nSU1JQWNvQWh3aENFRzhEU0VKSUFnZ0NXb2hDaUFIS0FJUUlRdEI3QUVoRENBTElBeHNJUTBnQ2lBTmFpRU9JQTRvQWp3aER5QUhJQTgyQWdnQ1FBTkFJQWNvQWd3aEVFRi9JUkVnRUNBUmFpRVNJQWNnRWpZQ0RDQVFSUTBCSUFjb0FoZ2hFMEVDSVJRZ0V5QVVhaUVWSUFjZ0ZUWUNHQ0FUTHdFQUlSWWdCeUFXT3dFR0lBY29BZ2doRnlBSEx3RUdJUmhCRUNFWklCZ2dHWFFoR2lBYUlCbDFJUnNnRnlBYmJDRWNJQWNvQWhRaEhVRUVJUjRnSFNBZWFpRWZJQWNnSHpZQ0ZDQWRLQUlBSVNBZ0lDQWNhaUVoSUIwZ0lUWUNBQXdBQ3dBTER3dUJDQUZ0ZnlNQUlRVkJNQ0VHSUFVZ0Jtc2hCeUFISkFBZ0J5QUFOZ0lzSUFjZ0FUWUNLQ0FISUFJMkFpUWdCeUFETmdJZ0lBY2dCRFlDSENBSEtBSXNJUWhCdkEwaENTQUlJQWxxSVFvZ0J5Z0NJQ0VMUWV3QklRd2dDeUFNYkNFTklBb2dEV29oRGlBSElBNDJBaGdnQnlnQ0dDRVBJQThvQWp3aEVDQUhJQkEyQWhRZ0J5Z0NHQ0VSSUJFb0FrQWhFaUFISUJJMkFoQWdCeWdDR0NFVElCTW9BdUFCSVJRZ0J5QVVOZ0lNQWtBQ1FDQVVEUUFnQnlnQ0xDRVZJQlVvQW9SbUlSWWdCeUFXTmdJTUlBY29BaXdoRnlBSEtBSWdJUmdnRnlBWUVDZ2hHUUpBSUJsRkRRQU1BZ3NnQnlnQ0dDRWFJQm9vQWp3aEd5QUhJQnMyQWhRZ0J5Z0NHQ0VjSUJ3b0FrQWhIU0FISUIwMkFoQUxBMEFnQnlnQ0hDRWVJQjVGRFFFZ0J5Z0NEQ0VmSUFjb0Fod2hJQ0FmSVNFZ0lDRWlJQ0VnSWtnaEkwRUJJU1FnSXlBa2NTRWxBa0FDUUNBbFJRMEFJQWNvQWd3aEppQUhLQUljSVNjZ0p5QW1heUVvSUFjZ0tEWUNIQUpBQTBBZ0J5Z0NEQ0VwUVg4aEtpQXBJQ3BxSVNzZ0J5QXJOZ0lNSUNsRkRRRWdCeWdDS0NFc1FRSWhMU0FzSUMxcUlTNGdCeUF1TmdJb0lDd3ZBUUFoTHlBSElDODdBUW9nQnlnQ0ZDRXdJQWN2QVFvaE1VRVFJVElnTVNBeWRDRXpJRE1nTW5VaE5DQXdJRFJzSVRVZ0J5Z0NKQ0UyUVFRaE55QTJJRGRxSVRnZ0J5QTROZ0lrSURZb0FnQWhPU0E1SURWcUlUb2dOaUE2TmdJQUlBY29BaEFoT3lBSEx3RUtJVHhCRUNFOUlEd2dQWFFoUGlBK0lEMTFJVDhnT3lBL2JDRkFJQWNvQWlRaFFVRUVJVUlnUVNCQ2FpRkRJQWNnUXpZQ0pDQkJLQUlBSVVRZ1JDQkFhaUZGSUVFZ1JUWUNBQXdBQ3dBTElBY29BaXdoUmlCR0tBS0VaaUZISUFjZ1J6WUNEQ0FIS0FJc0lVZ2dCeWdDSUNGSklFZ2dTUkFvSVVvQ1FDQktSUTBBREFRTElBY29BaGdoU3lCTEtBSThJVXdnQnlCTU5nSVVJQWNvQWhnaFRTQk5LQUpBSVU0Z0J5Qk9OZ0lRREFFTElBY29BZ3doVHlBSEtBSWNJVkFnVHlCUWF5RlJJQWNvQWhnaFVpQlNJRkUyQXVBQkFrQURRQ0FIS0FJY0lWTkJmeUZVSUZNZ1ZHb2hWU0FISUZVMkFod2dVMFVOQVNBSEtBSW9JVlpCQWlGWElGWWdWMm9oV0NBSElGZzJBaWdnVmk4QkFDRlpJQWNnV1RzQkNpQUhLQUlVSVZvZ0J5OEJDaUZiUVJBaFhDQmJJRngwSVYwZ1hTQmNkU0ZlSUZvZ1htd2hYeUFIS0FJa0lXQkJCQ0ZoSUdBZ1lXb2hZaUFISUdJMkFpUWdZQ2dDQUNGaklHTWdYMm9oWkNCZ0lHUTJBZ0FnQnlnQ0VDRmxJQWN2QVFvaFprRVFJV2NnWmlCbmRDRm9JR2dnWjNVaGFTQmxJR2xzSVdvZ0J5Z0NKQ0ZyUVFRaGJDQnJJR3hxSVcwZ0J5QnROZ0lrSUdzb0FnQWhiaUJ1SUdwcUlXOGdheUJ2TmdJQURBQUxBQXNNQWdzTUFBc0FDMEV3SVhBZ0J5QndhaUZ4SUhFa0FBOExwUU1CTUg4akFDRUZRU0FoQmlBRklBWnJJUWNnQnlBQU5nSWNJQWNnQVRZQ0dDQUhJQUkyQWhRZ0J5QUROZ0lRSUFjZ0JEWUNEQ0FIS0FJY0lRaEJ2QTBoQ1NBSUlBbHFJUW9nQnlnQ0VDRUxRZXdCSVF3Z0N5QU1iQ0VOSUFvZ0RXb2hEaUFPS0FJOElROGdCeUFQTmdJSUlBY29BaHdoRUVHOERTRVJJQkFnRVdvaEVpQUhLQUlRSVJOQjdBRWhGQ0FUSUJSc0lSVWdFaUFWYWlFV0lCWW9Ba0FoRnlBSElCYzJBZ1FDUUFOQUlBY29BZ3doR0VGL0lSa2dHQ0FaYWlFYUlBY2dHallDRENBWVJRMEJJQWNvQWhnaEcwRUNJUndnR3lBY2FpRWRJQWNnSFRZQ0dDQWJMd0VBSVI0Z0J5QWVPd0VDSUFjb0FnZ2hIeUFITHdFQ0lTQkJFQ0VoSUNBZ0lYUWhJaUFpSUNGMUlTTWdIeUFqYkNFa0lBY29BaFFoSlVFRUlTWWdKU0FtYWlFbklBY2dKellDRkNBbEtBSUFJU2dnS0NBa2FpRXBJQ1VnS1RZQ0FDQUhLQUlFSVNvZ0J5OEJBaUVyUVJBaExDQXJJQ3gwSVMwZ0xTQXNkU0V1SUNvZ0xtd2hMeUFIS0FJVUlUQkJCQ0V4SURBZ01Xb2hNaUFISURJMkFoUWdNQ2dDQUNFeklETWdMMm9oTkNBd0lEUTJBZ0FNQUFzQUN3OEx3Z2NCWjM4akFDRUZRVEFoQmlBRklBWnJJUWNnQnlRQUlBY2dBRFlDTENBSElBRTJBaWdnQnlBQ05nSWtJQWNnQXpZQ0lDQUhJQVEyQWh3Z0J5Z0NMQ0VJUWJ3TklRa2dDQ0FKYWlFS0lBY29BaUFoQzBIc0FTRU1JQXNnREd3aERTQUtJQTFxSVE0Z0J5QU9OZ0lZSUFjb0FoZ2hEeUFQS0FJOElSQWdCeUFRTmdJVUlBY29BaGdoRVNBUktBTGdBU0VTSUFjZ0VqWUNFQUpBQWtBZ0VnMEFJQWNvQWl3aEV5QVRLQUtFWmlFVUlBY2dGRFlDRUNBSEtBSXNJUlVnQnlnQ0lDRVdJQlVnRmhBb0lSY0NRQ0FYUlEwQURBSUxJQWNvQWhnaEdDQVlLQUk4SVJrZ0J5QVpOZ0lVQ3dOQUlBY29BaHdoR2lBYVJRMEJJQWNvQWhBaEd5QUhLQUljSVJ3Z0d5RWRJQndoSGlBZElCNUlJUjlCQVNFZ0lCOGdJSEVoSVFKQUFrQWdJVVVOQUNBSEtBSVFJU0lnQnlnQ0hDRWpJQ01nSW1zaEpDQUhJQ1EyQWh3Q1FBTkFJQWNvQWhBaEpVRi9JU1lnSlNBbWFpRW5JQWNnSnpZQ0VDQWxSUTBCSUFjb0FpZ2hLRUVDSVNrZ0tDQXBhaUVxSUFjZ0tqWUNLQ0FvTHdFQUlTc2dCeUFyT3dFT0lBY29BaFFoTENBSEx3RU9JUzFCRUNFdUlDMGdMblFoTHlBdklDNTFJVEFnTENBd2JDRXhJQWNvQWlRaE1rRUVJVE1nTWlBemFpRTBJQWNnTkRZQ0pDQXlLQUlBSVRVZ05TQXhhaUUySURJZ05qWUNBQ0FIS0FJVUlUY2dCeThCRGlFNFFSQWhPU0E0SURsMElUb2dPaUE1ZFNFN0lEY2dPMndoUENBSEtBSWtJVDFCQkNFK0lEMGdQbW9oUHlBSElEODJBaVFnUFNnQ0FDRkFJRUFnUEdvaFFTQTlJRUUyQWdBTUFBc0FDeUFIS0FJc0lVSWdRaWdDaEdZaFF5QUhJRU0yQWhBZ0J5Z0NMQ0ZFSUFjb0FpQWhSU0JFSUVVUUtDRkdBa0FnUmtVTkFBd0VDeUFIS0FJWUlVY2dSeWdDUENGSUlBY2dTRFlDRkF3QkN5QUhLQUlRSVVrZ0J5Z0NIQ0ZLSUVrZ1Ntc2hTeUFIS0FJWUlVd2dUQ0JMTmdMZ0FRSkFBMEFnQnlnQ0hDRk5RWDhoVGlCTklFNXFJVThnQnlCUE5nSWNJRTFGRFFFZ0J5Z0NLQ0ZRUVFJaFVTQlFJRkZxSVZJZ0J5QlNOZ0lvSUZBdkFRQWhVeUFISUZNN0FRNGdCeWdDRkNGVUlBY3ZBUTRoVlVFUUlWWWdWU0JXZENGWElGY2dWblVoV0NCVUlGaHNJVmtnQnlnQ0pDRmFRUVFoV3lCYUlGdHFJVndnQnlCY05nSWtJRm9vQWdBaFhTQmRJRmxxSVY0Z1dpQmVOZ0lBSUFjb0FoUWhYeUFITHdFT0lXQkJFQ0ZoSUdBZ1lYUWhZaUJpSUdGMUlXTWdYeUJqYkNGa0lBY29BaVFoWlVFRUlXWWdaU0JtYWlGbklBY2daellDSkNCbEtBSUFJV2dnYUNCa2FpRnBJR1VnYVRZQ0FBd0FDd0FMREFJTERBQUxBQXRCTUNGcUlBY2dhbW9oYXlCckpBQVBDK29DQVNoL0l3QWhCVUVnSVFZZ0JTQUdheUVISUFjZ0FEWUNIQ0FISUFFMkFoZ2dCeUFDTmdJVUlBY2dBellDRUNBSElBUTJBZ3dnQnlnQ0hDRUlRYndOSVFrZ0NDQUphaUVLSUFjb0FoQWhDMEhzQVNFTUlBc2dER3doRFNBS0lBMXFJUTRnRGlnQ1BDRVBJQWNnRHpZQ0NBSkFBMEFnQnlnQ0RDRVFRWDhoRVNBUUlCRnFJUklnQnlBU05nSU1JQkJGRFFFZ0J5Z0NHQ0VUUVFJaEZDQVRJQlJxSVJVZ0J5QVZOZ0lZSUJNdkFRQWhGaUFISUJZN0FRWWdCeWdDQ0NFWElBY3ZBUVloR0VFUUlSa2dHQ0FaZENFYUlCb2dHWFVoR3lBWElCdHNJUndnQnlnQ0ZDRWRRUVFoSGlBZElCNXFJUjhnQnlBZk5nSVVJQjBvQWdBaElDQWdJQnhxSVNFZ0hTQWhOZ0lBSUFjb0FnZ2hJaUFITHdFR0lTTkJFQ0VrSUNNZ0pIUWhKU0FsSUNSMUlTWWdJaUFtYkNFbklBY29BaFFoS0VFRUlTa2dLQ0FwYWlFcUlBY2dLallDRkNBb0tBSUFJU3NnS3lBbmFpRXNJQ2dnTERZQ0FBd0FDd0FMRHd2S0JnRlhmeU1BSVFWQk1DRUdJQVVnQm1zaEJ5QUhKQUFnQnlBQU5nSXNJQWNnQVRZQ0tDQUhJQUkyQWlRZ0J5QUROZ0lnSUFjZ0JEWUNIQ0FIS0FJc0lRaEJ2QTBoQ1NBSUlBbHFJUW9nQnlnQ0lDRUxRZXdCSVF3Z0N5QU1iQ0VOSUFvZ0RXb2hEaUFISUE0MkFoZ2dCeWdDR0NFUElBOG9BandoRUNBSElCQTJBaFFnQnlnQ0dDRVJJQkVvQXVBQklSSWdCeUFTTmdJUUFrQUNRQ0FTRFFBZ0J5Z0NMQ0VUSUJNb0FvUm1JUlFnQnlBVU5nSVFJQWNvQWl3aEZTQUhLQUlnSVJZZ0ZTQVdFQ2doRndKQUlCZEZEUUFNQWdzZ0J5Z0NHQ0VZSUJnb0Fqd2hHU0FISUJrMkFoUUxBMEFnQnlnQ0hDRWFJQnBGRFFFZ0J5Z0NFQ0ViSUFjb0Fod2hIQ0FiSVIwZ0hDRWVJQjBnSGtnaEgwRUJJU0FnSHlBZ2NTRWhBa0FDUUNBaFJRMEFJQWNvQWhBaElpQUhLQUljSVNNZ0l5QWlheUVrSUFjZ0pEWUNIQUpBQTBBZ0J5Z0NFQ0VsUVg4aEppQWxJQ1pxSVNjZ0J5QW5OZ0lRSUNWRkRRRWdCeWdDS0NFb1FRSWhLU0FvSUNscUlTb2dCeUFxTmdJb0lDZ3ZBUUFoS3lBSElDczdBUTRnQnlnQ0ZDRXNJQWN2QVE0aExVRVFJUzRnTFNBdWRDRXZJQzhnTG5VaE1DQXNJREJzSVRFZ0J5Z0NKQ0V5UVFRaE15QXlJRE5xSVRRZ0J5QTBOZ0lrSURJb0FnQWhOU0ExSURGcUlUWWdNaUEyTmdJQUlBY29BaVFoTjBFRUlUZ2dOeUE0YWlFNUlBY2dPVFlDSkF3QUN3QUxJQWNvQWl3aE9pQTZLQUtFWmlFN0lBY2dPellDRUNBSEtBSXNJVHdnQnlnQ0lDRTlJRHdnUFJBb0lUNENRQ0ErUlEwQURBUUxJQWNvQWhnaFB5QS9LQUk4SVVBZ0J5QkFOZ0lVREFFTElBY29BaEFoUVNBSEtBSWNJVUlnUVNCQ2F5RkRJQWNvQWhnaFJDQkVJRU0yQXVBQkFrQURRQ0FIS0FJY0lVVkJmeUZHSUVVZ1Jtb2hSeUFISUVjMkFod2dSVVVOQVNBSEtBSW9JVWhCQWlGSklFZ2dTV29oU2lBSElFbzJBaWdnU0M4QkFDRkxJQWNnU3pzQkRpQUhLQUlVSVV3Z0J5OEJEaUZOUVJBaFRpQk5JRTUwSVU4Z1R5Qk9kU0ZRSUV3Z1VHd2hVU0FIS0FJa0lWSkJCQ0ZUSUZJZ1Uyb2hWQ0FISUZRMkFpUWdVaWdDQUNGVklGVWdVV29oVmlCU0lGWTJBZ0FnQnlnQ0pDRlhRUVFoV0NCWElGaHFJVmtnQnlCWk5nSWtEQUFMQUFzTUFnc01BQXNBQzBFd0lWb2dCeUJhYWlGYklGc2tBQThMcmdJQklIOGpBQ0VGUVNBaEJpQUZJQVpySVFjZ0J5QUFOZ0ljSUFjZ0FUWUNHQ0FISUFJMkFoUWdCeUFETmdJUUlBY2dCRFlDRENBSEtBSWNJUWhCdkEwaENTQUlJQWxxSVFvZ0J5Z0NFQ0VMUWV3QklRd2dDeUFNYkNFTklBb2dEV29oRGlBT0tBSThJUThnQnlBUE5nSUlBa0FEUUNBSEtBSU1JUkJCZnlFUklCQWdFV29oRWlBSElCSTJBZ3dnRUVVTkFTQUhLQUlZSVJOQkFpRVVJQk1nRkdvaEZTQUhJQlUyQWhnZ0V5OEJBQ0VXSUFjZ0Zqc0JCaUFIS0FJSUlSY2dCeThCQmlFWVFSQWhHU0FZSUJsMElSb2dHaUFaZFNFYklCY2dHMndoSENBSEtBSVVJUjFCQkNFZUlCMGdIbW9oSHlBSElCODJBaFFnSFNnQ0FDRWdJQ0FnSEdvaElTQWRJQ0UyQWdBZ0J5Z0NGQ0VpUVFRaEl5QWlJQ05xSVNRZ0J5QWtOZ0lVREFBTEFBc1BDNVFDQVI5L0l3QWhBa0VRSVFNZ0FpQURheUVFSUFRa0FDQUVJQUEyQWdnZ0JDQUJOZ0lFSUFRb0FnZ2hCVUc4RFNFR0lBVWdCbW9oQnlBRUtBSUVJUWhCN0FFaENTQUlJQWxzSVFvZ0J5QUthaUVMSUFzb0FpQWhEQUpBQWtBZ0RFVU5BQ0FFS0FJSUlRMGdCQ2dDQkNFT0lBMGdEaEFwSVE4Z0QwVU5BRUVCSVJBZ0JDQVFOZ0lNREFFTElBUW9BZ2doRVVHOERTRVNJQkVnRW1vaEV5QUVLQUlFSVJSQjdBRWhGU0FVSUJWc0lSWWdFeUFXYWlFWElCY29BakFoR0FKQUlCaEZEUUFnQkNnQ0NDRVpJQVFvQWdRaEdpQVpJQm9RS2dzZ0JDZ0NDQ0ViSUFRb0FnUWhIQ0FiSUJ3UUhVRUFJUjBnQkNBZE5nSU1DeUFFS0FJTUlSNUJFQ0VmSUFRZ0gyb2hJQ0FnSkFBZ0hnOExtUVlCY1g4akFDRUNRUkFoQXlBQ0lBTnJJUVFnQkNRQUlBUWdBRFlDQ0NBRUlBRTJBZ1FnQkNnQ0NDRUZRYndOSVFZZ0JTQUdhaUVISUFRb0FnUWhDRUhzQVNFSklBZ2dDV3doQ2lBSElBcHFJUXNnQ3lnQ0lDRU1JQVFvQWdnaERVRzhEU0VPSUEwZ0Rtb2hEeUFFS0FJRUlSQkI3QUVoRVNBUUlCRnNJUklnRHlBU2FpRVRJQk1vQWhnaEZDQVVJQXhxSVJVZ0V5QVZOZ0lZSUFRb0FnZ2hGa0c4RFNFWElCWWdGMm9oR0NBRUtBSUVJUmxCN0FFaEdpQVpJQnBzSVJzZ0dDQWJhaUVjSUJ3b0FpQWhIVUVBSVI0Z0hTRWZJQjRoSUNBZklDQklJU0ZCQVNFaUlDRWdJbkVoSXdKQUFrQUNRQUpBSUNORkRRQWdCQ2dDQ0NFa1Fid05JU1VnSkNBbGFpRW1JQVFvQWdRaEowSHNBU0VvSUNjZ0tHd2hLU0FtSUNscUlTb2dLaWdDR0NFcklBUW9BZ2doTEVHOERTRXRJQ3dnTFdvaExpQUVLQUlFSVM5QjdBRWhNQ0F2SURCc0lURWdMaUF4YWlFeUlESW9BaHdoTXlBcklUUWdNeUUxSURRZ05Vd2hOa0VCSVRjZ05pQTNjU0U0SURnTkFRc2dCQ2dDQ0NFNVFid05JVG9nT1NBNmFpRTdJQVFvQWdRaFBFSHNBU0U5SUR3Z1BXd2hQaUE3SUQ1cUlUOGdQeWdDSUNGQVFRQWhRU0JBSVVJZ1FTRkRJRUlnUTBvaFJFRUJJVVVnUkNCRmNTRkdJRVpGRFFFZ0JDZ0NDQ0ZIUWJ3TklVZ2dSeUJJYWlGSklBUW9BZ1FoU2tIc0FTRkxJRW9nUzJ3aFRDQkpJRXhxSVUwZ1RTZ0NHQ0ZPSUFRb0FnZ2hUMEc4RFNGUUlFOGdVR29oVVNBRUtBSUVJVkpCN0FFaFV5QlNJRk5zSVZRZ1VTQlVhaUZWSUZVb0Fod2hWaUJPSVZjZ1ZpRllJRmNnV0U0aFdVRUJJVm9nV1NCYWNTRmJJRnRGRFFFTElBUW9BZ2doWEVHOERTRmRJRndnWFdvaFhpQUVLQUlFSVY5QjdBRWhZQ0JmSUdCc0lXRWdYaUJoYWlGaUlHSW9BaHdoWXlBRUtBSUlJV1JCdkEwaFpTQmtJR1ZxSVdZZ0JDZ0NCQ0ZuUWV3QklXZ2daeUJvYkNGcElHWWdhV29oYWlCcUlHTTJBaGdnQkNnQ0NDRnJJQVFvQWdRaGJDQnJJR3dRSENGdEFrQWdiVVVOQUVFQklXNGdCQ0J1TmdJTURBSUxDMEVBSVc4Z0JDQnZOZ0lNQ3lBRUtBSU1JWEJCRUNGeElBUWdjV29oY2lCeUpBQWdjQThMendjRWNYOEtmQVorQW4wakFDRUNRVEFoQXlBQ0lBTnJJUVFnQkNRQUlBUWdBRFlDTENBRUlBRTJBaWdnQkNnQ0xDRUZRYndOSVFZZ0JTQUdhaUVISUFRb0FpZ2hDRUhzQVNFSklBZ2dDV3doQ2lBSElBcHFJUXNnQ3lnQ0JDRU1JQXd0QUdRaERVSC9BU0VPSUEwZ0RuRWhEMEVISVJBZ0R5QVFkQ0VSSUFRZ0VUWUNKQ0FFS0FJc0lSSkJ2QTBoRXlBU0lCTnFJUlFnQkNnQ0tDRVZRZXdCSVJZZ0ZTQVdiQ0VYSUJRZ0Yyb2hHQ0FZS0FJa0lSa0NRQ0FaUlEwQUlBUW9BaXdoR2tHOERTRWJJQm9nRzJvaEhDQUVLQUlvSVIxQjdBRWhIaUFkSUI1c0lSOGdIQ0FmYWlFZ0lDQW9BaVFoSVNBRUtBSXNJU0pCdkEwaEl5QWlJQ05xSVNRZ0JDZ0NLQ0VsUWV3QklTWWdKU0FtYkNFbklDUWdKMm9oS0NBb0tBSW9JU2tnS1NBaGFpRXFJQ2dnS2pZQ0tDQUVLQUlzSVN0QnZBMGhMQ0FySUN4cUlTMGdCQ2dDS0NFdVFld0JJUzhnTGlBdmJDRXdJQzBnTUdvaE1TQXhLQUlvSVRKQmdJQUVJVE1nTWlFMElETWhOU0EwSURWT0lUWkJBU0UzSURZZ04zRWhPQUpBQWtBZ09FVU5BQ0FFS0FJc0lUbEJ2QTBoT2lBNUlEcHFJVHNnQkNnQ0tDRThRZXdCSVQwZ1BDQTliQ0UrSURzZ1Btb2hQMEVBSVVBZ1B5QkFOZ0lrREFFTElBUW9BaXdoUVVHOERTRkNJRUVnUW1vaFF5QUVLQUlvSVVSQjdBRWhSU0JFSUVWc0lVWWdReUJHYWlGSElFY29BaWdoU0NBRUtBSWtJVWtnU1NCSWJDRktJQVFnU2pZQ0pDQUVLQUlrSVV0QkVDRk1JRXNnVEhVaFRTQUVJRTAyQWlRTEN5QUVLQUlzSVU0Z0JDZ0NLQ0ZQUWV3QklWQWdUeUJRYkNGUklFNGdVV29oVWtIc0RTRlRJRklnVTJvaFZDQlVLQUlBSVZWQjZBMGhWaUJTSUZacUlWY2dWeWdDQUNGWUlGZ2dWV29oV1NCWElGazJBZ0FnQkNnQ0xDRmFJQVFvQWlnaFd5QmJJRkJzSVZ3Z1dpQmNhaUZkSUYwZ1Ztb2hYaUJlS0FJQUlWOUJCU0ZnSUY4Z1lIVWhZU0JodHlGelJCZ3RSRlQ3SVhrL0lYUWdjeUIwb2lGMUlIVVFuQUVoZGtRQUFBQUFBQUR3UHlGM0lIWWdkNkFoZUNBRUtBSWtJV0lnWXJjaGVTQjRJSG1pSVhwQkVDRmpJQVFnWTJvaFpDQmtJSG9RdEFGQkNDRmxRUkFoWmlBRUlHWnFJV2NnWnlCbGFpRm9JR2dwQXdBaGZTQUVLUU1RSVg1Q2dJQ0FnSUNBZ1BlL2Z5Ri9RZ0FoZ0FFZ0JDQitJSDBnZ0FFZ2Z4QzRBU0FFSUdWcUlXa2dhU2tEQUNHQkFTQUVLUU1BSVlJQklJSUJJSUVCRUxrQklZTUJJSU1CdXlGN0lIc2dkNkFoZkNCOHRpR0VBU0FFS0FJc0lXcEJ2QTBoYXlCcUlHdHFJV3dnQkNnQ0tDRnRRZXdCSVc0Z2JTQnViQ0Z2SUd3Z2Iyb2hjQ0J3SUlRQk9BSk1RVEFoY1NBRUlIRnFJWElnY2lRQUR3dXdBZ0VoZnlNQUlRTkJJQ0VFSUFNZ0JHc2hCU0FGSUFBMkFod2dCU0FCTmdJWUlBVWdBallDRkNBRktBSWNJUVlnQlNBR05nSVFBa0FEUUNBRktBSVVJUWRCZnlFSUlBY2dDR29oQ1NBRklBazJBaFFnQjBVTkFTQUZLQUlZSVFwQkJDRUxJQW9nQzJvaERDQUZJQXcyQWhnZ0NpZ0NBQ0VOUVJVaERpQU5JQTUxSVE4Z0JTQVBOZ0lNSUFVb0Fnd2hFRUgvQUNFUklCQWhFaUFSSVJNZ0VpQVRTaUVVUVFFaEZTQVVJQlZ4SVJZQ1FBSkFJQlpGRFFCQi93QWhGeUFGSUJjMkFnd01BUXNnQlNnQ0RDRVlRWUIvSVJrZ0dDRWFJQmtoR3lBYUlCdElJUnhCQVNFZElCd2dIWEVoSGdKQUlCNUZEUUJCZ0g4aEh5QUZJQjgyQWd3TEN5QUZLQUlNSVNBZ0JTZ0NFQ0VoUVFFaElpQWhJQ0pxSVNNZ0JTQWpOZ0lRSUNFZ0lEb0FBQXdBQ3dBTER3dklBZ0VsZnlNQUlRTkJJQ0VFSUFNZ0JHc2hCU0FGSUFBMkFod2dCU0FCTmdJWUlBVWdBallDRkNBRktBSWNJUVlnQlNBR05nSVFBa0FEUUNBRktBSVVJUWRCZnlFSUlBY2dDR29oQ1NBRklBazJBaFFnQjBVTkFTQUZLQUlZSVFwQkJDRUxJQW9nQzJvaERDQUZJQXcyQWhnZ0NpZ0NBQ0VOUVJVaERpQU5JQTUxSVE4Z0JTQVBOZ0lNSUFVb0Fnd2hFRUgvQUNFUklCQWhFaUFSSVJNZ0VpQVRTaUVVUVFFaEZTQVVJQlZ4SVJZQ1FBSkFJQlpGRFFCQi93QWhGeUFGSUJjMkFnd01BUXNnQlNnQ0RDRVlRWUIvSVJrZ0dDRWFJQmtoR3lBYUlCdElJUnhCQVNFZElCd2dIWEVoSGdKQUlCNUZEUUJCZ0g4aEh5QUZJQjgyQWd3TEN5QUZLQUlNSVNCQi93RWhJU0FnSUNGeElTSkJnQUVoSXlBaUlDTnpJU1FnQlNnQ0VDRWxRUUVoSmlBbElDWnFJU2NnQlNBbk5nSVFJQ1VnSkRvQUFBd0FDd0FMRHd1MEFnRWhmeU1BSVFOQklDRUVJQU1nQkdzaEJTQUZJQUEyQWh3Z0JTQUJOZ0lZSUFVZ0FqWUNGQ0FGS0FJY0lRWWdCU0FHTmdJUUFrQURRQ0FGS0FJVUlRZEJmeUVJSUFjZ0NHb2hDU0FGSUFrMkFoUWdCMFVOQVNBRktBSVlJUXBCQkNFTElBb2dDMm9oRENBRklBdzJBaGdnQ2lnQ0FDRU5RUTBoRGlBTklBNTFJUThnQlNBUE5nSU1JQVVvQWd3aEVFSC8vd0VoRVNBUUlSSWdFU0VUSUJJZ0Uwb2hGRUVCSVJVZ0ZDQVZjU0VXQWtBQ1FDQVdSUTBBUWYvL0FTRVhJQVVnRnpZQ0RBd0JDeUFGS0FJTUlSaEJnSUIrSVJrZ0dDRWFJQmtoR3lBYUlCdElJUnhCQVNFZElCd2dIWEVoSGdKQUlCNUZEUUJCZ0lCK0lSOGdCU0FmTmdJTUN3c2dCU2dDRENFZ0lBVW9BaEFoSVVFQ0lTSWdJU0FpYWlFaklBVWdJellDRUNBaElDQTdBUUFNQUFzQUN3OEx6Z0lCSlg4akFDRURRU0FoQkNBRElBUnJJUVVnQlNBQU5nSWNJQVVnQVRZQ0dDQUZJQUkyQWhRZ0JTZ0NIQ0VHSUFVZ0JqWUNFQUpBQTBBZ0JTZ0NGQ0VIUVg4aENDQUhJQWhxSVFrZ0JTQUpOZ0lVSUFkRkRRRWdCU2dDR0NFS1FRUWhDeUFLSUF0cUlRd2dCU0FNTmdJWUlBb29BZ0FoRFVFTklRNGdEU0FPZFNFUElBVWdEellDRENBRktBSU1JUkJCLy84QklSRWdFQ0VTSUJFaEV5QVNJQk5LSVJSQkFTRVZJQlFnRlhFaEZnSkFBa0FnRmtVTkFFSC8vd0VoRnlBRklCYzJBZ3dNQVFzZ0JTZ0NEQ0VZUVlDQWZpRVpJQmdoR2lBWklSc2dHaUFiU0NFY1FRRWhIU0FjSUIxeElSNENRQ0FlUlEwQVFZQ0FmaUVmSUFVZ0h6WUNEQXNMSUFVb0Fnd2hJRUgvL3dNaElTQWdJQ0Z4SVNKQmdJQUNJU01nSWlBamN5RWtJQVVvQWhBaEpVRUNJU1lnSlNBbWFpRW5JQVVnSnpZQ0VDQWxJQ1E3QVFBTUFBc0FDdzhMbEFNQk1YOGpBQ0VEUVNBaEJDQURJQVJySVFVZ0JTQUFOZ0ljSUFVZ0FUWUNHQ0FGSUFJMkFoUWdCU2dDSENFR0lBVWdCallDRUFKQUEwQWdCU2dDRkNFSFFYOGhDQ0FISUFocUlRa2dCU0FKTmdJVUlBZEZEUUVnQlNnQ0dDRUtRUVFoQ3lBS0lBdHFJUXdnQlNBTU5nSVlJQW9vQWdBaERVRU5JUTRnRFNBT2RTRVBJQVVnRHpZQ0RDQUZLQUlNSVJCQi8vOEJJUkVnRUNFU0lCRWhFeUFTSUJOS0lSUkJBU0VWSUJRZ0ZYRWhGZ0pBQWtBZ0ZrVU5BRUgvL3dFaEZ5QUZJQmMyQWd3TUFRc2dCU2dDRENFWVFZQ0FmaUVaSUJnaEdpQVpJUnNnR2lBYlNDRWNRUUVoSFNBY0lCMXhJUjRDUUNBZVJRMEFRWUNBZmlFZklBVWdIellDREFzTElBVW9BZ3doSUVFUUlTRWdJQ0FoZENFaUlDSWdJWFVoSTBIL0FTRWtJQ01nSkhFaEpVRUlJU1lnSlNBbWRDRW5JQVVvQWd3aEtFRVFJU2tnS0NBcGRDRXFJQ29nS1hVaEswRUlJU3dnS3lBc2RTRXRRZjhCSVM0Z0xTQXVjU0V2SUNjZ0wzSWhNQ0FGS0FJUUlURkJBaUV5SURFZ01tb2hNeUFGSURNMkFoQWdNU0F3T3dFQURBQUxBQXNQQzZRREFUTi9Jd0FoQTBFZ0lRUWdBeUFFYXlFRklBVWdBRFlDSENBRklBRTJBaGdnQlNBQ05nSVVJQVVvQWh3aEJpQUZJQVkyQWhBQ1FBTkFJQVVvQWhRaEIwRi9JUWdnQnlBSWFpRUpJQVVnQ1RZQ0ZDQUhSUTBCSUFVb0FoZ2hDa0VFSVFzZ0NpQUxhaUVNSUFVZ0REWUNHQ0FLS0FJQUlRMUJEU0VPSUEwZ0RuVWhEeUFGSUE4MkFnd2dCU2dDRENFUVFmLy9BU0VSSUJBaEVpQVJJUk1nRWlBVFNpRVVRUUVoRlNBVUlCVnhJUllDUUFKQUlCWkZEUUJCLy84QklSY2dCU0FYTmdJTURBRUxJQVVvQWd3aEdFR0FnSDRoR1NBWUlSb2dHU0ViSUJvZ0cwZ2hIRUVCSVIwZ0hDQWRjU0VlQWtBZ0hrVU5BRUdBZ0g0aEh5QUZJQjgyQWd3TEN5QUZLQUlNSVNCQi8vOERJU0VnSUNBaGNTRWlRWUNBQWlFaklDSWdJM01oSkVIL0FTRWxJQ1FnSlhFaEprRUlJU2NnSmlBbmRDRW9JQVVvQWd3aEtVSC8vd01oS2lBcElDcHhJU3RCZ0lBQ0lTd2dLeUFzY3lFdFFRZ2hMaUF0SUM1MUlTOUIvd0VoTUNBdklEQnhJVEVnS0NBeGNpRXlJQVVvQWhBaE0wRUNJVFFnTXlBMGFpRTFJQVVnTlRZQ0VDQXpJREk3QVFBTUFBc0FDdzhMWEFFS2Z5TUFJUUZCRUNFQ0lBRWdBbXNoQXlBREpBQWdBeUFBTmdJTUlBTW9BZ3doQkVFQklRVWdCQ0FGTmdJRUlBTW9BZ3doQmlBR0VESWdBeWdDRENFSFFRQWhDQ0FISUFnUU0wRVFJUWtnQXlBSmFpRUtJQW9rQUE4TFRBSUdmd045SXdBaEFVRVFJUUlnQVNBQ2F5RURJQU1nQURZQ0RDQURLQUlNSVFRZ0JDZ0NHQ0VGSUFXeUlRZERBQURJUWlFSUlBY2dDSlVoQ1NBREtBSU1JUVlnQmlBSk9BSVVEd3ZNQVFFV2Z5TUFJUUpCRUNFRElBSWdBMnNoQkNBRUpBQWdCQ0FBTmdJTUlBUWdBVFlDQ0NBRUtBSU1JUVVnQlNnQ29HWWhCaUFFS0FJSUlRY2dCaUVJSUFjaENTQUlJQWxLSVFwQkFTRUxJQW9nQzNFaERBSkFJQXhGRFFBZ0JDZ0NEQ0VOUVFBaERpQU5JQTQyQXFCbUN5QUVLQUlNSVE4Z0R4QTBJQVFvQWd3aEVDQVFLQUtVWmlFUklBUW9BZ3doRWlBU0lCRTJBcGhtSUFRb0FnZ2hFd0pBSUJORkRRQWdCQ2dDRENFVUlBUW9BZ2doRlNBVUlCVVFOUXRCRUNFV0lBUWdGbW9oRnlBWEpBQVBDNHNEQVRSL0l3QWhBVUVRSVFJZ0FTQUNheUVESUFNa0FDQURJQUEyQWd4QkFDRUVJQU1nQkRZQ0NBSkFBMEFnQXlnQ0NDRUZRUkFoQmlBRklRY2dCaUVJSUFjZ0NFZ2hDVUVCSVFvZ0NTQUtjU0VMSUF0RkRRRWdBeWdDRENFTUlBTW9BZ2doRFNBTUlBMFFRQ0FES0FJTUlRNGdEaWdDb0FnaER5QURLQUlNSVJCQnZBZ2hFU0FRSUJGcUlSSWdBeWdDQ0NFVFFTZ2hGQ0FUSUJSc0lSVWdFaUFWYWlFV0lCWWdEellDQkNBREtBSU1JUmRCdkFnaEdDQVhJQmhxSVJrZ0F5Z0NDQ0VhUVNnaEd5QWFJQnRzSVJ3Z0dTQWNhaUVkUVg4aEhpQWRJQjQyQWhBZ0F5Z0NEQ0VmUWJ3SUlTQWdIeUFnYWlFaElBTW9BZ2doSWtFb0lTTWdJaUFqYkNFa0lDRWdKR29oSlVFQ0lTWWdKU0FtTmdJZ0lBTW9BZ3doSjBHOENDRW9JQ2NnS0dvaEtTQURLQUlJSVNwQktDRXJJQ29nSzJ3aExDQXBJQ3hxSVMxQkFDRXVJQzBnTGpZQ0FDQURLQUlJSVM5QkFTRXdJQzhnTUdvaE1TQURJREUyQWdnTUFBc0FDeUFES0FJTUlUSWdNaEJLUVJBaE15QURJRE5xSVRRZ05DUUFEd3ZERUFMc0FYOENmU01BSVFKQkVDRURJQUlnQTJzaEJDQUVKQUFnQkNBQU5nSU1JQVFnQVRZQ0NDQUVLQUlNSVFVZ0JSQktBa0FDUUFOQUlBUW9BZ3doQmlBR0tBS1laaUVISUFjb0FnQWhDQ0FFS0FJSUlRa2dDQ0VLSUFraEN5QUtJQXRJSVF4QkFTRU5JQXdnRFhFaERpQU9SUTBCSUFRb0Fnd2hEeUFQS0FLWVppRVFJQkF0QUFVaEVVRjhJUklnRVNBU2FpRVRRZDhBSVJRZ0V5QVVTeG9DUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUlCTU9ZQUlEQmdRQkJRb0FDZ2NLQ0FvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0Nnb0tDZ29LQ2dvS0NRb0xJQVFvQWd3aEZTQVZLQUtZWmlFV0lCWXRBQVloRjBIL0FTRVlJQmNnR0hFaEdTQUVLQUlNSVJwQnZBZ2hHeUFhSUJ0cUlSd2dCQ2dDRENFZElCMG9BcGhtSVI0Z0hpMEFCQ0VmUWY4QklTQWdIeUFnY1NFaFFTZ2hJaUFoSUNKc0lTTWdIQ0FqYWlFa0lDUWdHVFlDSUNBRUtBSU1JU1ZCdkFnaEppQWxJQ1pxSVNjZ0JDZ0NEQ0VvSUNnb0FwaG1JU2tnS1MwQUJDRXFRZjhCSVNzZ0tpQXJjU0VzUVNnaExTQXNJQzFzSVM0Z0p5QXVhaUV2UVFBaE1DQXdzaUh1QVNBdklPNEJPQUlrREFrTElBUW9BZ3doTVNBeEtBS1laaUV5SURJdEFBWWhNMEgvQVNFMElETWdOSEVoTlNBRUtBSU1JVFlnTmlnQ21HWWhOeUEzTFFBSElUaEIvd0VoT1NBNElEbHhJVHBCQnlFN0lEb2dPM1FoUENBMUlEeHFJVDBnQkNnQ0RDRStRYndJSVQ4Z1BpQS9haUZBSUFRb0Fnd2hRU0JCS0FLWVppRkNJRUl0QUFRaFEwSC9BU0ZFSUVNZ1JIRWhSVUVvSVVZZ1JTQkdiQ0ZISUVBZ1Iyb2hTQ0JJSUQwMkFoUWdCQ2dDRENGSlFid0lJVW9nU1NCS2FpRkxJQVFvQWd3aFRDQk1LQUtZWmlGTklFMHRBQVFoVGtIL0FTRlBJRTRnVDNFaFVFRW9JVkVnVUNCUmJDRlNJRXNnVW1vaFUwRUFJVlFnVkxJaDd3RWdVeUR2QVRnQ0pBd0lDeUFFS0FJTUlWVWdWU2dDbUdZaFZpQldMUUFHSVZkQi93RWhXQ0JYSUZoeElWa2dCQ2dDRENGYVFid0lJVnNnV2lCYmFpRmNJQVFvQWd3aFhTQmRLQUtZWmlGZUlGNHRBQVFoWDBIL0FTRmdJRjhnWUhFaFlVRW9JV0lnWVNCaWJDRmpJRndnWTJvaFpDQmtJRmsyQWdnTUJ3c2dCQ2dDRENGbElHVW9BcGhtSVdZZ1ppMEFCaUZuUWY4QklXZ2daeUJvY1NGcElBUW9BZ3doYWtHOENDRnJJR29nYTJvaGJDQUVLQUlNSVcwZ2JTZ0NtR1loYmlCdUxRQUVJVzlCL3dFaGNDQnZJSEJ4SVhGQktDRnlJSEVnY213aGN5QnNJSE5xSVhRZ2RDQnBOZ0lRREFZTElBUW9BZ3doZFNCMUtBS1laaUYySUhZdEFBWWhkMEgvQVNGNElIY2dlSEVoZVNBRUtBSU1JWHBCdkFnaGV5QjZJSHRxSVh3Z0JDZ0NEQ0Y5SUgwb0FwaG1JWDRnZmkwQUJDRi9RZjhCSVlBQklIOGdnQUZ4SVlFQlFTZ2hnZ0VnZ1FFZ2dnRnNJWU1CSUh3Z2d3RnFJWVFCSUlRQklIazJBaGdNQlFzZ0JDZ0NEQ0dGQVNDRkFTZ0NnR1loaGdFZ0JDZ0NEQ0dIQVNDSEFTZ0NtR1loaUFFZ2lBRXRBQVFoaVFGQi93RWhpZ0VnaVFFZ2lnRnhJWXNCUVFFaGpBRWdqQUVnaXdGMElZMEJJSVlCSUkwQmNTR09BUUpBQWtBZ2pnRkZEUUFnQkNnQ0RDR1BBU0NQQVNnQ21HWWhrQUVna0FFdEFBWWhrUUZCL3dFaGtnRWdrUUVna2dGeElaTUJJQVFvQWd3aGxBRkJ2QWdobFFFZ2xBRWdsUUZxSVpZQklBUW9BZ3dobHdFZ2x3RW9BcGhtSVpnQklKZ0JMUUFFSVprQlFmOEJJWm9CSUprQklKb0JjU0diQVVFb0lad0JJSnNCSUp3QmJDR2RBU0NXQVNDZEFXb2huZ0VnbmdFZ2t3RTJBZ0FNQVFzZ0JDZ0NEQ0dmQVNDZkFTZ0NtR1lob0FFZ29BRXRBQVlob1FGQi93RWhvZ0Vnb1FFZ29nRnhJYU1CSUFRb0Fnd2hwQUZCdkFnaHBRRWdwQUVncFFGcUlhWUJJQVFvQWd3aHB3RWdwd0VvQXBobUlhZ0JJS2dCTFFBRUlha0JRZjhCSWFvQklLa0JJS29CY1NHckFVRW9JYXdCSUtzQklLd0JiQ0d0QVNDbUFTQ3RBV29ocmdFZ3JnRWdvd0UyQWdRTERBUUxJQVFvQWd3aHJ3RWdyd0VvQXBobUliQUJJTEFCTFFBR0liRUJRZjhCSWJJQklMRUJJTElCY1NHekFTQUVLQUlNSWJRQlFid0lJYlVCSUxRQklMVUJhaUcyQVNBRUtBSU1JYmNCSUxjQktBS1laaUc0QVNDNEFTMEFCQ0c1QVVIL0FTRzZBU0M1QVNDNkFYRWh1d0ZCS0NHOEFTQzdBU0M4QVd3aHZRRWd0Z0VndlFGcUliNEJJTDRCSUxNQk5nSU1EQU1MSUFRb0Fnd2h2d0VnQkNnQ0RDSEFBU0RBQVNnQ21HWWh3UUVnd1FFdEFBUWh3Z0ZCL3dFaHd3RWd3Z0Vnd3dGeEljUUJJTDhCSU1RQkVFQU1BZ3NnQkNnQ0RDSEZBU0RGQVNnQ21HWWh4Z0VneGdFdEFBWWh4d0ZCL3dFaHlBRWd4d0VneUFGeElja0JJQVFvQWd3aHlnRkJ2QWdoeXdFZ3lnRWd5d0ZxSWN3QklBUW9BZ3doelFFZ3pRRW9BcGhtSWM0QklNNEJMUUFFSWM4QlFmOEJJZEFCSU04QklOQUJjU0hSQVVFb0lkSUJJTkVCSU5JQmJDSFRBU0RNQVNEVEFXb2gxQUVnMUFFZ3lRRTJBZ0FNQVFzZ0JDZ0NEQ0hWQVNEVkFTZ0NtR1loMWdFZzFnRW9BZ0FoMXdFZ0JDZ0NEQ0hZQVNEWUFTRFhBVFlDb0dZTUF3c2dCQ2dDRENIWkFTRFpBU2dDbUdZaDJnRkJDQ0hiQVNEYUFTRGJBV29oM0FFZzJRRWczQUUyQXBobURBQUxBQXNnQkNnQ0RDSGRBU0RkQVNnQ21HWWgzZ0VnQkNnQ0RDSGZBU0RmQVNnQ2xHWWg0QUVnM2dFaDRRRWc0QUVoNGdFZzRRRWc0Z0ZISWVNQlFRRWg1QUVnNHdFZzVBRnhJZVVCQWtBZzVRRkZEUUFnQkNnQ0RDSG1BU0RtQVNnQ21HWWg1d0ZCZUNIb0FTRG5BU0RvQVdvaDZRRWc1Z0VnNlFFMkFwaG1DeUFFS0FJSUllb0JJQVFvQWd3aDZ3RWc2d0VnNmdFMkFxQm1DMEVRSWV3QklBUWc3QUZxSWUwQklPMEJKQUFQQzNVQkRuOGpBQ0VDUVJBaEF5QUNJQU5ySVFRZ0JDUUFJQVFnQURZQ0RDQUVJQUUyQWdnZ0JDZ0NEQ0VGSUFRb0FnZ2hCaUFFS0FJTUlRY2dCeWdDQ0NFSVFlUUFJUWtnQ0NBSmJTRUtJQVlnQ213aEMwRUtJUXdnQ3lBTWJpRU5JQVVnRFJBelFSQWhEaUFFSUE1cUlROGdEeVFBRHd2MUFRRWdmeU1BSVFGQkVDRUNJQUVnQW1zaEF5QURJQUEyQWd3Z0F5Z0NEQ0VFSUFRb0FwUm1JUVVnQXlnQ0RDRUdJQVlvQXF4bUlRZEJBU0VJSUFjZ0NHc2hDVUVESVFvZ0NTQUtkQ0VMSUFVZ0Myb2hEQ0FESUF3MkFnZ2dBeWdDQ0NFTklBMG9BZ0FoRGlBREtBSU1JUThnRHlnQ0NDRVFJQTRnRUcwaEVVSG9CeUVTSUJFZ0Vtd2hFeUFESUJNMkFnUWdBeWdDQ0NFVUlCUW9BZ0FoRlNBREtBSU1JUllnRmlnQ0NDRVhJQlVnRjI4aEdFSG9CeUVaSUJnZ0dXd2hHaUFES0FJTUlSc2dHeWdDQ0NFY0lCb2dIRzBoSFNBREtBSUVJUjRnSGlBZGFpRWZJQU1nSHpZQ0JDQURLQUlFSVNBZ0lBOEx0UUVCRjM4akFDRUJRUkFoQWlBQklBSnJJUU1nQXlBQU5nSU1JQU1vQWd3aEJDQUVLQUtnWmlFRklBTW9BZ3doQmlBR0tBSUlJUWNnQlNBSGJTRUlRZWdISVFrZ0NDQUpiQ0VLSUFNZ0NqWUNDQ0FES0FJTUlRc2dDeWdDb0dZaERDQURLQUlNSVEwZ0RTZ0NDQ0VPSUF3Z0RtOGhEMEhvQnlFUUlBOGdFR3doRVNBREtBSU1JUklnRWlnQ0NDRVRJQkVnRTIwaEZDQURLQUlJSVJVZ0ZTQVVhaUVXSUFNZ0ZqWUNDQ0FES0FJSUlSY2dGdzhMNHhZQ3R3Si9BbjBqQUNFRFFTQWhCQ0FESUFScklRVWdCU1FBSUFVZ0FEWUNHQ0FGSUFFMkFoUWdCU0FDTmdJUUlBVW9BaGdoQmlBR0tBSUVJUWNDUUFKQUlBY05BRUVBSVFnZ0JTQUlOZ0ljREFFTElBVW9BaEFoQ1NBRktBSVlJUW9nQ2lnQ0VDRUxJQWtnQzI0aERDQUZJQXcyQWdRZ0JTZ0NHQ0VOSUEwb0FxQm1JUTRnQlNBT05nSU1JQVVvQWhnaER5QVBLQUtnWmlFUUlBVW9BZ1FoRVNBUUlCRnFJUklnQlNBU05nSUlBa0FEUUNBRktBSVlJUk1nRXlnQ29HWWhGQ0FGS0FJSUlSVWdGQ0VXSUJVaEZ5QVdJQmRJSVJoQkFTRVpJQmdnR1hFaEdpQWFSUTBCQWtBRFFDQUZLQUlZSVJzZ0d5Z0NtR1loSENBY0tBSUFJUjBnQlNnQ0dDRWVJQjRvQXFCbUlSOGdIU0VnSUI4aElTQWdJQ0ZNSVNKQkFTRWpJQ0lnSTNFaEpDQWtSUTBCSUFVb0FoZ2hKU0FsS0FLWVppRW1JQ1l0QUFVaEowRi9JU2dnSnlBb2FpRXBRZUlBSVNvZ0tTQXFTeG9DUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBQ1FDQXBEbU1BQVFJRkJna0hCQWdQQXd3S0N3MFBEdzhQRHc4UER3OFBEdzhQRHc4UER3OFBEdzhQRHc4UER3OFBEdzhQRHc4UER3OFBEdzhQRHc4UER3OFBEdzhQRHc4UER3OFBEdzhQRHc4UER3OFBEdzhQRHc4UER3OFBEdzhQRHc4UER3OFBEdzRQQ3lBRktBSVlJU3NnS3lnQ21HWWhMQ0FzTFFBSElTMUJBQ0V1UWY4QklTOGdMU0F2Y1NFd1FmOEJJVEVnTGlBeGNTRXlJREFnTWtjaE0wRUJJVFFnTXlBMGNTRTFBa0FDUUNBMURRQWdCU2dDR0NFMklEWVFPZ3dCQ3lBRktBSVlJVGNnTnhBN0N3d09DeUFGS0FJWUlUZ2dPQkE2REEwTElBVW9BaGdoT1NBNUVEd01EQXNnQlNnQ0dDRTZJRG9vQXBobUlUc2dPeTBBQmlFOFFmOEJJVDBnUENBOWNTRStJQVVvQWhnaFAwRzhDQ0ZBSUQ4Z1FHb2hRU0FGS0FJWUlVSWdRaWdDbUdZaFF5QkRMUUFFSVVSQi93RWhSU0JFSUVWeElVWkJLQ0ZISUVZZ1Iyd2hTQ0JCSUVocUlVa2dTU0ErTmdJZ0lBVW9BaGdoU2tHOENDRkxJRW9nUzJvaFRDQUZLQUlZSVUwZ1RTZ0NtR1loVGlCT0xRQUVJVTlCL3dFaFVDQlBJRkJ4SVZGQktDRlNJRkVnVW13aFV5Qk1JRk5xSVZSQkFDRlZJRld5SWJvQ0lGUWd1Z0k0QWlRTUN3c2dCU2dDR0NGV0lGWW9BcGhtSVZjZ1Z5MEFCaUZZUWY4QklWa2dXQ0JaY1NGYUlBVW9BaGdoV3lCYktBS1laaUZjSUZ3dEFBY2hYVUgvQVNGZUlGMGdYbkVoWDBFSElXQWdYeUJnZENGaElGb2dZV29oWWlBRktBSVlJV05CdkFnaFpDQmpJR1JxSVdVZ0JTZ0NHQ0ZtSUdZb0FwaG1JV2NnWnkwQUJDRm9RZjhCSVdrZ2FDQnBjU0ZxUVNnaGF5QnFJR3RzSVd3Z1pTQnNhaUZ0SUcwZ1lqWUNGQ0FGS0FJWUlXNUJ2QWdoYnlCdUlHOXFJWEFnQlNnQ0dDRnhJSEVvQXBobUlYSWdjaTBBQkNGelFmOEJJWFFnY3lCMGNTRjFRU2doZGlCMUlIWnNJWGNnY0NCM2FpRjRRUUFoZVNCNXNpRzdBaUI0SUxzQ09BSWtJQVVvQWhnaGVpQjZFRDBNQ2dzZ0JTZ0NHQ0Y3SUhzb0FwaG1JWHdnZkMwQUJpRjlRZjhCSVg0Z2ZTQitjU0YvSUFVb0FoZ2hnQUZCdkFnaGdRRWdnQUVnZ1FGcUlZSUJJQVVvQWhnaGd3RWdnd0VvQXBobUlZUUJJSVFCTFFBRUlZVUJRZjhCSVlZQklJVUJJSVlCY1NHSEFVRW9JWWdCSUljQklJZ0JiQ0dKQVNDQ0FTQ0pBV29oaWdFZ2lnRWdmellDQ0NBRktBSVlJWXNCSUlzQkVENE1DUXNnQlNnQ0dDR01BU0NNQVNnQ21HWWhqUUVnalFFdEFBWWhqZ0ZCL3dFaGp3RWdqZ0VnandGeElaQUJJQVVvQWhnaGtRRkJ2QWdoa2dFZ2tRRWdrZ0ZxSVpNQklBVW9BaGdobEFFZ2xBRW9BcGhtSVpVQklKVUJMUUFFSVpZQlFmOEJJWmNCSUpZQklKY0JjU0dZQVVFb0laa0JJSmdCSUprQmJDR2FBU0NUQVNDYUFXb2htd0VnbXdFZ2tBRTJBaEFNQ0FzZ0JTZ0NHQ0djQVNDY0FTZ0NtR1loblFFZ25RRXRBQVlobmdGQi93RWhud0VnbmdFZ253RnhJYUFCSUFVb0FoZ2hvUUZCdkFnaG9nRWdvUUVnb2dGcUlhTUJJQVVvQWhnaHBBRWdwQUVvQXBobUlhVUJJS1VCTFFBRUlhWUJRZjhCSWFjQklLWUJJS2NCY1NHb0FVRW9JYWtCSUtnQklLa0JiQ0dxQVNDakFTQ3FBV29ocXdFZ3F3RWdvQUUyQWhnZ0JTZ0NHQ0dzQVNDc0FSQStEQWNMSUFVb0FoZ2hyUUVnclFFb0FvQm1JYTRCSUFVb0FoZ2hyd0VncndFb0FwaG1JYkFCSUxBQkxRQUVJYkVCUWY4QkliSUJJTEVCSUxJQmNTR3pBVUVCSWJRQklMUUJJTE1CZENHMUFTQ3VBU0MxQVhFaHRnRUNRQUpBSUxZQlJRMEFJQVVvQWhnaHR3RWd0d0VvQXBobUliZ0JJTGdCTFFBR0lia0JRZjhCSWJvQklMa0JJTG9CY1NHN0FTQUZLQUlZSWJ3QlFid0lJYjBCSUx3QklMMEJhaUcrQVNBRktBSVlJYjhCSUw4QktBS1laaUhBQVNEQUFTMEFCQ0hCQVVIL0FTSENBU0RCQVNEQ0FYRWh3d0ZCS0NIRUFTRERBU0RFQVd3aHhRRWd2Z0VneFFGcUljWUJJTVlCSUxzQk5nSUFEQUVMSUFVb0FoZ2h4d0VneHdFb0FwaG1JY2dCSU1nQkxRQUdJY2tCUWY4Qkljb0JJTWtCSU1vQmNTSExBU0FGS0FJWUljd0JRYndJSWMwQklNd0JJTTBCYWlIT0FTQUZLQUlZSWM4QklNOEJLQUtZWmlIUUFTRFFBUzBBQkNIUkFVSC9BU0hTQVNEUkFTRFNBWEVoMHdGQktDSFVBU0RUQVNEVUFXd2gxUUVnemdFZzFRRnFJZFlCSU5ZQklNc0JOZ0lFQ3d3R0N5QUZLQUlZSWRjQklOY0JLQUtZWmlIWUFTRFlBUzBBQmlIWkFVSC9BU0hhQVNEWkFTRGFBWEVoMndFZ0JTZ0NHQ0hjQVVHOENDSGRBU0RjQVNEZEFXb2gzZ0VnQlNnQ0dDSGZBU0RmQVNnQ21HWWg0QUVnNEFFdEFBUWg0UUZCL3dFaDRnRWc0UUVnNGdGeEllTUJRU2doNUFFZzR3RWc1QUZzSWVVQklONEJJT1VCYWlIbUFTRG1BU0RiQVRZQ0RDQUZLQUlZSWVjQklPY0JLQUtZWmlIb0FTRG9BUzBBQmlIcEFVRUFJZW9CUWY4Qkllc0JJT2tCSU9zQmNTSHNBVUgvQVNIdEFTRHFBU0R0QVhFaDdnRWc3QUVnN2dGSEllOEJRUUVoOEFFZzd3RWc4QUZ4SWZFQkFrQWc4UUVOQUNBRktBSVlJZklCSVBJQkVEOExEQVVMSUFVb0FoZ2g4d0VnQlNnQ0dDSDBBU0QwQVNnQ21HWWg5UUVnOVFFdEFBUWg5Z0ZCL3dFaDl3RWc5Z0VnOXdGeElmZ0JJUE1CSVBnQkVFQU1CQXNnQlNnQ0dDSDVBU0Q1QVJCQkRBTUxJQVVvQWhnaCtnRWcrZ0VRUWd3Q0N5QUZLQUlZSWZzQklQc0JLQUtZWmlIOEFTRDhBUzBBQmlIOUFVSC9BU0grQVNEOUFTRCtBWEVoL3dFZ0JTZ0NHQ0dBQWtHOENDR0JBaUNBQWlDQkFtb2hnZ0lnQlNnQ0dDR0RBaUNEQWlnQ21HWWhoQUlnaEFJdEFBUWhoUUpCL3dFaGhnSWdoUUlnaGdKeElZY0NRU2doaUFJZ2h3SWdpQUpzSVlrQ0lJSUNJSWtDYWlHS0FpQ0tBaUQvQVRZQ0FBd0JDeUFGS0FJWUlZc0NRUUFoakFJZ2l3SWdqQUkyQWdRZ0JTZ0NHQ0dOQWlDTkFpZ0NvR1loamdJZ0JTZ0NEQ0dQQWlDT0FpQ1BBbXNoa0FJZ0JTZ0NHQ0dSQWlDUkFpZ0NFQ0dTQWlDUUFpQ1NBbXdoa3dJZ0JTQ1RBallDSEF3RkN5QUZLQUlZSVpRQ0lKUUNLQUtZWmlHVkFrRUlJWllDSUpVQ0lKWUNhaUdYQWlDVUFpQ1hBallDbUdZTUFBc0FDeUFGS0FJWUlaZ0NJSmdDS0FLWVppR1pBaUNaQWlnQ0FDR2FBaUFGS0FJSUlac0NJSm9DSVp3Q0lKc0NJWjBDSUp3Q0lKMENTaUdlQWtFQklaOENJSjRDSUo4Q2NTR2dBZ0pBQWtBZ29BSkZEUUFnQlNnQ0dDR2hBaUFGS0FJSUlhSUNJQVVvQWhnaG93SWdvd0lvQXFCbUlhUUNJS0lDSUtRQ2F5R2xBa0VVSWFZQ0lBVWdwZ0pxSWFjQ0lLY0NJYWdDSUtFQ0lLZ0NJS1VDRUVNTUFRc2dCU2dDR0NHcEFpQUZLQUlZSWFvQ0lLb0NLQUtZWmlHckFpQ3JBaWdDQUNHc0FpQUZLQUlZSWEwQ0lLMENLQUtnWmlHdUFpQ3NBaUN1QW1zaHJ3SkJGQ0d3QWlBRklMQUNhaUd4QWlDeEFpR3lBaUNwQWlDeUFpQ3ZBaEJEQ3d3QUN3QUxJQVVvQWdRaHN3SWdCU2dDR0NHMEFpQzBBaWdDRUNHMUFpQ3pBaUMxQW13aHRnSWdCU0MyQWpZQ0hBc2dCU2dDSENHM0FrRWdJYmdDSUFVZ3VBSnFJYmtDSUxrQ0pBQWd0d0lQQy9vRUFWZC9Jd0FoQVVFUUlRSWdBU0FDYXlFRElBTWtBQ0FESUFBMkFnd2dBeWdDRENFRUlBUW9BdnhsSVFVZ0F5QUZOZ0lJSUFNb0Fnd2hCaUFHS0FLWVppRUhJQU1nQnpZQ0JBSkFBMEFnQXlnQ0NDRUlRWDhoQ1NBSUlBbHFJUW9nQXlBS05nSUlJQWhGRFFFZ0F5Z0NEQ0VMUWJ3TklRd2dDeUFNYWlFTklBTW9BZ2doRGtIc0FTRVBJQTRnRDJ3aEVDQU5JQkJxSVJFZ0VTMEFBQ0VTUWY4QklSTWdFaUFUY1NFVVFRRWhGU0FVSVJZZ0ZTRVhJQllnRjBZaEdFRUJJUmtnR0NBWmNTRWFBa0FnR2tVTkFDQURLQUlNSVJ0QnZBMGhIQ0FiSUJ4cUlSMGdBeWdDQ0NFZVFld0JJUjhnSGlBZmJDRWdJQjBnSUdvaElTQWhMUUFCSVNKQi93RWhJeUFpSUNOeElTUWdBeWdDQkNFbElDVXRBQVFoSmtIL0FTRW5JQ1lnSjNFaEtDQWtJU2tnS0NFcUlDa2dLa1loSzBFQklTd2dLeUFzY1NFdElDMUZEUUFnQXlnQ0RDRXVRYndOSVM4Z0xpQXZhaUV3SUFNb0FnZ2hNVUhzQVNFeUlERWdNbXdoTXlBd0lETnFJVFFnTkMwQUFpRTFRZjhCSVRZZ05TQTJjU0UzSUFNb0FnUWhPQ0E0TFFBR0lUbEIvd0VoT2lBNUlEcHhJVHNnTnlFOElEc2hQU0E4SUQxR0lUNUJBU0UvSUQ0Z1AzRWhRQ0JBUlEwQUlBTW9BZ3doUVVHOENDRkNJRUVnUW1vaFF5QURLQUlFSVVRZ1JDMEFCQ0ZGUWY4QklVWWdSU0JHY1NGSFFTZ2hTQ0JISUVoc0lVa2dReUJKYWlGS0lFb29BZ3doU3dKQUFrQWdTMFVOQUNBREtBSU1JVXhCdkEwaFRTQk1JRTFxSVU0Z0F5Z0NDQ0ZQUWV3QklWQWdUeUJRYkNGUklFNGdVV29oVWtFQ0lWTWdVaUJUT2dBQURBRUxJQU1vQWd3aFZDQURLQUlJSVZVZ1ZDQlZFRVFMREFJTERBQUxBQXRCRUNGV0lBTWdWbW9oVnlCWEpBQVBDLzhNQWNvQmZ5TUFJUUZCSUNFQ0lBRWdBbXNoQXlBREpBQWdBeUFBTmdJY0lBTW9BaHdoQkNBRUtBTDhaU0VGSUFNZ0JUWUNHRUYvSVFZZ0F5QUdOZ0lVUWYvLy8vOEhJUWNnQXlBSE5nSVFJQU1vQWh3aENDQUlLQUtZWmlFSklBTWdDVFlDQ0FKQUEwQWdBeWdDR0NFS1FYOGhDeUFLSUF0cUlRd2dBeUFNTmdJWUlBcEZEUUVnQXlnQ0hDRU5RYndOSVE0Z0RTQU9haUVQSUFNb0FoZ2hFRUhzQVNFUklCQWdFV3doRWlBUElCSnFJUk1nRXkwQUFDRVVRZjhCSVJVZ0ZDQVZjU0VXQWtBQ1FDQVdEUUFnQXlnQ0dDRVhJQU1nRnpZQ0ZBd0JDeUFES0FJY0lSaEJ2QTBoR1NBWUlCbHFJUm9nQXlnQ0dDRWJRZXdCSVJ3Z0d5QWNiQ0VkSUJvZ0hXb2hIaUFlTFFBQklSOUIvd0VoSUNBZklDQnhJU0VnQXlnQ0NDRWlJQ0l0QUFRaEkwSC9BU0VrSUNNZ0pIRWhKU0FoSVNZZ0pTRW5JQ1lnSjBZaEtFRUJJU2tnS0NBcGNTRXFBa0FnS2tVTkFDQURLQUljSVN0QnZBMGhMQ0FySUN4cUlTMGdBeWdDR0NFdVFld0JJUzhnTGlBdmJDRXdJQzBnTUdvaE1TQXhMUUFDSVRKQi93RWhNeUF5SUROeElUUWdBeWdDQ0NFMUlEVXRBQVloTmtIL0FTRTNJRFlnTjNFaE9DQTBJVGtnT0NFNklEa2dPa1loTzBFQklUd2dPeUE4Y1NFOUFrQWdQUTBBSUFNb0Fod2hQa0c4Q0NFL0lENGdQMm9oUUNBREtBSWNJVUZCdkEwaFFpQkJJRUpxSVVNZ0F5Z0NHQ0ZFUWV3QklVVWdSQ0JGYkNGR0lFTWdSbW9oUnlCSExRQUJJVWhCL3dFaFNTQklJRWx4SVVwQktDRkxJRW9nUzJ3aFRDQkFJRXhxSVUwZ1RTZ0NIQ0ZPSUU1RkRRRUxJQU1vQWh3aFR5QURLQUlZSVZBZ1R5QlFFRVVMQ3d3QUN3QUxJQU1vQWhRaFVVRi9JVklnVVNGVElGSWhWQ0JUSUZSSElWVkJBU0ZXSUZVZ1ZuRWhWd0pBQWtBZ1YwVU5BQ0FES0FJY0lWZ2dBeWdDQ0NGWklBTW9BaFFoV2lCWUlGa2dXaEJHREFFTElBTW9BaHdoV3lCYktBTDhaU0ZjSUFNZ1hEWUNHQUpBQTBBZ0F5Z0NHQ0ZkUVg4aFhpQmRJRjVxSVY4Z0F5QmZOZ0lZSUYxRkRRRWdBeWdDSENGZ1Fid05JV0VnWUNCaGFpRmlJQU1vQWhnaFkwSHNBU0ZrSUdNZ1pHd2haU0JpSUdWcUlXWWdaaTBBQUNGblFmOEJJV2dnWnlCb2NTRnBRUUVoYWlCcElXc2dhaUZzSUdzZ2JFY2hiVUVCSVc0Z2JTQnVjU0Z2QWtBZ2IwVU5BQ0FES0FJY0lYQkJ2QTBoY1NCd0lIRnFJWElnQXlnQ0dDRnpRZXdCSVhRZ2N5QjBiQ0YxSUhJZ2RXb2hkaUIyTFFBQUlYZEIvd0VoZUNCM0lIaHhJWGxCQkNGNklIa2hleUI2SVh3Z2V5QjhSeUY5UVFFaGZpQjlJSDV4SVg4Z2YwVU5BQ0FES0FJY0lZQUJRYndOSVlFQklJQUJJSUVCYWlHQ0FTQURLQUlZSVlNQlFld0JJWVFCSUlNQklJUUJiQ0dGQVNDQ0FTQ0ZBV29oaGdFZ2hnRW9BandoaHdFZ0F5Q0hBVFlDRENBREtBSWNJWWdCUWJ3TklZa0JJSWdCSUlrQmFpR0tBU0FES0FJWUlZc0JRZXdCSVl3QklJc0JJSXdCYkNHTkFTQ0tBU0NOQVdvaGpnRWdqZ0VvQXVnQklZOEJBa0FnandFTkFDQURLQUljSVpBQlFid05JWkVCSUpBQklKRUJhaUdTQVNBREtBSVlJWk1CUWV3QklaUUJJSk1CSUpRQmJDR1ZBU0NTQVNDVkFXb2hsZ0VnbGdFb0FrQWhsd0VnQXlnQ0RDR1lBU0NYQVNHWkFTQ1lBU0dhQVNDWkFTQ2FBVW9obXdGQkFTR2NBU0NiQVNDY0FYRWhuUUVnblFGRkRRQWdBeWdDSENHZUFVRzhEU0dmQVNDZUFTQ2ZBV29ob0FFZ0F5Z0NHQ0doQVVIc0FTR2lBU0NoQVNDaUFXd2hvd0Vnb0FFZ293RnFJYVFCSUtRQktBSkFJYVVCSUFNZ3BRRTJBZ3dMSUFNb0Fnd2hwZ0VnQXlnQ0VDR25BU0NtQVNHb0FTQ25BU0dwQVNDb0FTQ3BBVWdocWdGQkFTR3JBU0NxQVNDckFYRWhyQUVDUUNDc0FVVU5BQ0FES0FJTUlhMEJJQU1nclFFMkFoQWdBeWdDR0NHdUFTQURJSzRCTmdJVUN3c01BQXNBQ3lBREtBSVVJYThCUVg4aHNBRWdyd0Voc1FFZ3NBRWhzZ0Vnc1FFZ3NnRkhJYk1CUVFFaHRBRWdzd0VndEFGeEliVUJBa0FndFFGRkRRQWdBeWdDSENHMkFTQzJBU2dDakdZaHR3RkJBU0c0QVNDM0FTQzRBV29odVFFZ3RnRWd1UUUyQW94bUlBTW9BaHdodWdGQnZBMGh1d0VndWdFZ3V3RnFJYndCSUFNb0FoUWh2UUZCN0FFaHZnRWd2UUVndmdGc0liOEJJTHdCSUw4QmFpSEFBVUVBSWNFQklNQUJJTUVCT2dBQUlBTW9BaHdod2dFZ0F5Z0NDQ0hEQVNBREtBSVVJY1FCSU1JQklNTUJJTVFCRUVZTUFRc2dBeWdDSENIRkFTREZBU2dDaUdZaHhnRkJBU0hIQVNER0FTREhBV29oeUFFZ3hRRWd5QUUyQW9obUMwRWdJY2tCSUFNZ3lRRnFJY29CSU1vQkpBQVBDOFVFQVU5L0l3QWhBVUVRSVFJZ0FTQUNheUVESUFNa0FDQURJQUEyQWd3Z0F5Z0NEQ0VFSUFRb0FwaG1JUVVnQXlBRk5nSUlJQU1vQWd3aEJpQUdLQUw4WlNFSElBTWdCellDQkFKQUEwQWdBeWdDQkNFSVFYOGhDU0FJSUFscUlRb2dBeUFLTmdJRUlBaEZEUUVnQXlnQ0RDRUxRYndOSVF3Z0N5QU1haUVOSUFNb0FnUWhEa0hzQVNFUElBNGdEMndoRUNBTklCQnFJUkVnRVMwQUFDRVNRZjhCSVJNZ0VpQVRjU0VVUVFFaEZTQVVJUllnRlNFWElCWWdGMFloR0VFQklSa2dHQ0FaY1NFYUFrQWdHa1VOQUNBREtBSU1JUnRCdkEwaEhDQWJJQnhxSVIwZ0F5Z0NCQ0VlUWV3QklSOGdIaUFmYkNFZ0lCMGdJR29oSVNBaExRQUJJU0pCL3dFaEl5QWlJQ054SVNRZ0F5Z0NDQ0VsSUNVdEFBUWhKa0gvQVNFbklDWWdKM0VoS0NBa0lTa2dLQ0VxSUNrZ0trWWhLMEVCSVN3Z0t5QXNjU0V0SUMxRkRRQWdBeWdDRENFdVFid05JUzhnTGlBdmFpRXdJQU1vQWdRaE1VSHNBU0V5SURFZ01td2hNeUF3SUROcUlUUWdOQzBBQWlFMVFmOEJJVFlnTlNBMmNTRTNJQU1vQWdnaE9DQTRMUUFHSVRsQi93RWhPaUE1SURweElUc2dOeUU4SURzaFBTQThJRDFHSVQ1QkFTRS9JRDRnUDNFaFFDQkFSUTBBSUFNb0FnZ2hRU0JCTFFBSElVSWdBeWdDRENGRFFid05JVVFnUXlCRWFpRkZJQU1vQWdRaFJrSHNBU0ZISUVZZ1Iyd2hTQ0JGSUVocUlVa2dTU0JDT2dBRElBTW9BZ3doU2lBREtBSUVJVXNnU2lCTEVFY2dBeWdDRENGTUlBTW9BZ1FoVFNCTUlFMFFIUXdDQ3d3QUN3QUxRUkFoVGlBRElFNXFJVThnVHlRQUR3dldBZ0VyZnlNQUlRRkJFQ0VDSUFFZ0Ftc2hBeUFESkFBZ0F5QUFOZ0lNSUFNb0Fnd2hCQ0FFS0FLWVppRUZJQVV0QUFRaEJrSC9BU0VISUFZZ0IzRWhDQ0FESUFnMkFnZ2dBeWdDRENFSklBa29BdnhsSVFvZ0F5QUtOZ0lFQWtBRFFDQURLQUlFSVF0QmZ5RU1JQXNnREdvaERTQURJQTAyQWdRZ0MwVU5BU0FES0FJTUlRNUJ2QTBoRHlBT0lBOXFJUkFnQXlnQ0JDRVJRZXdCSVJJZ0VTQVNiQ0VUSUJBZ0Uyb2hGQ0FVTFFBQUlSVkIvd0VoRmlBVklCWnhJUmNDUUNBWFJRMEFJQU1vQWd3aEdFRzhEU0VaSUJnZ0dXb2hHaUFES0FJRUlSdEI3QUVoSENBYklCeHNJUjBnR2lBZGFpRWVJQjR0QUFFaEgwSC9BU0VnSUI4Z0lIRWhJU0FES0FJSUlTSWdJU0VqSUNJaEpDQWpJQ1JHSVNWQkFTRW1JQ1VnSm5FaEp5QW5SUTBBSUFNb0Fnd2hLQ0FES0FJRUlTa2dLQ0FwRUVnTERBQUxBQXRCRUNFcUlBTWdLbW9oS3lBckpBQVBDKzBEQVVOL0l3QWhBVUVRSVFJZ0FTQUNheUVESUFNa0FDQURJQUEyQWd3Z0F5Z0NEQ0VFSUFRb0FwaG1JUVVnQlMwQUJDRUdRZjhCSVFjZ0JpQUhjU0VJSUFNZ0NEWUNDQ0FES0FJTUlRa2dDU2dDL0dVaENpQURJQW8yQWdRQ1FBTkFJQU1vQWdRaEMwRi9JUXdnQ3lBTWFpRU5JQU1nRFRZQ0JDQUxSUTBCSUFNb0Fnd2hEa0c4RFNFUElBNGdEMm9oRUNBREtBSUVJUkZCN0FFaEVpQVJJQkpzSVJNZ0VDQVRhaUVVSUJRdEFBRWhGVUgvQVNFV0lCVWdGbkVoRnlBREtBSUlJUmdnRnlFWklCZ2hHaUFaSUJwR0lSdEJBU0VjSUJzZ0hIRWhIUUpBSUIxRkRRQWdBeWdDRENFZVFid05JUjhnSGlBZmFpRWdJQU1vQWdRaElVSHNBU0VpSUNFZ0ltd2hJeUFnSUNOcUlTUWdKQzBBQUNFbFFmOEJJU1lnSlNBbWNTRW5RUUVoS0NBbklTa2dLQ0VxSUNrZ0trWWhLMEVCSVN3Z0t5QXNjU0V0QWtBZ0xRMEFJQU1vQWd3aExrRzhEU0V2SUM0Z0wyb2hNQ0FES0FJRUlURkI3QUVoTWlBeElESnNJVE1nTUNBemFpRTBJRFF0QUFBaE5VSC9BU0UySURVZ05uRWhOMEVDSVRnZ055RTVJRGdoT2lBNUlEcEdJVHRCQVNFOElEc2dQSEVoUFNBOVJRMEJDeUFES0FJTUlUNGdBeWdDQkNFL0lENGdQeEJISUFNb0Fnd2hRQ0FES0FJRUlVRWdRQ0JCRUIwTERBQUxBQXRCRUNGQ0lBTWdRbW9oUXlCREpBQVBDL1FDQVRGL0l3QWhBVUVRSVFJZ0FTQUNheUVESUFNa0FDQURJQUEyQWd3Z0F5Z0NEQ0VFSUFRb0F2eGxJUVVnQXlBRk5nSUlJQU1vQWd3aEJpQUdLQUtZWmlFSElBY3RBQVFoQ0VIL0FTRUpJQWdnQ1hFaENpQURJQW8yQWdRQ1FBTkFJQU1vQWdnaEMwRi9JUXdnQ3lBTWFpRU5JQU1nRFRZQ0NDQUxSUTBCSUFNb0Fnd2hEa0c4RFNFUElBNGdEMm9oRUNBREtBSUlJUkZCN0FFaEVpQVJJQkpzSVJNZ0VDQVRhaUVVSUJRdEFBQWhGVUgvQVNFV0lCVWdGbkVoRjBFQ0lSZ2dGeUVaSUJnaEdpQVpJQnBHSVJ0QkFTRWNJQnNnSEhFaEhRSkFJQjFGRFFBZ0F5Z0NEQ0VlUWJ3TklSOGdIaUFmYWlFZ0lBTW9BZ2doSVVIc0FTRWlJQ0VnSW13aEl5QWdJQ05xSVNRZ0pDMEFBU0VsUWY4QklTWWdKU0FtY1NFbklBTW9BZ1FoS0NBbklTa2dLQ0VxSUNrZ0trWWhLMEVCSVN3Z0t5QXNjU0V0SUMxRkRRQWdBeWdDRENFdUlBTW9BZ2doTHlBdUlDOFFSQXNNQUFzQUMwRVFJVEFnQXlBd2FpRXhJREVrQUE4THdBSUNLMzhCZlNNQUlRSkJFQ0VESUFJZ0Eyc2hCQ0FFSUFBMkFnd2dCQ0FCTmdJSUlBUW9BZ3doQlVHOENDRUdJQVVnQm1vaEJ5QUVLQUlJSVFoQktDRUpJQWdnQ1d3aENpQUhJQXBxSVF0QjJnQWhEQ0FMSUF3MkFnZ2dCQ2dDRENFTlFid0lJUTRnRFNBT2FpRVBJQVFvQWdnaEVFRW9JUkVnRUNBUmJDRVNJQThnRW1vaEUwSC9BQ0VVSUJNZ0ZEWUNHQ0FFS0FJTUlSVkJ2QWdoRmlBVklCWnFJUmNnQkNnQ0NDRVlRU2doR1NBWUlCbHNJUm9nRnlBYWFpRWJRUUFoSENBYklCdzJBZ3dnQkNnQ0RDRWRRYndJSVI0Z0hTQWVhaUVmSUFRb0FnZ2hJRUVvSVNFZ0lDQWhiQ0VpSUI4Z0ltb2hJMEdBd0FBaEpDQWpJQ1EyQWhRZ0JDZ0NEQ0VsUWJ3SUlTWWdKU0FtYWlFbklBUW9BZ2doS0VFb0lTa2dLQ0FwYkNFcUlDY2dLbW9oSzBFQUlTd2dMTEloTFNBcklDMDRBaVFQQyt3REFVRi9Jd0FoQVVFUUlRSWdBU0FDYXlFRElBTWtBQ0FESUFBMkFnd2dBeWdDRENFRUlBUW9BdnhsSVFVZ0F5QUZOZ0lJSUFNb0Fnd2hCaUFHS0FLWVppRUhJQWN0QUFRaENFSC9BU0VKSUFnZ0NYRWhDaUFESUFvMkFnUUNRQU5BSUFNb0FnZ2hDMEYvSVF3Z0N5QU1haUVOSUFNZ0RUWUNDQ0FMUlEwQklBTW9BZ3doRGtHOERTRVBJQTRnRDJvaEVDQURLQUlJSVJGQjdBRWhFaUFSSUJKc0lSTWdFQ0FUYWlFVUlCUXRBQUFoRlVIL0FTRVdJQlVnRm5FaEYwRUJJUmdnRnlFWklCZ2hHaUFaSUJwR0lSdEJBU0VjSUJzZ0hIRWhIUUpBSUIxRkRRQWdBeWdDRENFZVFid05JUjhnSGlBZmFpRWdJQU1vQWdnaElVSHNBU0VpSUNFZ0ltd2hJeUFnSUNOcUlTUWdKQzBBQVNFbFFmOEJJU1lnSlNBbWNTRW5JQU1vQWdRaEtDQW5JU2tnS0NFcUlDa2dLa1loSzBFQklTd2dLeUFzY1NFdElDMUZEUUFnQXlnQ0RDRXVRYndJSVM4Z0xpQXZhaUV3SUFNb0FnUWhNVUVvSVRJZ01TQXliQ0V6SURBZ00yb2hOQ0EwS0FJTUlUVUNRQUpBSURWRkRRQWdBeWdDRENFMlFid05JVGNnTmlBM2FpRTRJQU1vQWdnaE9VSHNBU0U2SURrZ09td2hPeUE0SUR0cUlUeEJBaUU5SUR3Z1BUb0FBQXdCQ3lBREtBSU1JVDRnQXlnQ0NDRS9JRDRnUHhCRUN3c01BQXNBQzBFUUlVQWdBeUJBYWlGQklFRWtBQThMdVFNQk8zOGpBQ0VCUVJBaEFpQUJJQUpySVFNZ0F5UUFJQU1nQURZQ0RDQURLQUlNSVFRZ0JDZ0MvR1VoQlNBRElBVTJBZ2dnQXlnQ0RDRUdJQVlvQXBobUlRY2dCeTBBQkNFSVFmOEJJUWtnQ0NBSmNTRUtJQU1nQ2pZQ0JBSkFBMEFnQXlnQ0NDRUxRWDhoRENBTElBeHFJUTBnQXlBTk5nSUlJQXRGRFFFZ0F5Z0NEQ0VPUWJ3TklROGdEaUFQYWlFUUlBTW9BZ2doRVVIc0FTRVNJQkVnRW13aEV5QVFJQk5xSVJRZ0ZDMEFBU0VWUWY4QklSWWdGU0FXY1NFWElBTW9BZ1FoR0NBWElSa2dHQ0VhSUJrZ0drWWhHMEVCSVJ3Z0d5QWNjU0VkQWtBZ0hVVU5BQ0FES0FJTUlSNUJ2QTBoSHlBZUlCOXFJU0FnQXlnQ0NDRWhRZXdCSVNJZ0lTQWliQ0VqSUNBZ0kyb2hKQ0FrTFFBQUlTVkIvd0VoSmlBbElDWnhJU2NnSjBVTkFDQURLQUlNSVNoQnZBMGhLU0FvSUNscUlTb2dBeWdDQ0NFclFld0JJU3dnS3lBc2JDRXRJQ29nTFdvaExpQXVMUUFBSVM5Qi93RWhNQ0F2SURCeElURkJCQ0V5SURFaE15QXlJVFFnTXlBMFJ5RTFRUUVoTmlBMUlEWnhJVGNnTjBVTkFDQURLQUlNSVRnZ0F5Z0NDQ0U1SURnZ09SQkZDd3dBQ3dBTFFSQWhPaUFESURwcUlUc2dPeVFBRHd1ZEF3RXNmeU1BSVFOQklDRUVJQU1nQkdzaEJTQUZKQUFnQlNBQU5nSWNJQVVnQVRZQ0dDQUZJQUkyQWhRZ0JTZ0NIQ0VHSUFZb0Fnd2hCMEVCSVFnZ0J5QUljU0VKQWtBQ1FDQUpSUTBBUVFFaENpQUZJQW8yQWhBTUFRdEJBaUVMSUFVZ0N6WUNFQXNDUUFOQUlBVW9BaFFoRENBTVJRMEJJQVVvQWhRaERTQUZJQTAyQWd3Z0JTZ0NEQ0VPSUFVb0Fod2hEeUFQS0FLb0NDRVFJQTRoRVNBUUlSSWdFU0FTU2lFVFFRRWhGQ0FUSUJSeElSVUNRQ0FWUlEwQUlBVW9BaHdoRmlBV0tBS29DQ0VYSUFVZ0Z6WUNEQXNnQlNnQ0hDRVlJQVVvQWd3aEdTQVlJQmtRU1NBRktBSWNJUm9nR2lnQ3BBZ2hHeUFGS0FJWUlSd2dIQ2dDQUNFZElBVW9BaHdoSGlBZUtBS3dDQ0VmSUFVb0FoQWhJQ0FGS0FJTUlTRWdJQ0FoYkNFaUlCMGdIeUFpSUJzUkJBQWdCU2dDSENFaklDTW9BaEFoSkNBRktBSU1JU1VnSkNBbGJDRW1JQVVvQWhnaEp5QW5LQUlBSVNnZ0tDQW1haUVwSUNjZ0tUWUNBQ0FGS0FJTUlTb2dCU2dDRkNFcklDc2dLbXNoTENBRklDdzJBaFFNQUFzQUMwRWdJUzBnQlNBdGFpRXVJQzRrQUE4TDV3SUJMbjhqQUNFQ1FSQWhBeUFDSUFOcklRUWdCQ1FBSUFRZ0FEWUNEQ0FFSUFFMkFnZ2dCQ2dDRENFRlFid05JUVlnQlNBR2FpRUhJQVFvQWdnaENFSHNBU0VKSUFnZ0NXd2hDaUFISUFwcUlRc2dDeWdDQkNFTUlBd3RBR1loRFVIL0FTRU9JQTBnRG5FaEQwSEFBQ0VRSUE4Z0VIRWhFUUpBQWtBZ0VVVU5BQ0FFS0FJTUlSSkJ2QTBoRXlBU0lCTnFJUlFnQkNnQ0NDRVZRZXdCSVJZZ0ZTQVdiQ0VYSUJRZ0Yyb2hHRUVESVJrZ0dDQVpOZ0xjQVNBRUtBSU1JUnBCdkEwaEd5QWFJQnRxSVJ3Z0JDZ0NDQ0VkUWV3QklSNGdIU0FlYkNFZklCd2dIMm9oSUVFRElTRWdJQ0FoT2dBQUlBUW9BZ3doSWlBRUtBSUlJU01nSWlBakVCd2FJQVFvQWd3aEpDQUVLQUlJSVNVZ0pDQWxFQjBNQVFzZ0JDZ0NEQ0VtUWJ3TklTY2dKaUFuYWlFb0lBUW9BZ2doS1VIc0FTRXFJQ2tnS213aEt5QW9JQ3RxSVN4QkF5RXRJQ3dnTFRvQUFBdEJFQ0V1SUFRZ0xtb2hMeUF2SkFBUEMxb0JDMzhqQUNFQ1FSQWhBeUFDSUFOcklRUWdCQ0FBTmdJTUlBUWdBVFlDQ0NBRUtBSU1JUVZCdkEwaEJpQUZJQVpxSVFjZ0JDZ0NDQ0VJUWV3QklRa2dDQ0FKYkNFS0lBY2dDbW9oQzBFRUlRd2dDeUFNT2dBQUR3dTVKUUd1Qkg4akFDRURRU0FoQkNBRElBUnJJUVVnQlNRQUlBVWdBRFlDSENBRklBRTJBaGdnQlNBQ05nSVVJQVVvQWh3aEJpQUdLQUtBWmlFSElBVW9BaGdoQ0NBSUxRQUVJUWxCL3dFaENpQUpJQXB4SVF0QkFTRU1JQXdnQzNRaERTQUhJQTF4SVE0Q1FBSkFBa0FnRGtVTkFDQUZLQUljSVE5Qm5BUWhFQ0FQSUJCcUlSRWdCU2dDSENFU1Fid0lJUk1nRWlBVGFpRVVJQVVvQWhnaEZTQVZMUUFFSVJaQi93RWhGeUFXSUJkeElSaEJLQ0VaSUJnZ0dXd2hHaUFVSUJwcUlSc2dHeWdDQUNFY1FRSWhIU0FjSUIxMElSNGdFU0FlYWlFZklCOG9BZ0FoSUVFRUlTRWdJQ0FoYWlFaUlBVW9BaGdoSXlBakxRQUdJU1JCL3dFaEpTQWtJQ1Z4SVNaQkFpRW5JQ1lnSjNRaEtDQWlJQ2hxSVNrZ0tTZ0NBQ0VxSUFVZ0tqWUNFRUVBSVNzZ0tpRXNJQ3NoTFNBc0lDMUhJUzVCQVNFdklDNGdMM0VoTUFKQUlEQU5BQ0FGS0FJY0lURWdNU2dDbkFRaE1rRUVJVE1nTWlBemFpRTBJQVVvQWhnaE5TQTFMUUFHSVRaQi93RWhOeUEySURkeElUaEJBaUU1SURnZ09YUWhPaUEwSURwcUlUc2dPeWdDQUNFOElBVWdQRFlDRUVFQUlUMGdQQ0UrSUQwaFB5QStJRDlISVVCQkFTRkJJRUFnUVhFaFFnSkFJRUlOQUF3RUN3c2dCU2dDRUNGRElFTW9BZ0FoUkVFQklVVWdSQ0ZHSUVVaFJ5QkdJRWRISVVoQkFTRkpJRWdnU1hFaFNnSkFJRXBGRFFBTElBVW9BaEFoU3lCTEtBSUVJVXdnVEMwQWFDRk5RUUFoVGtIL0FTRlBJRTBnVDNFaFVFSC9BU0ZSSUU0Z1VYRWhVaUJRSUZKSElWTkJBU0ZVSUZNZ1ZIRWhWUUpBQWtBZ1ZVVU5BQ0FGS0FJUUlWWWdWaWdDQkNGWElGY3RBR2doV0VFWUlWa2dXQ0JaZENGYUlGb2dXWFVoVzBHUWdnUWhYRUVDSVYwZ1d5QmRkQ0ZlSUZ3Z1htb2hYeUJmS0FJQUlXQWdCU2dDSENGaFFid05JV0lnWVNCaWFpRmpJQVVvQWhRaFpFSHNBU0ZsSUdRZ1pXd2haaUJqSUdacUlXY2daeUJnTmdJSURBRUxJQVVvQWhnaGFDQm9MUUFHSVdsQi93RWhhaUJwSUdweElXdEIvd0FoYkNCcklHeHhJVzFCa0lJRUlXNUJBaUZ2SUcwZ2IzUWhjQ0J1SUhCcUlYRWdjU2dDQUNGeUlBVW9BaHdoYzBHOERTRjBJSE1nZEdvaGRTQUZLQUlVSVhaQjdBRWhkeUIySUhkc0lYZ2dkU0I0YWlGNUlIa2djallDQ0FzZ0JTZ0NFQ0Y2SUhvb0FnUWhleUFGS0FJY0lYeEJ2QTBoZlNCOElIMXFJWDRnQlNnQ0ZDRi9RZXdCSVlBQklIOGdnQUZzSVlFQklINGdnUUZxSVlJQklJSUJJSHMyQWdRTUFRc2dCU2dDSENHREFVRzhDQ0dFQVNDREFTQ0VBV29oaFFFZ0JTZ0NHQ0dHQVNDR0FTMEFCQ0dIQVVIL0FTR0lBU0NIQVNDSUFYRWhpUUZCS0NHS0FTQ0pBU0NLQVd3aGl3RWdoUUVnaXdGcUlZd0JJSXdCS0FJRUlZMEJRWDhoamdFZ2pRRWhqd0VnamdFaGtBRWdqd0Vna0FGR0laRUJRUUVoa2dFZ2tRRWdrZ0Z4SVpNQkFrQUNRQ0NUQVVVTkFDQUZLQUljSVpRQklKUUJLQUtjQ0NHVkFTQUZJSlVCTmdJUURBRUxJQVVvQWh3aGxnRkJIQ0dYQVNDV0FTQ1hBV29obUFFZ0JTZ0NIQ0daQVVHOENDR2FBU0NaQVNDYUFXb2htd0VnQlNnQ0dDR2NBU0NjQVMwQUJDR2RBVUgvQVNHZUFTQ2RBU0NlQVhFaG53RkJLQ0dnQVNDZkFTQ2dBV3dob1FFZ213RWdvUUZxSWFJQklLSUJLQUlBSWFNQlFRSWhwQUVnb3dFZ3BBRjBJYVVCSUpnQklLVUJhaUdtQVNDbUFTZ0NBQ0duQVVFRUlhZ0JJS2NCSUtnQmFpR3BBU0FGS0FJY0lhb0JRYndJSWFzQklLb0JJS3NCYWlHc0FTQUZLQUlZSWEwQklLMEJMUUFFSWE0QlFmOEJJYThCSUs0QklLOEJjU0d3QVVFb0liRUJJTEFCSUxFQmJDR3lBU0NzQVNDeUFXb2hzd0Vnc3dFb0FnUWh0QUZCQWlHMUFTQzBBU0MxQVhRaHRnRWdxUUVndGdGcUliY0JJTGNCS0FJQUliZ0JJQVVndUFFMkFoQkJBQ0c1QVNDNEFTRzZBU0M1QVNHN0FTQzZBU0M3QVVjaHZBRkJBU0c5QVNDOEFTQzlBWEVodmdFQ1FDQytBUTBBSUFVb0Fod2h2d0VndndFb0Fod2h3QUZCQkNIQkFTREFBU0RCQVdvaHdnRWdCU2dDSENIREFVRzhDQ0hFQVNEREFTREVBV29oeFFFZ0JTZ0NHQ0hHQVNER0FTMEFCQ0hIQVVIL0FTSElBU0RIQVNESUFYRWh5UUZCS0NIS0FTREpBU0RLQVd3aHl3RWd4UUVneXdGcUljd0JJTXdCS0FJRUljMEJRUUloemdFZ3pRRWd6Z0YwSWM4QklNSUJJTThCYWlIUUFTRFFBU2dDQUNIUkFTQUZJTkVCTmdJUVFRQWgwZ0VnMFFFaDB3RWcwZ0VoMUFFZzB3RWcxQUZISWRVQlFRRWgxZ0VnMVFFZzFnRnhJZGNCQWtBZzF3RU5BQXdFQ3dzTElBVW9BaEFoMkFFZzJBRW9BZ1FoMlFFZzJRRXRBR2doMmdGQkFDSGJBVUgvQVNIY0FTRGFBU0RjQVhFaDNRRkIvd0VoM2dFZzJ3RWczZ0Z4SWQ4QklOMEJJTjhCUnlIZ0FVRUJJZUVCSU9BQklPRUJjU0hpQVFKQUFrQWc0Z0ZGRFFBZ0JTZ0NFQ0hqQVNEakFTZ0NCQ0hrQVNEa0FTMEFhQ0hsQVVFWUllWUJJT1VCSU9ZQmRDSG5BU0RuQVNEbUFYVWg2QUZCa0lJRUlla0JRUUloNmdFZzZBRWc2Z0YwSWVzQklPa0JJT3NCYWlIc0FTRHNBU2dDQUNIdEFTQUZLQUljSWU0QlFid05JZThCSU80QklPOEJhaUh3QVNBRktBSVVJZkVCUWV3QklmSUJJUEVCSVBJQmJDSHpBU0R3QVNEekFXb2g5QUVnOUFFZzdRRTJBZ2dNQVFzZ0JTZ0NHQ0gxQVNEMUFTMEFCaUgyQVVIL0FTSDNBU0QyQVNEM0FYRWgrQUZCL3dBaCtRRWcrQUVnK1FGeElmb0JRWkNDQkNIN0FVRUNJZndCSVBvQklQd0JkQ0g5QVNEN0FTRDlBV29oL2dFZy9nRW9BZ0FoL3dFZ0JTZ0NIQ0dBQWtHOERTR0JBaUNBQWlDQkFtb2hnZ0lnQlNnQ0ZDR0RBa0hzQVNHRUFpQ0RBaUNFQW13aGhRSWdnZ0lnaFFKcUlZWUNJSVlDSVA4Qk5nSUlDeUFGS0FJY0lZY0NJQVVvQWhRaGlBSWdCU2dDRUNHSkFpQUZLQUlZSVlvQ0lJb0NMUUFISVlzQ1FmOEJJWXdDSUlzQ0lJd0NjU0dOQWlDSEFpQ0lBaUNKQWlDTkFoQkxDeUFGS0FJY0lZNENRYndOSVk4Q0lJNENJSThDYWlHUUFpQUZLQUlVSVpFQ1Fld0JJWklDSUpFQ0lKSUNiQ0dUQWlDUUFpQ1RBbW9obEFKQkFTR1ZBaUNVQWlDVkFqb0FBQ0FGS0FJWUlaWUNJSllDTFFBRUlaY0NJQVVvQWh3aG1BSkJ2QTBobVFJZ21BSWdtUUpxSVpvQ0lBVW9BaFFobXdKQjdBRWhuQUlnbXdJZ25BSnNJWjBDSUpvQ0lKMENhaUdlQWlDZUFpQ1hBam9BQVNBRktBSVlJWjhDSUo4Q0xRQUdJYUFDSUFVb0Fod2hvUUpCdkEwaG9nSWdvUUlnb2dKcUlhTUNJQVVvQWhRaHBBSkI3QUVocFFJZ3BBSWdwUUpzSWFZQ0lLTUNJS1lDYWlHbkFpQ25BaUNnQWpvQUFpQUZLQUlZSWFnQ0lLZ0NMUUFISWFrQ0lBVW9BaHdocWdKQnZBMGhxd0lncWdJZ3F3SnFJYXdDSUFVb0FoUWhyUUpCN0FFaHJnSWdyUUlncmdKc0lhOENJS3dDSUs4Q2FpR3dBaUN3QWlDcEFqb0FBeUFGS0FJY0liRUNRYndOSWJJQ0lMRUNJTElDYWlHekFpQUZLQUlVSWJRQ1Fld0JJYlVDSUxRQ0lMVUNiQ0cyQWlDekFpQzJBbW9odHdKQkFDRzRBaUMzQWlDNEFqWUNFQ0FGS0FJY0lia0NRYndOSWJvQ0lMa0NJTG9DYWlHN0FpQUZLQUlVSWJ3Q1Fld0JJYjBDSUx3Q0lMMENiQ0crQWlDN0FpQytBbW9odndKQkFDSEFBaUMvQWlEQUFqWUNGQ0FGS0FJY0ljRUNRYndOSWNJQ0lNRUNJTUlDYWlIREFpQUZLQUlVSWNRQ1Fld0JJY1VDSU1RQ0lNVUNiQ0hHQWlEREFpREdBbW9oeHdKQkFDSElBaURIQWlESUFqWUNMQ0FGS0FJY0lja0NRYndOSWNvQ0lNa0NJTW9DYWlITEFpQUZLQUlVSWN3Q1Fld0JJYzBDSU13Q0lNMENiQ0hPQWlETEFpRE9BbW9oendJZ3p3SW9BZ1FoMEFJZzBBSW9BbGdoMFFJZ0JTZ0NIQ0hTQWtHOERTSFRBaURTQWlEVEFtb2gxQUlnQlNnQ0ZDSFZBa0hzQVNIV0FpRFZBaURXQW13aDF3SWcxQUlnMXdKcUlkZ0NJTmdDSU5FQ05nSXdJQVVvQWh3aDJRSkJ2QTBoMmdJZzJRSWcyZ0pxSWRzQ0lBVW9BaFFoM0FKQjdBRWgzUUlnM0FJZzNRSnNJZDRDSU5zQ0lONENhaUhmQWlEZkFpZ0NCQ0hnQWlEZ0FpZ0NWQ0hoQWlBRktBSWNJZUlDUWJ3TkllTUNJT0lDSU9NQ2FpSGtBaUFGS0FJVUllVUNRZXdCSWVZQ0lPVUNJT1lDYkNIbkFpRGtBaURuQW1vaDZBSWc2QUlnNFFJMkFpUWdCU2dDSENIcEFrRzhEU0hxQWlEcEFpRHFBbW9oNndJZ0JTZ0NGQ0hzQWtIc0FTSHRBaURzQWlEdEFtd2g3Z0lnNndJZzdnSnFJZThDUVFBaDhBSWc3d0lnOEFJMkFpZ2dCU2dDSENIeEFrRzhEU0h5QWlEeEFpRHlBbW9oOHdJZ0JTZ0NGQ0gwQWtIc0FTSDFBaUQwQWlEMUFtd2g5Z0lnOHdJZzlnSnFJZmNDSVBjQ0tBSUVJZmdDSVBnQ0tBSmNJZmtDSUFVb0Fod2grZ0pCdkEwaCt3SWcrZ0lnK3dKcUlmd0NJQVVvQWhRaC9RSkI3QUVoL2dJZy9RSWcvZ0pzSWY4Q0lQd0NJUDhDYWlHQUF5Q0FBeUQ1QWpZQ05DQUZLQUljSVlFRFFid05JWUlESUlFRElJSURhaUdEQXlBRktBSVVJWVFEUWV3QklZVURJSVFESUlVRGJDR0dBeUNEQXlDR0Eyb2hod05CQUNHSUF5Q0hBeUNJQXpZQ09DQUZLQUljSVlrRFFid05JWW9ESUlrRElJb0RhaUdMQXlBRktBSVVJWXdEUWV3QklZMERJSXdESUkwRGJDR09BeUNMQXlDT0Eyb2hqd01nandNb0FnUWhrQU1na0FNb0FtQWhrUU1nQlNnQ0hDR1NBMEc4RFNHVEF5Q1NBeUNUQTJvaGxBTWdCU2dDRkNHVkEwSHNBU0dXQXlDVkF5Q1dBMndobHdNZ2xBTWdsd05xSVpnRElKZ0RJSkVETmdMVUFTQUZLQUljSVprRFFid05JWm9ESUprRElKb0RhaUdiQXlBRktBSVVJWndEUWV3QklaMERJSndESUowRGJDR2VBeUNiQXlDZUEyb2hud05CQUNHZ0F5Q2ZBeUNnQXpZQzBBRWdCU2dDSENHaEEwRzhEU0dpQXlDaEF5Q2lBMm9ob3dNZ0JTZ0NGQ0drQTBIc0FTR2xBeUNrQXlDbEEyd2hwZ01nb3dNZ3BnTnFJYWNEUVFBaHFBTWdwd01ncUFNMkF0Z0JRUUFocVFNZ0JTQ3BBellDREFKQUEwQWdCU2dDRENHcUEwRWdJYXNESUtvRElhd0RJS3NESWEwRElLd0RJSzBEU0NHdUEwRUJJYThESUs0RElLOERjU0d3QXlDd0EwVU5BU0FGS0FJY0liRURRYndOSWJJRElMRURJTElEYWlHekF5QUZLQUlVSWJRRFFld0JJYlVESUxRRElMVURiQ0cyQXlDekF5QzJBMm9odHdOQjBBQWh1QU1ndHdNZ3VBTnFJYmtESUFVb0Fnd2h1Z05CQWlHN0F5QzZBeUM3QTNRaHZBTWd1UU1ndkFOcUliMERRUUFodmdNZ3ZRTWd2Z00yQWdBZ0JTZ0NEQ0cvQTBFQkljQURJTDhESU1BRGFpSEJBeUFGSU1FRE5nSU1EQUFMQUFzZ0JTZ0NIQ0hDQTBHOENDSERBeURDQXlEREEyb2h4QU1nQlNnQ0dDSEZBeURGQXkwQUJDSEdBMEgvQVNISEF5REdBeURIQTNFaHlBTkJLQ0hKQXlESUF5REpBMndoeWdNZ3hBTWd5Z05xSWNzRElNc0RLQUlRSWN3RFFYOGh6UU1nekFNaHpnTWd6UU1oendNZ3pnTWd6d05ISWRBRFFRRWgwUU1nMEFNZzBRTnhJZElEQWtBQ1FDRFNBMFVOQUNBRktBSWNJZE1EUWJ3SUlkUURJTk1ESU5RRGFpSFZBeUFGS0FJWUlkWURJTllETFFBRUlkY0RRZjhCSWRnRElOY0RJTmdEY1NIWkEwRW9JZG9ESU5rRElOb0RiQ0hiQXlEVkF5RGJBMm9oM0FNZzNBTW9BaEFoM1FNZ0JTZ0NIQ0hlQTBHOERTSGZBeURlQXlEZkEyb2g0QU1nQlNnQ0ZDSGhBMEhzQVNIaUF5RGhBeURpQTJ3aDR3TWc0QU1nNHdOcUllUURJT1FESU4wRE5nTGtBUXdCQ3lBRktBSWNJZVVEUWJ3TkllWURJT1VESU9ZRGFpSG5BeUFGS0FJVUllZ0RRZXdCSWVrRElPZ0RJT2tEYkNIcUF5RG5BeURxQTJvaDZ3TWc2d01vQWdRaDdBTWc3QU10QUdjaDdRTkJHQ0h1QXlEdEF5RHVBM1FoN3dNZzd3TWc3Z04xSWZBRElBVW9BaHdoOFFOQnZBMGg4Z01nOFFNZzhnTnFJZk1ESUFVb0FoUWg5QU5CN0FFaDlRTWc5QU1nOVFOc0lmWURJUE1ESVBZRGFpSDNBeUQzQXlEd0F6WUM1QUVMSUFVb0Fod2grQU1nQlNnQ0ZDSDVBeUQ0QXlENUF4QklJQVVvQWh3aCtnTWdCU2dDRkNIN0F5RDZBeUQ3QXhCSElBVW9BaHdoL0FOQnZBMGgvUU1nL0FNZy9RTnFJZjRESUFVb0FoUWgvd05CN0FFaGdBUWcvd01nZ0FSc0lZRUVJUDRESUlFRWFpR0NCQ0NDQkNnQ0JDR0RCQ0NEQkMwQVppR0VCRUgvQVNHRkJDQ0VCQ0NGQkhFaGhnUkJ3QUFoaHdRZ2hnUWdod1J4SVlnRUFrQWdpQVJGRFFBZ0JTZ0NIQ0dKQkVHOERTR0tCQ0NKQkNDS0JHb2hpd1FnQlNnQ0ZDR01CRUhzQVNHTkJDQ01CQ0NOQkd3aGpnUWdpd1FnamdScUlZOEVRUUFoa0FRZ2p3UWdrQVEyQXR3QklBVW9BaHdoa1FSQnZBMGhrZ1Fna1FRZ2tnUnFJWk1FSUFVb0FoUWhsQVJCN0FFaGxRUWdsQVFnbFFSc0laWUVJSk1FSUpZRWFpR1hCRUVBSVpnRUlKY0VJSmdFTmdJWUlBVW9BaHdobVFSQnZBMGhtZ1FnbVFRZ21nUnFJWnNFSUFVb0FoUWhuQVJCN0FFaG5RUWduQVFnblFSc0laNEVJSnNFSUo0RWFpR2ZCRUVBSWFBRUlKOEVJS0FFTmdMZ0FTQUZLQUljSWFFRUlBVW9BaFFob2dRZ29RUWdvZ1FRSEJvZ0JTZ0NIQ0dqQkNBRktBSVVJYVFFSUtNRUlLUUVFQjBNQVFzZ0JTZ0NIQ0dsQkVHOERTR21CQ0NsQkNDbUJHb2hwd1FnQlNnQ0ZDR29CRUhzQVNHcEJDQ29CQ0NwQkd3aHFnUWdwd1FncWdScUlhc0VRUUFockFRZ3F3UWdyQVEyQWlBZ0JTZ0NIQ0d0QkNBRktBSVVJYTRFSUswRUlLNEVFQjBMUVNBaHJ3UWdCU0N2QkdvaHNBUWdzQVFrQUE4THVSb0V2QUovR1h3VmZSNStJd0FoQWtHd0FTRURJQUlnQTJzaEJDQUVKQUFnQkNBQU5nS3NBU0FFSUFFMkFxZ0JJQVFvQXF3QklRVkJ2QTBoQmlBRklBWnFJUWNnQkNnQ3FBRWhDRUhzQVNFSklBZ2dDV3doQ2lBSElBcHFJUXNnQ3kwQUF5RU1RZjhCSVEwZ0RDQU5jU0VPSUFRb0Fxd0JJUTlCdkFnaEVDQVBJQkJxSVJFZ0JDZ0NyQUVoRWtHOERTRVRJQklnRTJvaEZDQUVLQUtvQVNFVlFld0JJUllnRlNBV2JDRVhJQlFnRjJvaEdDQVlMUUFCSVJsQi93RWhHaUFaSUJweElSdEJLQ0VjSUJzZ0hHd2hIU0FSSUIxcUlSNGdIaWdDQ0NFZklBNGdIMndoSUNBRUtBS3NBU0VoUWJ3SUlTSWdJU0FpYWlFaklBUW9BcXdCSVNSQnZBMGhKU0FrSUNWcUlTWWdCQ2dDcUFFaEowSHNBU0VvSUNjZ0tHd2hLU0FtSUNscUlTb2dLaTBBQVNFclFmOEJJU3dnS3lBc2NTRXRRU2doTGlBdElDNXNJUzhnSXlBdmFpRXdJREFvQWhnaE1TQWdJREZzSVRJZ0JDQXlOZ0trQVNBRUtBS3NBU0V6SURNb0Fnd2hORUVCSVRVZ05DQTFjU0UyQWtBQ1FDQTJEUUFnQkNnQ3JBRWhOMEc4RFNFNElEY2dPR29oT1NBRUtBS29BU0U2UWV3QklUc2dPaUE3YkNFOElEa2dQR29oUFNBOUtBTGtBU0UrUVR3aFB5QStJVUFnUHlGQklFQWdRVW9oUWtFQklVTWdRaUJEY1NGRUFrQUNRQ0JFUlEwQUlBUW9BcXdCSVVWQnZBMGhSaUJGSUVacUlVY2dCQ2dDcUFFaFNFSHNBU0ZKSUVnZ1NXd2hTaUJISUVwcUlVc2dTeWdDNUFFaFRFSEVBQ0ZOSUV3aFRpQk5JVThnVGlCUFNDRlFRUUVoVVNCUUlGRnhJVklnVWtVTkFDQUVLQUtzQVNGVElBUW9BcWdCSVZSQjdBRWhWU0JVSUZWc0lWWWdVeUJXYWlGWFFhUVBJVmdnVnlCWWFpRlpRUU1oV2lCWklGbzJBZ0FnQkNnQ3BBRWhXeUJidHlHK0FpQUVLQUtzQVNGY0lBUW9BcWdCSVYwZ1hTQlZiQ0ZlSUZ3Z1htb2hYMEhBRFNGZ0lGOGdZR29oWVNCaEtBSUFJV0lnWWlvQ1RDSFhBaURYQXJzaHZ3SWd2Z0lndndLaUljQUNJRndxQWhRaDJBSWcyQUs3SWNFQ0lNQUNJTUVDb2lIQ0FrRXdJV01nQkNCamFpRmtJR1Fnd2dJUXRBRkJDQ0ZsUVRBaFppQUVJR1pxSVdjZ1p5QmxhaUZvSUdncEF3QWg3QUlnQkNrRE1DSHRBa0tBZ0lDQWdJQ0E5VDhoN2dKQ0FDSHZBa0VnSVdrZ0JDQnBhaUZxSUdvZzdRSWc3QUlnN3dJZzdnSVF1QUZCSUNGcklBUWdhMm9oYkNCc0lHVnFJVzBnYlNrREFDSHdBaUFFS1FNZ0lmRUNJUEVDSVBBQ0VMa0JJZGtDSUFRb0Fxd0JJVzVCdkEwaGJ5QnVJRzlxSVhBZ0JDZ0NxQUVoY1VIc0FTRnlJSEVnY213aGN5QndJSE5xSVhRZ2RDRFpBamdDUkF3QkN5QUVLQUtzQVNGMVFid05JWFlnZFNCMmFpRjNJQVFvQXFnQklYaEI3QUVoZVNCNElIbHNJWG9nZHlCNmFpRjdJSHNvQXVRQklYeEJCU0Y5SUh3aGZpQjlJWDhnZmlCL1NDR0FBVUVCSVlFQklJQUJJSUVCY1NHQ0FRSkFBa0FnZ2dGRkRRQWdCQ2dDckFFaGd3RWdCQ2dDcUFFaGhBRkI3QUVoaFFFZ2hBRWdoUUZzSVlZQklJTUJJSVlCYWlHSEFVR2tEeUdJQVNDSEFTQ0lBV29oaVFGQkFTR0tBU0NKQVNDS0FUWUNBQ0FFS0FLa0FTR0xBU0NMQWJjaHd3SWdCQ2dDckFFaGpBRWdCQ2dDcUFFaGpRRWdqUUVnaFFGc0lZNEJJSXdCSUk0QmFpR1BBVUhBRFNHUUFTQ1BBU0NRQVdvaGtRRWdrUUVvQWdBaGtnRWdrZ0VxQWt3aDJnSWcyZ0s3SWNRQ0lNTUNJTVFDb2lIRkFpQ01BU29DRkNIYkFpRGJBcnNoeGdJZ3hRSWd4Z0tpSWNjQ1FkQUFJWk1CSUFRZ2t3RnFJWlFCSUpRQklNY0NFTFFCUVFnaGxRRkIwQUFobGdFZ0JDQ1dBV29obHdFZ2x3RWdsUUZxSVpnQklKZ0JLUU1BSWZJQ0lBUXBBMUFoOHdKQ2dJQ0FnSUNBd1BVL0lmUUNRZ0FoOVFKQndBQWhtUUVnQkNDWkFXb2htZ0VnbWdFZzh3SWc4Z0lnOVFJZzlBSVF1QUZCd0FBaG13RWdCQ0NiQVdvaG5BRWduQUVnbFFGcUlaMEJJSjBCS1FNQUlmWUNJQVFwQTBBaDl3SWc5d0lnOWdJUXVRRWgzQUlnQkNnQ3JBRWhuZ0ZCdkEwaG53RWduZ0VnbndGcUlhQUJJQVFvQXFnQklhRUJRZXdCSWFJQklLRUJJS0lCYkNHakFTQ2dBU0NqQVdvaHBBRWdwQUVnM0FJNEFrUU1BUXNnQkNnQ3JBRWhwUUZCdkEwaHBnRWdwUUVncGdGcUlhY0JJQVFvQXFnQklhZ0JRZXdCSWFrQklLZ0JJS2tCYkNHcUFTQ25BU0NxQVdvaHF3RWdxd0VvQXVRQklhd0JRZnNBSWEwQklLd0JJYTRCSUswQklhOEJJSzRCSUs4QlNpR3dBVUVCSWJFQklMQUJJTEVCY1NHeUFRSkFBa0Fnc2dGRkRRQWdCQ2dDckFFaHN3RWdCQ2dDcUFFaHRBRkI3QUVodFFFZ3RBRWd0UUZzSWJZQklMTUJJTFlCYWlHM0FVR2tEeUc0QVNDM0FTQzRBV29odVFGQkFpRzZBU0M1QVNDNkFUWUNBQ0FFS0FLa0FTRzdBU0M3QWJjaHlBSWdCQ2dDckFFaHZBRWdCQ2dDcUFFaHZRRWd2UUVndFFGc0liNEJJTHdCSUw0QmFpRy9BVUhBRFNIQUFTQy9BU0RBQVdvaHdRRWd3UUVvQWdBaHdnRWd3Z0VxQWt3aDNRSWczUUs3SWNrQ0lNZ0NJTWtDb2lIS0FpQzhBU29DRkNIZUFpRGVBcnNoeXdJZ3lnSWd5d0tpSWN3Q1FmQUFJY01CSUFRZ3d3RnFJY1FCSU1RQklNd0NFTFFCUVFnaHhRRkI4QUFoeGdFZ0JDREdBV29oeHdFZ3h3RWd4UUZxSWNnQklNZ0JLUU1BSWZnQ0lBUXBBM0FoK1FKQ2dJQ0FnSUNBd1BVL0lmb0NRZ0FoK3dKQjRBQWh5UUVnQkNESkFXb2h5Z0VneWdFZytRSWcrQUlnK3dJZytnSVF1QUZCNEFBaHl3RWdCQ0RMQVdvaHpBRWd6QUVneFFGcUljMEJJTTBCS1FNQUlmd0NJQVFwQTJBaC9RSWcvUUlnL0FJUXVRRWgzd0lnQkNnQ3JBRWh6Z0ZCdkEwaHp3RWd6Z0VnendGcUlkQUJJQVFvQXFnQklkRUJRZXdCSWRJQklORUJJTklCYkNIVEFTRFFBU0RUQVdvaDFBRWcxQUVnM3dJNEFrUU1BUXNnQkNnQ3JBRWgxUUVnQkNnQ3FBRWgxZ0ZCN0FFaDF3RWcxZ0VnMXdGc0lkZ0JJTlVCSU5nQmFpSFpBVUdrRHlIYUFTRFpBU0RhQVdvaDJ3RkJBQ0hjQVNEYkFTRGNBVFlDQUNBRUtBS2tBU0hkQVNEZEFiY2h6UUlnQkNnQ3JBRWgzZ0VnQkNnQ3FBRWgzd0VnM3dFZzF3RnNJZUFCSU40QklPQUJhaUhoQVVIQURTSGlBU0RoQVNEaUFXb2g0d0VnNHdFb0FnQWg1QUVnNUFFcUFrd2g0QUlnNEFLN0ljNENJTTBDSU00Q29pSFBBaURlQVNvQ0ZDSGhBaURoQXJzaDBBSWd6d0lnMEFLaUlkRUNRWkFCSWVVQklBUWc1UUZxSWVZQklPWUJJTkVDRUxRQlFRZ2g1d0ZCa0FFaDZBRWdCQ0RvQVdvaDZRRWc2UUVnNXdGcUllb0JJT29CS1FNQUlmNENJQVFwQTVBQklmOENRb0NBZ0lDQWdJRHlQeUdBQTBJQUlZRURRWUFCSWVzQklBUWc2d0ZxSWV3QklPd0JJUDhDSVA0Q0lJRURJSUFERUxnQlFZQUJJZTBCSUFRZzdRRnFJZTRCSU80QklPY0JhaUh2QVNEdkFTa0RBQ0dDQXlBRUtRT0FBU0dEQXlDREF5Q0NBeEM1QVNIaUFpQUVLQUtzQVNId0FVRzhEU0h4QVNEd0FTRHhBV29oOGdFZ0JDZ0NxQUVoOHdGQjdBRWg5QUVnOHdFZzlBRnNJZlVCSVBJQklQVUJhaUgyQVNEMkFTRGlBamdDUkNBRUtBS3NBU0gzQVVHOERTSDRBU0QzQVNENEFXb2grUUVnQkNnQ3FBRWgrZ0ZCN0FFaCt3RWcrZ0VnK3dGc0lmd0JJUGtCSVB3QmFpSDlBU0Q5QVNvQ1JDSGpBaUFFS0FLc0FTSCtBVUc4RFNIL0FTRCtBU0QvQVdvaGdBSWdCQ2dDcUFFaGdRSkI3QUVoZ2dJZ2dRSWdnZ0pzSVlNQ0lJQUNJSU1DYWlHRUFpQ0VBaWdDNUFFaGhRSWdoUUt5SWVRQ0lPTUNJT1FDbENIbEFpQUVLQUtzQVNHR0FrRzhEU0dIQWlDR0FpQ0hBbW9oaUFJZ0JDZ0NxQUVoaVFKQjdBRWhpZ0lnaVFJZ2lnSnNJWXNDSUlnQ0lJc0NhaUdNQWlDTUFpRGxBamdDU0NBRUtBS3NBU0dOQWtHOERTR09BaUNOQWlDT0Ftb2hqd0lnQkNnQ3FBRWhrQUpCN0FFaGtRSWdrQUlna1FKc0laSUNJSThDSUpJQ2FpR1RBaUNUQWlnQzVBRWhsQUpCL3dBaGxRSWdsUUlnbEFKcklaWUNJSllDc2lIbUFpQUVLQUtzQVNHWEFrRzhEU0dZQWlDWEFpQ1lBbW9obVFJZ0JDZ0NxQUVobWdKQjdBRWhtd0lnbWdJZ213SnNJWndDSUprQ0lKd0NhaUdkQWlDZEFpb0NSQ0huQWlEbkFpRG1BcFFoNkFJZ25RSWc2QUk0QWtRTEN3c01BUXNnQkNnQ3JBRWhuZ0lnQkNnQ3FBRWhud0pCN0FFaG9BSWdud0lnb0FKc0lhRUNJSjRDSUtFQ2FpR2lBa0drRHlHakFpQ2lBaUNqQW1vaHBBSkJBeUdsQWlDa0FpQ2xBallDQUNBRUtBS2tBU0dtQWlDbUFyY2gwZ0lnQkNnQ3JBRWhwd0lnQkNnQ3FBRWhxQUlncUFJZ29BSnNJYWtDSUtjQ0lLa0NhaUdxQWtIQURTR3JBaUNxQWlDckFtb2hyQUlnckFJb0FnQWhyUUlnclFJcUFrd2g2UUlnNlFLN0lkTUNJTklDSU5NQ29pSFVBaUNuQWlvQ0ZDSHFBaURxQXJzaDFRSWcxQUlnMVFLaUlkWUNRUkFocmdJZ0JDQ3VBbW9ocndJZ3J3SWcxZ0lRdEFGQkNDR3dBa0VRSWJFQ0lBUWdzUUpxSWJJQ0lMSUNJTEFDYWlHekFpQ3pBaWtEQUNHRUF5QUVLUU1RSVlVRFFvQ0FnSUNBZ0lEMVB5R0dBMElBSVljRElBUWdoUU1naEFNZ2h3TWdoZ01RdUFFZ0JDQ3dBbW9odEFJZ3RBSXBBd0FoaUFNZ0JDa0RBQ0dKQXlDSkF5Q0lBeEM1QVNIckFpQUVLQUtzQVNHMUFrRzhEU0cyQWlDMUFpQzJBbW9odHdJZ0JDZ0NxQUVodUFKQjdBRWh1UUlndUFJZ3VRSnNJYm9DSUxjQ0lMb0NhaUc3QWlDN0FpRHJBamdDUkF0QnNBRWh2QUlnQkNDOEFtb2h2UUlndlFJa0FBOEx4eFFEbkFKL0JuMGNmQ01BSVFKQklDRURJQUlnQTJzaEJDQUVJQUEyQWh3Z0JDQUJOZ0lZSUFRb0Fod2hCVUc4RFNFR0lBVWdCbW9oQnlBRUtBSVlJUWhCN0FFaENTQUlJQWxzSVFvZ0J5QUthaUVMSUFzb0FoUWhERUVBSVEwZ0RDRU9JQTBoRHlBT0lBOUlJUkJCQVNFUklCQWdFWEVoRWlBRUlCSTJBaFFnQkNnQ0hDRVRRYndJSVJRZ0V5QVVhaUVWSUFRb0Fod2hGa0c4RFNFWElCWWdGMm9oR0NBRUtBSVlJUmxCN0FFaEdpQVpJQnBzSVJzZ0dDQWJhaUVjSUJ3dEFBRWhIVUgvQVNFZUlCMGdIbkVoSDBFb0lTQWdIeUFnYkNFaElCVWdJV29oSWlBaUtBSVVJU01nQkNBak5nSVFJQVFvQWh3aEpFRzhEU0VsSUNRZ0pXb2hKaUFFS0FJWUlTZEI3QUVoS0NBbklDaHNJU2tnSmlBcGFpRXFJQ29vQWdRaEt5QXJLQUlNSVN3Q1FBSkFJQ3dOQUF3QkN5QUVLQUljSVMxQnZBMGhMaUF0SUM1cUlTOGdCQ2dDR0NFd1Fld0JJVEVnTUNBeGJDRXlJQzhnTW1vaE15QXpLQUxVQVNFMEFrQWdORVVOQUVFZ0lUVWdCQ0ExTmdJRUFrQURRQ0FFS0FJRUlUWkJmeUUzSURZZ04yb2hPQ0FFSURnMkFnUWdOa1VOQVNBRUtBSWNJVGxCdkEwaE9pQTVJRHBxSVRzZ0JDZ0NHQ0U4UWV3QklUMGdQQ0E5YkNFK0lEc2dQbW9oUDBIUUFDRkFJRDhnUUdvaFFTQUVLQUlFSVVKQkFpRkRJRUlnUTNRaFJDQkJJRVJxSVVWQkFDRkdJRVVnUmpZQ0FBd0FDd0FMQ3lBRUtBSVFJVWRCZ01BQUlVZ2dSeUZKSUVnaFNpQkpJRXBHSVV0QkFTRk1JRXNnVEhFaFRRSkFBa0FDUUNCTkRRQWdCQ2dDRUNGT1FRQWhUeUJPSVZBZ1R5RlJJRkFnVVVnaFVrRUJJVk1nVWlCVGNTRlVJRlFOQUNBRUtBSVFJVlZCLy84QUlWWWdWU0ZYSUZZaFdDQlhJRmhLSVZsQkFTRmFJRmtnV25FaFd5QmJSUTBCQ3lBRUtBSWNJVnhCdkEwaFhTQmNJRjFxSVY0Z0JDZ0NHQ0ZmUWV3QklXQWdYeUJnYkNGaElGNGdZV29oWWlCaUtBSUlJV01nQkNnQ0hDRmtRYndOSVdVZ1pDQmxhaUZtSUFRb0FoZ2haMEhzQVNGb0lHY2dhR3doYVNCbUlHbHFJV29nYWlCak5nSU1EQUVMSUFRb0FoQWhhMEdBd0FBaGJDQnJJR3hySVcwZ0JDQnROZ0lRSUFRb0Fod2hia0c4Q0NGdklHNGdiMm9oY0NBRUtBSWNJWEZCdkEwaGNpQnhJSEpxSVhNZ0JDZ0NHQ0YwUWV3QklYVWdkQ0IxYkNGMklITWdkbW9oZHlCM0xRQUJJWGhCL3dFaGVTQjRJSGx4SVhwQktDRjdJSG9nZTJ3aGZDQndJSHhxSVgwZ2ZTb0NKQ0dlQWtFQUlYNGdmcklobndJZ25nSWdud0pjSVg5QkFTR0FBU0IvSUlBQmNTR0JBUUpBSUlFQkRRQWdCQ2dDRUNHQ0FTQUVLQUljSVlNQlFid0lJWVFCSUlNQklJUUJhaUdGQVNBRUtBSWNJWVlCUWJ3TklZY0JJSVlCSUljQmFpR0lBU0FFS0FJWUlZa0JRZXdCSVlvQklJa0JJSW9CYkNHTEFTQ0lBU0NMQVdvaGpBRWdqQUV0QUFFaGpRRkIvd0VoamdFZ2pRRWdqZ0Z4SVk4QlFTZ2hrQUVnandFZ2tBRnNJWkVCSUlVQklKRUJhaUdTQVNDU0FTZ0NJQ0dUQVNDQ0FTQ1RBV3dobEFFZ0JDQ1VBVFlDQUNBRUtBSVFJWlVCUVFBaGxnRWdsUUVobHdFZ2xnRWhtQUVnbHdFZ21BRklJWmtCUVFFaG1nRWdtUUVnbWdGeElac0JBa0FnbXdGRkRRQWdCQ2dDQUNHY0FVRUFJWjBCSUowQklKd0JheUdlQVNBRUlKNEJOZ0lBQ3lBRUtBSUFJWjhCUVFJaG9BRWdud0Vnb0FGMklhRUJRZmdQSWFJQklLRUJJS0lCY1NHakFVR1FqZ1FocEFFZ3BBRWdvd0ZxSWFVQklLVUJLd01BSWFRQ1FRMGhwZ0VnbndFZ3BnRjFJYWNCUVFNaHFBRWdwd0VncUFGMElha0JRWkNlQkNHcUFTQ3FBU0NwQVdvaHF3RWdxd0VyQXdBaHBRSWdwQUlncFFLaUlhWUNJS1lDdGlHZ0FpQUVLQUljSWF3QlFid0lJYTBCSUt3QklLMEJhaUd1QVNBRUtBSWNJYThCUWJ3TkliQUJJSzhCSUxBQmFpR3hBU0FFS0FJWUliSUJRZXdCSWJNQklMSUJJTE1CYkNHMEFTQ3hBU0MwQVdvaHRRRWd0UUV0QUFFaHRnRkIvd0VodHdFZ3RnRWd0d0Z4SWJnQlFTZ2h1UUVndUFFZ3VRRnNJYm9CSUs0QklMb0JhaUc3QVNDN0FTQ2dBamdDSkFzZ0JDZ0NFQ0c4QVVFQUliMEJJTHdCSWI0QklMMEJJYjhCSUw0QklMOEJTaUhBQVVFQkljRUJJTUFCSU1FQmNTSENBUUpBQWtBZ3dnRkZEUUFnQkNnQ0hDSERBU0FFS0FJWUljUUJRZXdCSWNVQklNUUJJTVVCYkNIR0FTRERBU0RHQVdvaHh3RkJ2UTBoeUFFZ3h3RWd5QUZxSWNrQklNa0JMUUFBSWNvQlFTZ2h5d0VneWdFZ3l3RnNJY3dCSU1NQklNd0JhaUhOQVVIZ0NDSE9BU0ROQVNET0FXb2h6d0VnendFcUFnQWhvUUlnb1FLN0lhY0NJQVFvQWh3aDBBRkJ2QTBoMFFFZzBBRWcwUUZxSWRJQklBUW9BaGdoMHdGQjdBRWgxQUVnMHdFZzFBRnNJZFVCSU5JQklOVUJhaUhXQVNEV0FTZ0NDQ0hYQVNEWEFiY2hxQUlncHdJZ3FBS2lJYWtDSUtrQ21TR3FBa1FBQUFBQUFBRGdRU0dyQWlDcUFpQ3JBbU1oMkFFZzJBRkZJZGtCQWtBQ1FDRFpBUTBBSUtrQ3FpSGFBU0RhQVNIYkFRd0JDMEdBZ0lDQWVDSGNBU0RjQVNIYkFRc2cyd0VoM1FFZ0JDZ0NIQ0hlQVVHOERTSGZBU0RlQVNEZkFXb2g0QUVnQkNnQ0dDSGhBVUhzQVNIaUFTRGhBU0RpQVd3aDR3RWc0QUVnNHdGcUllUUJJT1FCSU4wQk5nSU1EQUVMSUFRb0Fod2g1UUVnQkNnQ0dDSG1BVUhzQVNIbkFTRG1BU0RuQVd3aDZBRWc1UUVnNkFGcUlla0JRY1FOSWVvQklPa0JJT29CYWlIckFTRHJBU2dDQUNIc0FTRHNBYmNockFKQnZRMGg3UUVnNlFFZzdRRnFJZTRCSU80QkxRQUFJZThCUVNnaDhBRWc3d0VnOEFGc0lmRUJJT1VCSVBFQmFpSHlBVUhnQ0NIekFTRHlBU0R6QVdvaDlBRWc5QUVxQWdBaG9nSWdvZ0s3SWEwQ0lLd0NJSzBDb3lHdUFpQ3VBcGtocndKRUFBQUFBQUFBNEVFaHNBSWdyd0lnc0FKaklmVUJJUFVCUlNIMkFRSkFBa0FnOWdFTkFDQ3VBcW9oOXdFZzl3RWgrQUVNQVF0QmdJQ0FnSGdoK1FFZytRRWgrQUVMSVBnQklmb0JJQVFvQWh3aCt3RkJ2QTBoL0FFZyt3RWcvQUZxSWYwQklBUW9BaGdoL2dGQjdBRWgvd0VnL2dFZy93RnNJWUFDSVAwQklJQUNhaUdCQWlDQkFpRDZBVFlDREFzTElBUW9BaHdoZ2dJZ0JDZ0NHQ0dEQWtIc0FTR0VBaUNEQWlDRUFtd2hoUUlnZ2dJZ2hRSnFJWVlDUWNBTklZY0NJSVlDSUljQ2FpR0lBaUNJQWlnQ0FDR0pBaUNKQWlnQ0RDR0tBaUNLQXJjaHNRSkJ5QTBoaXdJZ2hnSWdpd0pxSVl3Q0lJd0NLQUlBSVkwQ0lJMEN0eUd5QWlDeEFpQ3lBcUloc3dJZ2lRSW9BaGdoamdJZ2pnSzNJYlFDSUlJQ0tBSUlJWThDSUk4Q3R5RzFBaUMwQWlDMUFxSWh0Z0lnc3dJZ3RnS2pJYmNDUkFBQUFBQUFBTEJBSWJnQ0lMY0NJTGdDb2lHNUFpQzVBcllob3dJZ293SzdJYm9DSUFRZ3VnSTVBd2dnQkNnQ0ZDR1FBZ0pBSUpBQ1JRMEFJQVFyQXdnaHV3SWd1d0thSWJ3Q0lBUWd2QUk1QXdnTElBUXJBd2dodlFJZ3ZRS1pJYjRDUkFBQUFBQUFBT0JCSWI4Q0lMNENJTDhDWXlHUkFpQ1JBa1Voa2dJQ1FBSkFJSklDRFFBZ3ZRS3FJWk1DSUpNQ0laUUNEQUVMUVlDQWdJQjRJWlVDSUpVQ0laUUNDeUNVQWlHV0FpQUVLQUljSVpjQ1Fid05JWmdDSUpjQ0lKZ0NhaUdaQWlBRUtBSVlJWm9DUWV3Qklac0NJSm9DSUpzQ2JDR2NBaUNaQWlDY0Ftb2huUUlnblFJZ2xnSTJBaFFMRHd1a0F3RXpmeU1BSVFKQkVDRURJQUlnQTJzaEJDQUVKQUFnQkNBQU5nSU1JQVFnQVRZQ0NDQUVLQUlNSVFVZ0JTZ0NzQWdoQmlBRUtBSU1JUWNnQnlnQ0RDRUlRUUVoQ1NBSUlBbHhJUW9DUUFKQUlBcEZEUUFnQkNnQ0NDRUxRUUloRENBTElBeDBJUTBnRFNFT0RBRUxJQVFvQWdnaEQwRURJUkFnRHlBUWRDRVJJQkVoRGdzZ0RpRVNRUUFoRXlBR0lCTWdFaEI1R2tFQUlSUWdCQ0FVTmdJRUFrQURRQ0FFS0FJRUlSVWdCQ2dDRENFV0lCWW9BdnhsSVJjZ0ZTRVlJQmNoR1NBWUlCbElJUnBCQVNFYklCb2dHM0VoSENBY1JRMEJJQVFvQWd3aEhVRzhEU0VlSUIwZ0htb2hIeUFFS0FJRUlTQkI3QUVoSVNBZ0lDRnNJU0lnSHlBaWFpRWpJQ010QUFBaEpFSC9BU0VsSUNRZ0pYRWhKZ0pBSUNaRkRRQWdCQ2dDRENFbklBUW9BZ3doS0NBb0tBS3dDQ0VwSUFRb0FnUWhLaUFFS0FJSUlTc2dKeUFwSUNvZ0t4QWVDeUFFS0FJRUlTeEJBU0V0SUN3Z0xXb2hMaUFFSUM0MkFnUU1BQXNBQ3lBRUtBSUlJUzhnQkNnQ0RDRXdJREFvQXFCbUlURWdNU0F2YWlFeUlEQWdNallDb0daQkVDRXpJQVFnTTJvaE5DQTBKQUFQQzZvQkFSWi9Jd0FoQVVFUUlRSWdBU0FDYXlFRElBTWdBRFlDREVFQUlRUWdBeUFFTmdJSUFrQURRQ0FES0FJSUlRVkJNQ0VHSUFVaEJ5QUdJUWdnQnlBSVNDRUpRUUVoQ2lBSklBcHhJUXNnQzBVTkFTQURLQUlNSVF4QnZBMGhEU0FNSUExcUlRNGdBeWdDQ0NFUFFld0JJUkFnRHlBUWJDRVJJQTRnRVdvaEVrRUFJUk1nRWlBVE9nQUFJQU1vQWdnaEZFRUJJUlVnRkNBVmFpRVdJQU1nRmpZQ0NBd0FDd0FMRHd1dEJ3RjBmeU1BSVFSQk1DRUZJQVFnQldzaEJpQUdJQUEyQWl3Z0JpQUJOZ0lvSUFZZ0FqWUNKQ0FHSUFNMkFpQWdCaWdDSkNFSElBY29BZ0FoQ0NBR0lBZzJBaEFnQmlnQ0pDRUpJQWtvQWdRaENpQUdJQW8yQWdnZ0JpZ0NFQ0VMUVFFaERDQUxJUTBnRENFT0lBMGdEa1loRDBFQklSQWdEeUFRY1NFUkFrQUNRQ0FSUlEwQUlBWW9BZ2doRWlBR0tBSXNJUk5CdkEwaEZDQVRJQlJxSVJVZ0JpZ0NLQ0VXUWV3QklSY2dGaUFYYkNFWUlCVWdHR29oR1NBWklCSTJBZ1FNQVFzZ0JpZ0NMQ0VhUWJ3TklSc2dHaUFiYWlFY0lBWW9BaWdoSFVIc0FTRWVJQjBnSG13aEh5QWNJQjlxSVNBZ0lDZ0NDQ0VoSUFZZ0lUWUNIRUVBSVNJZ0JpQWlOZ0lNQWtBRFFDQUdLQUlNSVNNZ0JpZ0NFQ0VrSUNNaEpTQWtJU1lnSlNBbVNDRW5RUUVoS0NBbklDaHhJU2tnS1VVTkFTQUdLQUlJSVNvZ0tpZ0NFQ0VySUFZb0Fod2hMQ0FySVMwZ0xDRXVJQzBnTGt3aEwwRUJJVEFnTHlBd2NTRXhBa0FnTVVVTkFDQUdLQUlJSVRJZ01pZ0NGQ0V6SUFZb0Fod2hOQ0F6SVRVZ05DRTJJRFVnTms0aE4wRUJJVGdnTnlBNGNTRTVJRGxGRFFBZ0JpZ0NDQ0U2SUFZb0Fpd2hPMEc4RFNFOElEc2dQR29oUFNBR0tBSW9JVDVCN0FFaFB5QStJRDlzSVVBZ1BTQkFhaUZCSUVFZ09qWUNCQXdEQ3lBR0tBSU1JVUpCQVNGRElFSWdRMm9oUkNBR0lFUTJBZ3dnQmlnQ0NDRkZRZXdBSVVZZ1JTQkdhaUZISUFZZ1J6WUNDQXdBQ3dBTFFmLy8vLzhISVVnZ0JpQklOZ0lZSUFZb0FpUWhTU0JKS0FJRUlVb2dCaUJLTmdJSUlBWWdTallDQkVFQUlVc2dCaUJMTmdJTUFrQURRQ0FHS0FJTUlVd2dCaWdDRUNGTklFd2hUaUJOSVU4Z1RpQlBTQ0ZRUVFFaFVTQlFJRkZ4SVZJZ1VrVU5BU0FHS0FJSUlWTWdVeWdDR0NGVUlBWW9BaHdoVlNCVUlGVnJJVllnQmlCV05nSVVJQVlvQWhRaFYwRUFJVmdnVnlGWklGZ2hXaUJaSUZwSUlWdEJBU0ZjSUZzZ1hIRWhYUUpBSUYxRkRRQWdCaWdDRkNGZVFRQWhYeUJmSUY1cklXQWdCaUJnTmdJVUN5QUdLQUlVSVdFZ0JpZ0NHQ0ZpSUdFaFl5QmlJV1FnWXlCa1NDRmxRUUVoWmlCbElHWnhJV2NDUUNCblJRMEFJQVlvQWhRaGFDQUdJR2cyQWhnZ0JpZ0NDQ0ZwSUFZZ2FUWUNCQXNnQmlnQ0RDRnFRUUVoYXlCcUlHdHFJV3dnQmlCc05nSU1JQVlvQWdnaGJVSHNBQ0Z1SUcwZ2Jtb2hieUFHSUc4MkFnZ01BQXNBQ3lBR0tBSUVJWEFnQmlnQ0xDRnhRYndOSVhJZ2NTQnlhaUZ6SUFZb0FpZ2hkRUhzQVNGMUlIUWdkV3doZGlCeklIWnFJWGNnZHlCd05nSUVDdzhMaXhvQmhnTi9Jd0FoQkVFd0lRVWdCQ0FGYXlFR0lBWWtBQ0FHSUFBMkFpZ2dCaUFCTmdJa0lBWWdBallDSUNBR0lBTTJBaHdnQmlnQ0pDRUhRUUFoQ0NBSElBZzJBcVJtSUFZb0FpUWhDVUVBSVFvZ0NTQUtOZ0tvWmlBR0tBSWtJUXRCQUNFTUlBc2dERFlDbkdZZ0JpZ0NLQ0VOUVFRaERpQUdJQTVxSVE4Z0R5RVFRUUVoRVVFRUlSSWdEU0FRSUJFZ0VoQmpJUk5CQkNFVUlCTWhGU0FVSVJZZ0ZTQVdSeUVYUVFFaEdDQVhJQmh4SVJrQ1FBSkFBa0FnR1EwQUlBWW9BaWdoR2tFWUlSc2dCaUFiYWlFY0lCd2hIVUVFSVI1QkFTRWZJQm9nSFNBZUlCOFFZeUVnUVFFaElTQWdJU0lnSVNFaklDSWdJMGNoSkVFQklTVWdKQ0FsY1NFbUlDWkZEUUVMUVFBaEp5QUdJQ2MyQWl3TUFRdEJCQ0VvSUFZZ0tHb2hLU0FwSVNvZ0tpZ0FBQ0VyUWRLU21iSUVJU3dnS3lBc1J5RXRBa0FnTFEwQUlBWW9BaWdoTGtFRUlTOGdCaUF2YWlFd0lEQWhNVUVCSVRKQkJDRXpJQzRnTVNBeUlETVFZeUUwUVFRaE5TQTBJVFlnTlNFM0lEWWdOMGNoT0VFQklUa2dPQ0E1Y1NFNkFrQUNRQ0E2RFFCQkJDRTdJQVlnTzJvaFBDQThJVDBnUFNnQUFDRStRZEthcGFJRUlUOGdQaUEvUnlGQUlFQU5BQ0FHS0FJb0lVRkJCQ0ZDSUFZZ1Ftb2hReUJESVVSQkFTRkZRUVFoUmlCQklFUWdSU0JHRUdNaFIwRUVJVWdnUnlGSklFZ2hTaUJKSUVwSElVdEJBU0ZNSUVzZ1RIRWhUU0JORFFCQkJDRk9JQVlnVG1vaFR5QlBJVkFnVUNnQUFDRlJRZVRDMFlzR0lWSWdVU0JTUnlGVElGTU5BQ0FHS0FJb0lWUkJCQ0ZWSUFZZ1ZXb2hWaUJXSVZkQkFTRllRUVFoV1NCVUlGY2dXQ0JaRUdNaFdrRUVJVnNnV2lGY0lGc2hYU0JjSUYxSElWNUJBU0ZmSUY0Z1gzRWhZQ0JnRFFBZ0JpZ0NLQ0ZoUVFRaFlpQUdJR0pxSVdNZ1l5RmtRUUVoWlVFRUlXWWdZU0JrSUdVZ1poQmpJV2RCQkNGb0lHY2hhU0JvSVdvZ2FTQnFSeUZyUVFFaGJDQnJJR3h4SVcwZ2JRMEFJQVlvQWlnaGJrRVlJVzhnQmlCdmFpRndJSEFoY1VFRUlYSkJBU0Z6SUc0Z2NTQnlJSE1RWXlGMFFRRWhkU0IwSVhZZ2RTRjNJSFlnZDBjaGVFRUJJWGtnZUNCNWNTRjZJSHBGRFFFTFFRQWhleUFHSUhzMkFpd01BZ3NMSUFZb0FoZ2hmRUgvQVNGOUlId2dmWEVoZmtFWUlYOGdmaUIvZENHQUFTQUdLQUlZSVlFQlFZRCtBeUdDQVNDQkFTQ0NBWEVoZ3dGQkNDR0VBU0NEQVNDRUFYUWhoUUVnZ0FFZ2hRRnlJWVlCSUFZb0FoZ2hod0ZCZ0lEOEJ5R0lBU0NIQVNDSUFYRWhpUUZCQ0NHS0FTQ0pBU0NLQVhVaGl3RWdoZ0VnaXdGeUlZd0JJQVlvQWhnaGpRRkJHQ0dPQVNDTkFTQ09BWFVoandGQi93RWhrQUVnandFZ2tBRnhJWkVCSUl3QklKRUJjaUdTQVNBR0lKSUJOZ0lZUVFRaGt3RWdCaUNUQVdvaGxBRWdsQUVobFFFZ2xRRW9BQUFobGdGQnphaWhvd1lobHdFZ2xnRWdsd0ZISVpnQkFrQUNRQ0NZQVEwQUlBWW9BaGdobVFGQkJpR2FBU0NaQVNHYkFTQ2FBU0djQVNDYkFTQ2NBVWdoblFGQkFTR2VBU0NkQVNDZUFYRWhud0VnbndGRkRRRUxRUUFob0FFZ0JpQ2dBVFlDTEF3QkN5QUdLQUlvSWFFQlFSSWhvZ0VnQmlDaUFXb2hvd0Vnb3dFaHBBRkJBaUdsQVVFQklhWUJJS0VCSUtRQklLVUJJS1lCRUdNYUlBWW9BaWdocHdGQkVDR29BU0FHSUtnQmFpR3BBU0NwQVNHcUFVRUNJYXNCUVFFaHJBRWdwd0VncWdFZ3F3RWdyQUVRWXhvZ0JpZ0NLQ0d0QVVFT0lhNEJJQVlncmdGcUlhOEJJSzhCSWJBQlFRSWhzUUZCQVNHeUFTQ3RBU0N3QVNDeEFTQ3lBUkJqR2lBR0x3RVNJYk1CUVJBaHRBRWdzd0VndEFGMEliVUJJTFVCSUxRQmRTRzJBVUgvQVNHM0FTQzJBU0MzQVhFaHVBRkJDQ0c1QVNDNEFTQzVBWFFodWdFZ0JpOEJFaUc3QVVFUUlid0JJTHNCSUx3QmRDRzlBU0M5QVNDOEFYVWh2Z0ZCQ0NHL0FTQytBU0MvQVhVaHdBRkIvd0Vod1FFZ3dBRWd3UUZ4SWNJQklMb0JJTUlCY2lIREFTQUdJTU1CT3dFU0lBWXZBUkFoeEFGQkVDSEZBU0RFQVNERkFYUWh4Z0VneGdFZ3hRRjFJY2NCUWY4QkljZ0JJTWNCSU1nQmNTSEpBVUVJSWNvQklNa0JJTW9CZENITEFTQUdMd0VRSWN3QlFSQWh6UUVnekFFZ3pRRjBJYzRCSU00QklNMEJkU0hQQVVFSUlkQUJJTThCSU5BQmRTSFJBVUgvQVNIU0FTRFJBU0RTQVhFaDB3RWd5d0VnMHdGeUlkUUJJQVlnMUFFN0FSQWdCaThCRGlIVkFVRVFJZFlCSU5VQklOWUJkQ0hYQVNEWEFTRFdBWFVoMkFGQi93RWgyUUVnMkFFZzJRRnhJZG9CUVFnaDJ3RWcyZ0VnMndGMElkd0JJQVl2QVE0aDNRRkJFQ0hlQVNEZEFTRGVBWFFoM3dFZzN3RWczZ0YxSWVBQlFRZ2g0UUVnNEFFZzRRRjFJZUlCUWY4QkllTUJJT0lCSU9NQmNTSGtBU0RjQVNEa0FYSWg1UUVnQmlEbEFUc0JEaUFHTHdFT0llWUJRUkFoNXdFZzVnRWc1d0YwSWVnQklPZ0JJT2NCZFNIcEFVRUFJZW9CSU9rQkllc0JJT29CSWV3QklPc0JJT3dCU0NIdEFVRUJJZTRCSU8wQklPNEJjU0h2QVFKQUFrQWc3d0ZGRFFBZ0JpOEJEaUh3QVVFUUlmRUJJUEFCSVBFQmRDSHlBU0R5QVNEeEFYVWg4d0ZCZ0FJaDlBRWc4d0VnOUFGdElmVUJRUUFoOWdFZzlnRWc5UUZySWZjQklBWXZBUTRoK0FGQkVDSDVBU0Q0QVNENUFYUWgrZ0VnK2dFZytRRjFJZnNCUWY4Qklmd0JJUHNCSVB3QmNTSDlBU0QzQVNEOUFXd2gvZ0VnQmlEK0FUWUNGQXdCQ3lBR0x3RU9JZjhCUVJBaGdBSWcvd0VnZ0FKMElZRUNJSUVDSUlBQ2RTR0NBaUFHSUlJQ05nSVVDeUFHS0FJWUlZTUNRUVloaEFJZ2d3SWhoUUlnaEFJaGhnSWdoUUlnaGdKS0lZY0NRUUVoaUFJZ2h3SWdpQUp4SVlrQ0FrQWdpUUpGRFFBZ0JpZ0NLQ0dLQWlBR0tBSVlJWXNDUVFZaGpBSWdpd0lnakFKcklZMENJSW9DSUkwQ0VHWWFDeUFHTHdFU0lZNENRUkFoandJZ2pnSWdqd0owSVpBQ0lKQUNJSThDZFNHUkFrRUFJWklDSUpFQ0laTUNJSklDSVpRQ0lKTUNJSlFDU0NHVkFrRUJJWllDSUpVQ0lKWUNjU0dYQWdKQUFrQWdsd0lOQUNBR0x3RVNJWmdDUVJBaG1RSWdtQUlnbVFKMElab0NJSm9DSUprQ2RTR2JBa0VDSVp3Q0lKc0NJWjBDSUp3Q0laNENJSjBDSUo0Q1NpR2ZBa0VCSWFBQ0lKOENJS0FDY1NHaEFpQ2hBa1VOQVF0QkFDR2lBaUFHSUtJQ05nSXNEQUVMSUFZdkFSQWhvd0pCRUNHa0FpQ2pBaUNrQW5RaHBRSWdwUUlncEFKMUlhWUNRUUVocHdJZ3BnSWhxQUlncHdJaHFRSWdxQUlncVFKSUlhb0NRUUVocXdJZ3FnSWdxd0p4SWF3Q0FrQWdyQUpGRFFCQkFDR3RBaUFHSUswQ05nSXNEQUVMSUFZdkFSSWhyZ0pCRUNHdkFpQ3VBaUN2QW5RaHNBSWdzQUlncndKMUliRUNBa0Fnc1FJTkFDQUdMd0VRSWJJQ1FSQWhzd0lnc2dJZ3N3SjBJYlFDSUxRQ0lMTUNkU0cxQWtFQkliWUNJTFVDSWJjQ0lMWUNJYmdDSUxjQ0lMZ0NSeUc1QWtFQklib0NJTGtDSUxvQ2NTRzdBaUM3QWtVTkFFRUFJYndDSUFZZ3ZBSTJBaXdNQVF0QkRDRzlBaUM5QWhBTEliNENJQVlvQWlRaHZ3SWd2d0lndmdJMkFweG1JQVlvQWlRaHdBSWd3QUlvQXB4bUljRUNRUUFod2dJZ3dRSWh3d0lnd2dJaHhBSWd3d0lneEFKSEljVUNRUUVoeGdJZ3hRSWd4Z0p4SWNjQ0FrQWd4d0lOQUNBR0tBSWtJY2dDUVFFaHlRSWd5QUlneVFJMkFnQkJBQ0hLQWlBR0lNb0NOZ0lzREFFTElBWW9BaVFoeXdJZ3l3SW9BcHhtSWN3Q1FRQWh6UUlnekFJZ3pRSTZBQVVnQmlnQ0pDSE9BaURPQWlnQ3BHWWh6d0pCQVNIUUFpRFBBaURRQW1vaDBRSWd6Z0lnMFFJMkFxUm1JQVl1QVJJaDBnSkJBaUhUQWlEU0FpRFRBa3NhQWtBQ1FBSkFBa0FnMGdJT0F3QUJBZ01MSUFZb0FpZ2gxQUlnQmlnQ0pDSFZBa0VBSWRZQ0lOUUNJTlVDSU5ZQ0VFMGgxd0lDUUNEWEFrVU5BQ0FHS0FJa0lkZ0NJTmdDRUU1QkFDSFpBaUFHSU5rQ05nSXNEQVFMREFJTFFRQWgyZ0lnQmlEYUFqWUNDQUpBQTBBZ0JpZ0NDQ0hiQWlBR0x3RVFJZHdDUVJBaDNRSWczQUlnM1FKMElkNENJTjRDSU4wQ2RTSGZBaURiQWlIZ0FpRGZBaUhoQWlEZ0FpRGhBa2doNGdKQkFTSGpBaURpQWlEakFuRWg1QUlnNUFKRkRRRWdCaWdDS0NIbEFpQUdLQUlrSWVZQ1FRQWg1d0lnNVFJZzVnSWc1d0lRVFNIb0FnSkFJT2dDUlEwQUlBWW9BaVFoNlFJZzZRSVFUa0VBSWVvQ0lBWWc2Z0kyQWl3TUJRc2dCaWdDQ0NIckFrRUJJZXdDSU9zQ0lPd0NhaUh0QWlBR0lPMENOZ0lJREFBTEFBc01BUXRCQUNIdUFpQUdJTzRDTmdJSUFrQURRQ0FHS0FJSUllOENJQVl2QVJBaDhBSkJFQ0h4QWlEd0FpRHhBblFoOGdJZzhnSWc4UUoxSWZNQ0lPOENJZlFDSVBNQ0lmVUNJUFFDSVBVQ1NDSDJBa0VCSWZjQ0lQWUNJUGNDY1NINEFpRDRBa1VOQVNBR0tBSW9JZmtDSUFZb0FpUWgrZ0pCQVNIN0FpRDVBaUQ2QWlEN0FoQk5JZndDQWtBZy9BSkZEUUFnQmlnQ0pDSDlBaUQ5QWhCT1FRQWgvZ0lnQmlEK0FqWUNMQXdFQ3lBR0tBSUlJZjhDUVFFaGdBTWcvd0lnZ0FOcUlZRURJQVlnZ1FNMkFnZ01BQXNBQ3dzZ0JpZ0NKQ0dDQXlBR0tBSVVJWU1ESUFZb0FpQWhoQU1nQmlnQ0hDR0ZBeUNDQXlDREF5Q0VBeUNGQXhCUElZWURJQVlnaGdNMkFpd0xJQVlvQWl3aGh3TkJNQ0dJQXlBR0lJZ0RhaUdKQXlDSkF5UUFJSWNERHd1TENnR2RBWDhqQUNFRFFUQWhCQ0FESUFScklRVWdCU1FBSUFVZ0FEWUNLQ0FGSUFFMkFpUWdCU0FDTmdJZ0lBVW9BaVFoQmlBR0tBS2NaaUVISUFVZ0J6WUNIQ0FGS0FJZ0lRZ0NRQUpBSUFoRkRRQWdCU2dDSENFSlFRQWhDaUFKSVFzZ0NpRU1JQXNnREVjaERVRUJJUTRnRFNBT2NTRVBJQTlGRFFBQ1FBTkFJQVVvQWh3aEVDQVFLQUlJSVJGQkFDRVNJQkVoRXlBU0lSUWdFeUFVUnlFVlFRRWhGaUFWSUJaeElSY2dGMFVOQVNBRktBSWNJUmdnR0NnQ0NDRVpJQVVnR1RZQ0hBd0FDd0FMSUFVb0Fod2hHaUFhS0FJQUlSc2dCU2dDSkNFY0lCd2dHellDcUdZTUFRc2dCU2dDSkNFZFFRQWhIaUFkSUI0MkFxaG1DeUFGS0FJb0lSOUJCQ0VnSUFVZ0lHb2hJU0FoSVNKQkFTRWpRUVFoSkNBZklDSWdJeUFrRUdNaEpVRUVJU1lnSlNFbklDWWhLQ0FuSUNoSElTbEJBU0VxSUNrZ0tuRWhLd0pBQWtBQ1FDQXJEUUFnQlNnQ0tDRXNRUkFoTFNBRklDMXFJUzRnTGlFdlFRUWhNRUVCSVRFZ0xDQXZJREFnTVJCaklUSkJBU0V6SURJaE5DQXpJVFVnTkNBMVJ5RTJRUUVoTnlBMklEZHhJVGdnT0VVTkFRdEJmeUU1SUFVZ09UWUNMQXdCQ3lBRktBSVFJVHBCL3dFaE95QTZJRHR4SVR4QkdDRTlJRHdnUFhRaFBpQUZLQUlRSVQ5QmdQNERJVUFnUHlCQWNTRkJRUWdoUWlCQklFSjBJVU1nUGlCRGNpRkVJQVVvQWhBaFJVR0FnUHdISVVZZ1JTQkdjU0ZIUVFnaFNDQkhJRWgxSVVrZ1JDQkpjaUZLSUFVb0FoQWhTMEVZSVV3Z1N5Qk1kU0ZOUWY4QklVNGdUU0JPY1NGUElFb2dUM0loVUNBRklGQTJBaEFnQlNnQ0tDRlJJRkVRWlNGU0lBVW9BaEFoVXlCU0lGTnFJVlFnQlNCVU5nSU1RUVFoVlNBRklGVnFJVllnVmlGWElGY29BQUFoV0VITnFNbmJCaUZaSUZnZ1dVY2hXZ0pBSUZwRkRRQkJmaUZiSUFVZ1d6WUNMQXdCQ3dOQUlBVW9BaWdoWENBRktBSWtJVjBnWENCZEVGQWhYaUFGSUY0MkFoUkJBQ0ZmSUY0aFlDQmZJV0VnWUNCaFJ5RmlRUUVoWXlCaUlHTnhJV1FDUUNCa0RRQkJmaUZsSUFVZ1pUWUNMQXdDQ3lBRktBSVVJV1pCZnlGbklHWWhhQ0JuSVdrZ2FDQnBSaUZxUVFFaGF5QnFJR3R4SVd3Q1FDQnNSUTBBSUFVb0FpZ2hiU0J0RUdVaGJpQUZJRzQyQWdnZ0JTZ0NDQ0Z2SUFVb0Fnd2hjQ0J2SVhFZ2NDRnlJSEVnY2tnaGMwRUJJWFFnY3lCMGNTRjFBa0FnZFVVTkFDQUZLQUlvSVhZZ0JTZ0NEQ0YzSUFVb0FnZ2hlQ0IzSUhocklYbEJBU0Y2SUhZZ2VTQjZFR1FhQzBFQUlYc2dCU0I3TmdJc0RBSUxJQVVvQWh3aGZDQjhLQUlJSVgwZ0JTQjlOZ0lZQTBBZ0JTZ0NHQ0YrUVFBaGZ5QitJWUFCSUg4aGdRRWdnQUVnZ1FGSElZSUJRUUFoZ3dGQkFTR0VBU0NDQVNDRUFYRWhoUUVnZ3dFaGhnRUNRQ0NGQVVVTkFDQUZLQUlZSVljQklJY0JLQUlBSVlnQklBVW9BaFFoaVFFZ2lRRW9BZ0FoaWdFZ2lBRWhpd0VnaWdFaGpBRWdpd0VnakFGSUlZMEJJSTBCSVlZQkN5Q0dBU0dPQVVFQklZOEJJSTRCSUk4QmNTR1FBUUpBSUpBQlJRMEFJQVVvQWhnaGtRRWdCU0NSQVRZQ0hDQUZLQUljSVpJQklKSUJLQUlJSVpNQklBVWdrd0UyQWhnTUFRc0xJQVVvQWhnaGxBRWdCU2dDRkNHVkFTQ1ZBU0NVQVRZQ0NDQUZLQUlVSVpZQklBVW9BaHdobHdFZ2x3RWdsZ0UyQWdnZ0JTZ0NKQ0dZQVNDWUFTZ0NwR1lobVFGQkFTR2FBU0NaQVNDYUFXb2htd0VnbUFFZ213RTJBcVJtSUFVb0FoUWhuQUVnQlNDY0FUWUNIQXdBQ3dBTElBVW9BaXdoblFGQk1DR2VBU0FGSUo0QmFpR2ZBU0NmQVNRQUlKMEJEd3U1QVFFVWZ5TUFJUUZCRUNFQ0lBRWdBbXNoQXlBREpBQWdBeUFBTmdJTUlBTW9BZ3doQkNBRUtBS2NaaUVGSUFNZ0JUWUNDQUpBQTBBZ0F5Z0NDQ0VHUVFBaEJ5QUdJUWdnQnlFSklBZ2dDVWNoQ2tFQklRc2dDaUFMY1NFTUlBeEZEUUVnQXlnQ0NDRU5JQTBvQWdnaERpQURJQTQyQWdRZ0F5Z0NDQ0VQSUE4UXNnRWdBeWdDQkNFUUlBTWdFRFlDQ0F3QUN3QUxJQU1vQWd3aEVVRUFJUklnRVNBU05nS2Naa0VRSVJNZ0F5QVRhaUVVSUJRa0FBOEx0Q2dDclFSL0FYNGpBQ0VFUVpBQ0lRVWdCQ0FGYXlFR0lBWWtBQ0FHSUFBMkFvZ0NJQVlnQVRZQ2hBSWdCaUFDTmdLQUFpQUdJQU0yQXZ3QlFRQWhCeUFHSUFjMkF1d0JBa0FEUUNBR0tBTHNBU0VJUVJBaENTQUlJUW9nQ1NFTElBb2dDMGdoREVFQklRMGdEQ0FOY1NFT0lBNUZEUUVnQmlnQzdBRWhEMEdBQVNFUUlBWWdFR29oRVNBUklSSkJBaUVUSUE4Z0UzUWhGQ0FTSUJScUlSVkJBQ0VXSUJVZ0ZqWUNBQ0FHS0FMc0FTRVhRY0FBSVJnZ0JpQVlhaUVaSUJraEdrRUNJUnNnRnlBYmRDRWNJQm9nSEdvaEhVRUFJUjRnSFNBZU5nSUFJQVlvQW9nQ0lSOGdIeWdDb0FnaElDQUdLQUxzQVNFaElBWWhJa0VDSVNNZ0lTQWpkQ0VrSUNJZ0pHb2hKU0FsSUNBMkFnQWdCaWdDN0FFaEprRUJJU2NnSmlBbmFpRW9JQVlnS0RZQzdBRU1BQXNBQzBHZ3doNGhLU0FHSUNrMkF1UUJJQVlvQW9nQ0lTb2dCaWdDNUFFaEt5QUdLQUtFQWlFc0lDb2dLeUFzRUZGQkFDRXRJQVlnTFRZQzZBRkJBQ0V1SUFZZ0xqWUMyQUZCQUNFdklBWWdMellDMEFGQkFDRXdJQVlnTURZQ3pBRkJBaUV4SUFZZ01UWUN4QUVnQmlnQ2lBSWhNaUF5S0FLa1ppRXpRUUVoTkNBeklEUnFJVFZCQXlFMklEVWdOblFoTnlBM0VBc2hPQ0FHSURnMkF2UUJJQVlnT0RZQytBRWdCaWdDK0FFaE9VRUFJVG9nT1NFN0lEb2hQQ0E3SUR4SElUMUJBU0UrSUQwZ1BuRWhQd0pBQWtBZ1B3MEFJQVlvQW9nQ0lVQkJBU0ZCSUVBZ1FUWUNBQ0FHS0FLSUFpRkNJRUlRVGtFQUlVTWdCaUJETmdLTUFnd0JDeUFHS0FLSUFpRkVJRVFvQXB4bUlVVWdCaUJGTmdMd0FVRUFJVVlnQmlCR05nTHNBUUpBQTBBZ0JpZ0M3QUVoUnlBR0tBS0lBaUZJSUVnb0FxUm1JVWtnUnlGS0lFa2hTeUJLSUV0SUlVeEJBU0ZOSUV3Z1RYRWhUaUJPUlEwQlFRQWhUeUFHSUU4MkF1QUJJQVlvQXZBQklWQWdVQzBBQlNGUlFmOEJJVklnVVNCU2NTRlRRUW9oVkNCVElWVWdWQ0ZXSUZVZ1ZrWWhWMEVCSVZnZ1Z5QlljU0ZaQWtBQ1FDQlpSUTBBUVFFaFdpQUdJRm8yQXVBQkRBRUxJQVlvQXZBQklWc2dXeTBBQlNGY1FYOGhYU0JjSUYxcUlWNUJEaUZmSUY0Z1gwc2FBa0FDUUFKQUFrQWdYZzRQQVFNREF3TURBd01BQXdNREF3TUNBd3NnQmlnQ2lBSWhZQ0JnS0FLQVppRmhJQVlvQXZBQklXSWdZaTBBQkNGalFmOEJJV1FnWXlCa2NTRmxRUUVoWmlCbUlHVjBJV2NnWVNCbmNTRm9Ba0FDUUNCb1JRMEFJQVlvQW9nQ0lXbEJuQVFoYWlCcElHcHFJV3NnQmlnQzhBRWhiQ0JzTFFBR0lXMUIvd0VoYmlCdElHNXhJVzlCQWlGd0lHOGdjSFFoY1NCcklIRnFJWElnY2lnQ0FDRnpRUUFoZENCeklYVWdkQ0YySUhVZ2RrY2hkMEVCSVhnZ2R5QjRjU0Y1QWtBQ1FDQjVSUTBBSUFZb0F2QUJJWG9nZWkwQUJpRjdRZjhCSVh3Z2V5QjhjU0Y5SUFZZ2ZUWUMzQUVNQVFzZ0JpZ0M4QUVoZmtFQUlYOGdmaUIvT2dBR1FRQWhnQUVnQmlDQUFUWUMzQUVMSUFZb0F2QUJJWUVCSUlFQkxRQUVJWUlCUWY4QklZTUJJSUlCSUlNQmNTR0VBVUhBQUNHRkFTQUdJSVVCYWlHR0FTQ0dBU0dIQVVFQ0lZZ0JJSVFCSUlnQmRDR0pBU0NIQVNDSkFXb2hpZ0VnaWdFb0FnQWhpd0VnQmlnQzNBRWhqQUVnaXdFaGpRRWdqQUVoamdFZ2pRRWdqZ0ZISVk4QlFRRWhrQUVnandFZ2tBRnhJWkVCQWtBQ1FDQ1JBVVVOQUNBR0tBTGNBU0dTQVNBR0tBTHdBU0dUQVNDVEFTMEFCQ0dVQVVIL0FTR1ZBU0NVQVNDVkFYRWhsZ0ZCd0FBaGx3RWdCaUNYQVdvaG1BRWdtQUVobVFGQkFpR2FBU0NXQVNDYUFYUWhtd0VnbVFFZ213RnFJWndCSUp3QklKSUJOZ0lBREFFTFFRRWhuUUVnQmlDZEFUWUM0QUVMREFFTElBWW9BdkFCSVo0QklKNEJMUUFHSVo4QlFmOEJJYUFCSUo4QklLQUJjU0doQVNBR0lLRUJOZ0xjQVNBR0tBTHdBU0dpQVNDaUFTMEFCQ0dqQVVIL0FTR2tBU0NqQVNDa0FYRWhwUUVnQmlHbUFVRUNJYWNCSUtVQklLY0JkQ0dvQVNDbUFTQ29BV29ocVFFZ3FRRW9BZ0FocWdGQmZ5R3JBU0NxQVNHc0FTQ3JBU0d0QVNDc0FTQ3RBVWNocmdGQkFTR3ZBU0N1QVNDdkFYRWhzQUVDUUFKQUlMQUJSUTBBSUFZb0F2QUJJYkVCSUxFQkxRQUVJYklCUWY4QkliTUJJTElCSUxNQmNTRzBBU0FHSWJVQlFRSWh0Z0VndEFFZ3RnRjBJYmNCSUxVQklMY0JhaUc0QVNDNEFTZ0NBQ0c1QVNBR0tBTGNBU0c2QVNDNUFTRzdBU0M2QVNHOEFTQzdBU0M4QVVjaHZRRkJBU0crQVNDOUFTQytBWEVodndFZ3Z3RkZEUUFnQmlnQzNBRWh3QUVnQmlnQzhBRWh3UUVnd1FFdEFBUWh3Z0ZCL3dFaHd3RWd3Z0Vnd3dGeEljUUJJQVloeFFGQkFpSEdBU0RFQVNER0FYUWh4d0VneFFFZ3h3RnFJY2dCSU1nQklNQUJOZ0lBREFFTFFRRWh5UUVnQmlESkFUWUM0QUVMQ3d3Q0N5QUdLQUxFQVNIS0FRSkFJTW9CUlEwQVFRRWh5d0VnQmlETEFUWUN4QUVMSUFZb0FvZ0NJY3dCSU13QktBS0FaaUhOQVNBR0tBTHdBU0hPQVNET0FTMEFCQ0hQQVVIL0FTSFFBU0RQQVNEUUFYRWgwUUZCQVNIU0FTRFNBU0RSQVhRaDB3RWd6UUVnMHdGeElkUUJBa0FDUUNEVUFVVU5BQ0FHS0FLSUFpSFZBVUdjQkNIV0FTRFZBU0RXQVdvaDF3RWdCaWdDOEFFaDJBRWcyQUV0QUFRaDJRRkIvd0VoMmdFZzJRRWcyZ0Z4SWRzQlFjQUFJZHdCSUFZZzNBRnFJZDBCSU4wQklkNEJRUUloM3dFZzJ3RWczd0YwSWVBQklONEJJT0FCYWlIaEFTRGhBU2dDQUNIaUFVRUNJZU1CSU9JQklPTUJkQ0hrQVNEWEFTRGtBV29oNVFFZzVRRW9BZ0FoNWdGQkJDSG5BU0RtQVNEbkFXb2g2QUVnQmlnQzhBRWg2UUVnNlFFdEFBWWg2Z0ZCL3dFaDZ3RWc2Z0VnNndGeElld0JRUUloN1FFZzdBRWc3UUYwSWU0QklPZ0JJTzRCYWlIdkFTRHZBU2dDQUNId0FVRUFJZkVCSVBBQklmSUJJUEVCSWZNQklQSUJJUE1CUnlIMEFVRUJJZlVCSVBRQklQVUJjU0gyQVFKQUlQWUJEUUFnQmlnQ2lBSWg5d0ZCbkFRaCtBRWc5d0VnK0FGcUlma0JJQVlvQXZBQklmb0JJUG9CTFFBRUlmc0JRZjhCSWZ3QklQc0JJUHdCY1NIOUFVSEFBQ0grQVNBR0lQNEJhaUgvQVNEL0FTR0FBa0VDSVlFQ0lQMEJJSUVDZENHQ0FpQ0FBaUNDQW1vaGd3SWdnd0lvQWdBaGhBSkJBaUdGQWlDRUFpQ0ZBblFoaGdJZytRRWdoZ0pxSVljQ0lJY0NLQUlBSVlnQ1FRUWhpUUlnaUFJZ2lRSnFJWW9DSUFZb0F2QUJJWXNDSUlzQ0xRQUdJWXdDUWY4QklZMENJSXdDSUkwQ2NTR09Ba0VDSVk4Q0lJNENJSThDZENHUUFpQ0tBaUNRQW1vaGtRSkJmeUdTQWlDUkFpQ1NBallDQUFzTUFRc2dCaWdDOEFFaGt3SWdrd0l0QUFRaGxBSkIvd0VobFFJZ2xBSWdsUUp4SVpZQ0lBWWhsd0pCQWlHWUFpQ1dBaUNZQW5RaG1RSWdsd0lnbVFKcUlab0NJSm9DS0FJQUlac0NRWDhobkFJZ213SWhuUUlnbkFJaG5nSWduUUlnbmdKR0laOENRUUVob0FJZ253SWdvQUp4SWFFQ0FrQWdvUUpGRFFBTUF3c2dCaWdDaUFJaG9nSkJIQ0dqQWlDaUFpQ2pBbW9ocEFJZ0JpZ0M4QUVocFFJZ3BRSXRBQVFocGdKQi93RWhwd0lncGdJZ3B3SnhJYWdDUVlBQklha0NJQVlncVFKcUlhb0NJS29DSWFzQ1FRSWhyQUlncUFJZ3JBSjBJYTBDSUtzQ0lLMENhaUd1QWlDdUFpZ0NBQ0d2QWtFQ0liQUNJSzhDSUxBQ2RDR3hBaUNrQWlDeEFtb2hzZ0lnc2dJb0FnQWhzd0pCQkNHMEFpQ3pBaUMwQW1vaHRRSWdCaWdDOEFFaHRnSWd0Z0l0QUFRaHR3SkIvd0VodUFJZ3R3SWd1QUp4SWJrQ0lBWWh1Z0pCQWlHN0FpQzVBaUM3QW5RaHZBSWd1Z0lndkFKcUliMENJTDBDS0FJQUliNENRUUlodndJZ3ZnSWd2d0owSWNBQ0lMVUNJTUFDYWlIQkFpREJBaWdDQUNIQ0FrRUFJY01DSU1JQ0ljUUNJTU1DSWNVQ0lNUUNJTVVDUnlIR0FrRUJJY2NDSU1ZQ0lNY0NjU0hJQWdKQUlNZ0NEUUFnQmlnQ2lBSWh5UUpCSENIS0FpREpBaURLQW1vaHl3SWdCaWdDOEFFaHpBSWd6QUl0QUFRaHpRSkIvd0VoemdJZ3pRSWd6Z0p4SWM4Q1FZQUJJZEFDSUFZZzBBSnFJZEVDSU5FQ0lkSUNRUUloMHdJZ3p3SWcwd0owSWRRQ0lOSUNJTlFDYWlIVkFpRFZBaWdDQUNIV0FrRUNJZGNDSU5ZQ0lOY0NkQ0hZQWlETEFpRFlBbW9oMlFJZzJRSW9BZ0FoMmdKQkJDSGJBaURhQWlEYkFtb2gzQUlnQmlnQzhBRWgzUUlnM1FJdEFBUWgzZ0pCL3dFaDN3SWczZ0lnM3dKeEllQUNJQVloNFFKQkFpSGlBaURnQWlEaUFuUWg0d0lnNFFJZzR3SnFJZVFDSU9RQ0tBSUFJZVVDUVFJaDVnSWc1UUlnNWdKMEllY0NJTndDSU9jQ2FpSG9Ba0YvSWVrQ0lPZ0NJT2tDTmdJQUN3c01BUXNnQmlnQ2lBSWg2Z0lnNmdJb0FvQm1JZXNDSUFZb0F2QUJJZXdDSU93Q0xRQUVJZTBDUWY4QkllNENJTzBDSU80Q2NTSHZBa0VCSWZBQ0lQQUNJTzhDZENIeEFpRHJBaUR4QW5FaDhnSUNRQ0R5QWtVTkFFRUJJZk1DSUFZZzh3STJBdUFCREFFTElBWW9Bb2dDSWZRQ1FSd2g5UUlnOUFJZzlRSnFJZllDSUFZb0F2QUJJZmNDSVBjQ0xRQUdJZmdDUWY4Qklma0NJUGdDSVBrQ2NTSDZBa0VDSWZzQ0lQb0NJUHNDZENIOEFpRDJBaUQ4QW1vaC9RSWcvUUlvQWdBaC9nSkJBQ0gvQWlEK0FpR0FBeUQvQWlHQkF5Q0FBeUNCQTBjaGdnTkJBU0dEQXlDQ0F5Q0RBM0VoaEFNQ1FBSkFJSVFEUlEwQUlBWW9BdkFCSVlVRElJVURMUUFHSVlZRFFmOEJJWWNESUlZRElJY0RjU0dJQXlBR0lJZ0ROZ0xjQVF3QkN5QUdLQUx3QVNHSkEwRUFJWW9ESUlrRElJb0RPZ0FHUVFBaGl3TWdCaUNMQXpZQzNBRUxJQVlvQXZBQklZd0RJSXdETFFBRUlZMERRZjhCSVk0RElJMERJSTREY1NHUEEwR0FBU0dRQXlBR0lKQURhaUdSQXlDUkF5R1NBMEVDSVpNRElJOERJSk1EZENHVUF5Q1NBeUNVQTJvaGxRTWdsUU1vQWdBaGxnTWdCaWdDM0FFaGx3TWdsZ01obUFNZ2x3TWhtUU1nbUFNZ21RTkhJWm9EUVFFaG13TWdtZ01nbXdOeElad0RBa0FDUUNDY0EwVU5BQ0FHS0FMY0FTR2RBeUFHS0FMd0FTR2VBeUNlQXkwQUJDR2ZBMEgvQVNHZ0F5Q2ZBeUNnQTNFaG9RTkJnQUVob2dNZ0JpQ2lBMm9ob3dNZ293TWhwQU5CQWlHbEF5Q2hBeUNsQTNRaHBnTWdwQU1ncGdOcUlhY0RJS2NESUowRE5nSUFEQUVMUVFFaHFBTWdCaUNvQXpZQzRBRUxDd3NnQmlnQzhBRWhxUU1ncVFNb0FnQWhxZ01nQmlnQzBBRWhxd01ncWdNZ3F3TnJJYXdESUFZZ3JBTTJBc2dCQWtBQ1FDQ3NBMFVOQUNBR0tBTEVBU0d0QXlDdEF3MEFJQVlvQW9nQ0lhNERJSzRES0FLMENDR3ZBeUFHS0FMSUFTR3dBMEgvLy8vL0J5R3hBeUN4QXlDd0EyMGhzZ01ncndNaHN3TWdzZ01odEFNZ3N3TWd0QU5LSWJVRFFRRWh0Z01ndFFNZ3RnTnhJYmNEQWtBQ1FBSkFBa0FndHdNTkFDQUdLQUtJQWlHNEF5QzRBeWdDdUFnaHVRTWdCaWdDeUFFaHVnTkIvLy8vL3djaHV3TWd1d01ndWdOdElid0RJTGtESWIwRElMd0RJYjRESUwwRElMNERTaUcvQTBFQkljQURJTDhESU1BRGNTSEJBeURCQTBVTkFRc01BUXNnQmlnQ2lBSWh3Z01nd2dNb0FyUUlJY01ESUFZb0FzZ0JJY1FESU1NRElNUURiQ0hGQXlBR0lNVUROZ0xVQVNBR0tBS0lBaUhHQXlER0F5Z0N1QWdoeHdNZ0JpZ0N5QUVoeUFNZ3h3TWd5QU5zSWNrRElBWW9BdGdCSWNvRElNb0RJTWtEYWlITEF5QUdJTXNETmdMWUFTQUdLQUxZQVNITUEwR0FnSHdoelFNZ3pBTWd6UU54SWM0REFrQWd6Z05GRFFBZ0JpZ0MyQUVoendOQkVDSFFBeURQQXlEUUEzVWgwUU5CLy84RElkSURJTkVESU5JRGNTSFRBeUFHS0FMVUFTSFVBeURVQXlEVEEyb2gxUU1nQmlEVkF6WUMxQUVnQmlnQzJBRWgxZ05CLy84RElkY0RJTllESU5jRGNTSFlBeUFHSU5nRE5nTFlBUXNnQmlnQ3pBRWgyUU1nQmlnQzFBRWgyZ05CLy8vLy93Y2gyd01nMndNZzJnTnJJZHdESU5rRElkMERJTndESWQ0RElOMERJTjREVGlIZkEwRUJJZUFESU44RElPQURjU0hoQXlEaEEwVU5BUXNnQmlnQ2lBSWg0Z01nNGdNUVRpQUdLQUw0QVNIakF5RGpBeEN5QVVFQUllUURJQVlnNUFNMkFvd0NEQVVMSUFZb0F0UUJJZVVESUFZb0Fzd0JJZVlESU9ZRElPVURhaUhuQXlBR0lPY0ROZ0xNQVF3QkN5QUdLQUxFQVNIb0EwRUJJZWtESU9nREllb0RJT2tESWVzRElPb0RJT3NEUmlIc0EwRUJJZTBESU93RElPMERjU0h1QXdKQUlPNERSUTBBUVFBaDd3TWdCaUR2QXpZQ3hBRUxDeUFHS0FMd0FTSHdBeUR3QXkwQUJTSHhBMEgvQVNIeUF5RHhBeUR5QTNFaDh3TkJDaUgwQXlEekF5SDFBeUQwQXlIMkF5RDFBeUQyQTBZaDl3TkJBU0g0QXlEM0F5RDRBM0VoK1FNQ1FDRDVBMFVOQUNBR0tBTHdBU0g2QXlENkF5MEFCQ0g3QTBIL0FTSDhBeUQ3QXlEOEEzRWgvUU1nQmlnQzhBRWgvZ01nL2dNdEFBY2gvd05CL3dFaGdBUWcvd01nZ0FSeElZRUVRUWdoZ2dRZ2dRUWdnZ1IwSVlNRUlQMERJSU1FYWlHRUJDQUdLQUx3QVNHRkJDQ0ZCQzBBQmlHR0JFSC9BU0dIQkNDR0JDQ0hCSEVoaUFSQkVDR0pCQ0NJQkNDSkJIUWhpZ1FnaEFRZ2lnUnFJWXNFSUFZZ2l3UTJBdVFCSUFZb0FvZ0NJWXdFSUFZb0F1UUJJWTBFSUFZb0FvUUNJWTRFSUl3RUlJMEVJSTRFRUZFTElBWW9BdUFCSVk4RUFrQWdqd1FOQUNBR0tBTDBBU0dRQkNBR0tBTHdBU0dSQkNDUkJDa0NBQ0d4QkNDUUJDQ3hCRGNDQUNBR0tBTE1BU0dTQkNBR0tBTDBBU0dUQkNDVEJDQ1NCRFlDQUNBR0tBTDBBU0dVQkVFSUlaVUVJSlFFSUpVRWFpR1dCQ0FHSUpZRU5nTDBBU0FHS0FMb0FTR1hCRUVCSVpnRUlKY0VJSmdFYWlHWkJDQUdJSmtFTmdMb0FRc2dCaWdDOEFFaG1nUWdtZ1FvQWdBaG13UWdCaUNiQkRZQzBBRWdCaWdDOEFFaG5BUWduQVFvQWdnaG5RUWdCaUNkQkRZQzhBRWdCaWdDN0FFaG5nUkJBU0dmQkNDZUJDQ2ZCR29ob0FRZ0JpQ2dCRFlDN0FFTUFBc0FDeUFHS0FMTUFTR2hCQ0FHS0FMMEFTR2lCQ0NpQkNDaEJEWUNBQ0FHS0FMMEFTR2pCRUhqQUNHa0JDQ2pCQ0NrQkRvQUJTQUdLQUxvQVNHbEJFRUJJYVlFSUtVRUlLWUVhaUduQkNBR0lLY0VOZ0xvQVNBR0tBS0lBaUdvQkNDb0JCQk9JQVlvQXVnQklha0VJQVlvQW9BQ0lhb0VJS29FSUtrRU5nSUFJQVlvQXN3Qklhc0VJQVlvQXZ3Qklhd0VJS3dFSUtzRU5nSUFJQVlvQXZnQklhMEVJQVlnclFRMkFvd0NDeUFHS0FLTUFpR3VCRUdRQWlHdkJDQUdJSzhFYWlHd0JDQ3dCQ1FBSUs0RUR3dWRKZ0hiQTM4akFDRUNRU0FoQXlBQ0lBTnJJUVFnQkNRQUlBUWdBRFlDR0NBRUlBRTJBaFFDUUFOQUlBUW9BaGdoQlNBRkVGSWhCaUFFS0FJVUlRY2dCeWdDcUdZaENDQUlJQVpxSVFrZ0J5QUpOZ0tvWmlBRUtBSVlJUXBCRXlFTElBUWdDMm9oRENBTUlRMUJBU0VPSUFvZ0RTQU9JQTRRWXlFUFFRRWhFQ0FQSVJFZ0VDRVNJQkVnRWtjaEUwRUJJUlFnRXlBVWNTRVZBa0FnRlVVTkFFRUFJUllnQkNBV05nSWNEQUlMSUFRdEFCTWhGMEgvQVNFWUlCY2dHSEVoR1VId0FTRWFJQmtoR3lBYUlSd2dHeUFjUmlFZFFRRWhIaUFkSUI1eElSOENRQUpBQWtBZ0h3MEFJQVF0QUJNaElFSC9BU0VoSUNBZ0lYRWhJa0gzQVNFaklDSWhKQ0FqSVNVZ0pDQWxSaUVtUVFFaEp5QW1JQ2R4SVNnZ0tFVU5BUXNnQkNnQ0dDRXBJQ2tRVWlFcUlBUWdLallDQ0NBRUtBSVlJU3NnQkNnQ0NDRXNJQ3NnTEJCbUdnd0JDeUFFTFFBVElTMUIvd0VoTGlBdElDNXhJUzlCL3dFaE1DQXZJVEVnTUNFeUlERWdNa1loTTBFQklUUWdNeUEwY1NFMUFrQUNRQ0ExUlEwQUlBUW9BaGdoTmtFU0lUY2dCQ0EzYWlFNElEZ2hPVUVCSVRvZ05pQTVJRG9nT2hCakdpQUVLQUlZSVRzZ094QlNJVHdnQkNBOE5nSUlJQVF0QUJJaFBVSC9BU0UrSUQwZ1BuRWhQMEVBSVVBZ1B5RkJJRUFoUWlCQklFSktJVU5CQVNGRUlFTWdSSEVoUlFKQUFrQWdSVVVOQUNBRUxRQVNJVVpCL3dFaFJ5QkdJRWR4SVVoQkVDRkpJRWdoU2lCSklVc2dTaUJMU0NGTVFRRWhUU0JNSUUxeElVNGdUa1VOQUNBRUtBSVlJVThnQkNnQ0ZDRlFJQVFvQWdnaFVTQUVMUUFTSVZKQi93RWhVeUJTSUZOeElWUWdUeUJRSUZFZ1ZCQlRHZ3dCQ3lBRUxRQVNJVlZCTHlGV0lGVWdWa1loVndKQUFrQUNRQ0JYRFFCQjBRQWhXQ0JWSUZoR0lWa2dXUTBCREFJTFFYOGhXaUFFSUZvMkFod01Cd3NnQkNnQ0dDRmJRUkVoWENBRUlGeHFJVjBnWFNGZVFRRWhYeUJiSUY0Z1h5QmZFR01hSUFRb0FoZ2hZRUVRSVdFZ0JDQmhhaUZpSUdJaFkwRUJJV1FnWUNCaklHUWdaQkJqR2lBRUtBSVlJV1ZCRHlGbUlBUWdabW9oWnlCbklXaEJBU0ZwSUdVZ2FDQnBJR2tRWXhwQkRDRnFJR29RQ3lGcklBUWdhellDQkNBRUtBSUVJV3hCQUNGdElHd2hiaUJ0SVc4Z2JpQnZSeUZ3UVFFaGNTQndJSEZ4SVhJQ1FDQnlEUUFnQkNnQ0ZDRnpRUUVoZENCeklIUTJBZ0JCQUNGMUlBUWdkVFlDSEF3SEN5QUVLQUlVSVhZZ2RpZ0NxR1loZHlBRUtBSUVJWGdnZUNCM05nSUFJQVFvQWdRaGVVRUtJWG9nZVNCNk9nQUZJQVF0QUE4aGV5QUVLQUlFSVh3Z2ZDQjdPZ0FFSUFRdEFCRWhmU0FFS0FJRUlYNGdmaUI5T2dBR0lBUXRBQkFoZnlBRUtBSUVJWUFCSUlBQklIODZBQWNnQkNnQ0JDR0JBU0FFSUlFQk5nSWNEQVlMSUFRb0FoZ2hnZ0VnQkNnQ0NDR0RBU0NDQVNDREFSQm1HZ3NNQVFzZ0JDMEFFeUdFQVNBRUlJUUJPZ0FSSUFRdEFCRWhoUUZCL3dFaGhnRWdoUUVnaGdGeElZY0JRWUFCSVlnQklJY0JJSWdCY1NHSkFRSkFJSWtCUlEwQUlBUXRBQkVoaWdGQi93RWhpd0VnaWdFZ2l3RnhJWXdCUVE4aGpRRWdqQUVnalFGeElZNEJRUUFoandFZ2p3RWdqZ0U2QU1XOEJDQUVMUUFSSVpBQlFmOEJJWkVCSUpBQklKRUJjU0dTQVVFRUlaTUJJSklCSUpNQmRTR1VBVUVISVpVQklKUUJJSlVCY1NHV0FVRUFJWmNCSUpjQklKWUJPZ0RFdkFRZ0JDZ0NHQ0dZQVVFUklaa0JJQVFnbVFGcUlab0JJSm9CSVpzQlFRRWhuQUVnbUFFZ213RWduQUVnbkFFUVl4b2dCQzBBRVNHZEFVSC9BU0dlQVNDZEFTQ2VBWEVobndGQi93QWhvQUVnbndFZ29BRnhJYUVCSUFRZ29RRTZBQkVMUVFBaG9nRWdvZ0V0QU1TOEJDR2pBVUVHSWFRQklLTUJJS1FCU3hvQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBZ293RU9Cd0FCQWdNRUJRWUhDeUFFS0FJWUlhVUJRUkFocGdFZ0JDQ21BV29ocHdFZ3B3RWhxQUZCQVNHcEFTQ2xBU0NvQVNDcEFTQ3BBUkJqR2lBRUxRQVFJYW9CUWY4Qklhc0JJS29CSUtzQmNTR3NBVUgvQUNHdEFTQ3NBU0N0QVhFaHJnRWdCQ0N1QVRvQUVFRU1JYThCSUs4QkVBc2hzQUVnQkNDd0FUWUNCQ0FFS0FJRUliRUJRUUFoc2dFZ3NRRWhzd0Vnc2dFaHRBRWdzd0VndEFGSEliVUJRUUVodGdFZ3RRRWd0Z0Z4SWJjQkFrQWd0d0VOQUNBRUtBSVVJYmdCUVFFaHVRRWd1QUVndVFFMkFnQkJBQ0c2QVNBRUlMb0JOZ0ljREF3TElBUW9BaFFodXdFZ3V3RW9BcWhtSWJ3QklBUW9BZ1FodlFFZ3ZRRWd2QUUyQWdBZ0JDZ0NCQ0crQVVFQ0liOEJJTDRCSUw4Qk9nQUZRUUFod0FFZ3dBRXRBTVc4QkNIQkFTQUVLQUlFSWNJQklNSUJJTUVCT2dBRUlBUXRBQkVod3dFZ0JDZ0NCQ0hFQVNERUFTRERBVG9BQmlBRUxRQVFJY1VCSUFRb0FnUWh4Z0VneGdFZ3hRRTZBQWNnQkNnQ0JDSEhBU0FFSU1jQk5nSWNEQXNMSUFRb0FoZ2h5QUZCRUNISkFTQUVJTWtCYWlIS0FTREtBU0hMQVVFQkljd0JJTWdCSU1zQklNd0JJTXdCRUdNYUlBUXRBQkFoelFGQi93RWh6Z0VnelFFZ3pnRnhJYzhCUWY4QUlkQUJJTThCSU5BQmNTSFJBU0FFSU5FQk9nQVFRUXdoMGdFZzBnRVFDeUhUQVNBRUlOTUJOZ0lFSUFRb0FnUWgxQUZCQUNIVkFTRFVBU0hXQVNEVkFTSFhBU0RXQVNEWEFVY2gyQUZCQVNIWkFTRFlBU0RaQVhFaDJnRUNRQ0RhQVEwQUlBUW9BaFFoMndGQkFTSGNBU0RiQVNEY0FUWUNBRUVBSWQwQklBUWczUUUyQWh3TUN3c2dCQ2dDRkNIZUFTRGVBU2dDcUdZaDN3RWdCQ2dDQkNIZ0FTRGdBU0RmQVRZQ0FDQUVLQUlFSWVFQlFRRWg0Z0VnNFFFZzRnRTZBQVZCQUNIakFTRGpBUzBBeGJ3RUllUUJJQVFvQWdRaDVRRWc1UUVnNUFFNkFBUWdCQzBBRVNIbUFTQUVLQUlFSWVjQklPY0JJT1lCT2dBR0lBUXRBQkFoNkFFZ0JDZ0NCQ0hwQVNEcEFTRG9BVG9BQnlBRUtBSUVJZW9CSUFRZzZnRTJBaHdNQ2dzZ0JDZ0NHQ0hyQVVFUUlld0JJQVFnN0FGcUllMEJJTzBCSWU0QlFRRWg3d0VnNndFZzdnRWc3d0VnN3dFUVl4b2dCQzBBRUNId0FVSC9BU0h4QVNEd0FTRHhBWEVoOGdGQi93QWg4d0VnOGdFZzh3RnhJZlFCSUFRZzlBRTZBQkJCRENIMUFTRDFBUkFMSWZZQklBUWc5Z0UyQWdRZ0JDZ0NCQ0gzQVVFQUlmZ0JJUGNCSWZrQklQZ0JJZm9CSVBrQklQb0JSeUg3QVVFQklmd0JJUHNCSVB3QmNTSDlBUUpBSVAwQkRRQWdCQ2dDRkNIK0FVRUJJZjhCSVA0QklQOEJOZ0lBUVFBaGdBSWdCQ0NBQWpZQ0hBd0tDeUFFS0FJVUlZRUNJSUVDS0FLb1ppR0NBaUFFS0FJRUlZTUNJSU1DSUlJQ05nSUFJQVFvQWdRaGhBSkJBeUdGQWlDRUFpQ0ZBam9BQlVFQUlZWUNJSVlDTFFERnZBUWhod0lnQkNnQ0JDR0lBaUNJQWlDSEFqb0FCQ0FFTFFBUklZa0NJQVFvQWdRaGlnSWdpZ0lnaVFJNkFBWWdCQzBBRUNHTEFpQUVLQUlFSVl3Q0lJd0NJSXNDT2dBSElBUW9BZ1FoalFJZ0JDQ05BallDSEF3SkN5QUVLQUlZSVk0Q1FRRWhqd0pCRUNHUUFpQUVJSkFDYWlHUkFpQ09BaUNSQWlDUEFpQ1BBaEJqR2lBRUxRQVFJWklDUWY4QUlaTUNJSklDSUpNQ2NTR1VBaUFFSUpRQ09nQVFRZjhCSVpVQ0lBUWdsUUkyQWdBZ0JDMEFFU0dXQWtIN0FDR1hBaUNXQWlDWEFrc2FBa0FDUUFKQUFrQUNRQUpBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBZ2xnSU9mQWNPRGc0T0RnMEFEZzRCQWc0T0RnNE9EZzRPRGc0T0RnNE9EZzRPRGc0T0NBNE9EZzRPRGc0T0RnNE9EZzRPRGc0T0RnNE9EZzRPRGc0T0RnNE9EZzRERGc0T0RnNE9EZzRPRGc0T0RnNE9EZzRPRGc0T0RnNE9EZzRPRGc0T0RnNE9EQXNKQ2c0T0RnNE9EZzRPRGc0T0RnNE9EZzRPRGdRRkRnWU9DMEVFSVpnQ0lBUWdtQUkyQWdBTURndEJCU0daQWlBRUlKa0NOZ0lBREEwTFFRY2htZ0lnQkNDYUFqWUNBQXdNQzBFR0lac0NJQVFnbXdJMkFnQWdCQzBBRUNHY0FrSC9BU0dkQWlDY0FpQ2RBbkVobmdKQndBQWhud0lnbmdJaG9BSWdud0lob1FJZ29BSWdvUUpPSWFJQ1FRRWhvd0lnb2dJZ293SnhJYVFDSUFRZ3BBSTZBQkFNQ3d0QkRDR2xBaUFFSUtVQ05nSUFEQW9MUVEwaHBnSWdCQ0NtQWpZQ0FBd0pDMEVPSWFjQ0lBUWdwd0kyQWdBTUNBdEJEeUdvQWlBRUlLZ0NOZ0lBREFjTElBUXRBQkFocVFKQi93RWhxZ0lncVFJZ3FnSnhJYXNDQWtBZ3F3SkZEUUFMREFZTFFRQWhyQUpCQUNHdEFpQ3RBaUNzQWpvQXhyd0VJQVF0QUJBaHJnSkJBQ0d2QWlDdkFpMEF4YndFSWJBQ1FmOEJJYkVDSUxBQ0lMRUNjU0d5QWlDeUFpQ3VBam9BMEx3RURBVUxRUUFoc3dKQkFDRzBBaUMwQWlDekFqb0F4cndFSUFRdEFCQWh0UUpCQUNHMkFpQzJBaTBBeGJ3RUliY0NRZjhCSWJnQ0lMY0NJTGdDY1NHNUFpQzVBaUMxQWpvQTRMd0VEQVFMUVFFaHVnSkJBQ0c3QWlDN0FpQzZBam9BeHJ3RUlBUXRBQkFodkFKQkFDRzlBaUM5QWkwQXhid0VJYjRDUWY4QkliOENJTDRDSUw4Q2NTSEFBaURBQWlDOEFqb0EwTHdFREFNTFFRRWh3UUpCQUNIQ0FpRENBaURCQWpvQXhyd0VJQVF0QUJBaHd3SkJBQ0hFQWlERUFpMEF4YndFSWNVQ1FmOEJJY1lDSU1VQ0lNWUNjU0hIQWlESEFpRERBam9BNEx3RURBSUxRUUFoeUFJZ3lBSXRBTWE4QkNISkFrRUFJY29DUWY4Qkljc0NJTWtDSU1zQ2NTSE1Ba0gvQVNITkFpREtBaUROQW5FaHpnSWd6QUlnemdKSEljOENRUUVoMEFJZ3p3SWcwQUp4SWRFQ0FrQWcwUUpGRFFBTUFndEJBQ0hTQWlEU0FpMEF4YndFSWRNQ1FkQzhCQ0hVQWlEVEFpRFVBbW9oMVFJZzFRSXRBQUFoMWdKQkNDSFhBaURXQWlEWEFuUWgyQUpCNEx3RUlka0NJTk1DSU5rQ2FpSGFBaURhQWkwQUFDSGJBaURZQWlEYkFuSWgzQUlDUUFKQUFrQUNRQ0RjQWtVTkFFSC8vZ0VoM1FJZzNBSWczUUpHSWQ0Q0lONENEUUVNQWd0QkN5SGZBaUFFSU44Q05nSUFEQUlMUVF3aDRBSWc0QUlRQ3lIaEFpQUVJT0VDTmdJRUlBUW9BZ1FoNGdKQkFDSGpBaURpQWlIa0FpRGpBaUhsQWlEa0FpRGxBa2NoNWdKQkFTSG5BaURtQWlEbkFuRWg2QUlDUUNEb0FnMEFJQVFvQWhRaDZRSkJBU0hxQWlEcEFpRHFBallDQUVFQUllc0NJQVFnNndJMkFod01EUXNnQkNnQ0ZDSHNBaURzQWlnQ3FHWWg3UUlnQkNnQ0JDSHVBaUR1QWlEdEFqWUNBQ0FFS0FJRUllOENRUXNoOEFJZzd3SWc4QUk2QUFWQkFDSHhBaUR4QWkwQXhid0VJZklDSUFRb0FnUWg4d0lnOHdJZzhnSTZBQVFnQkNnQ0JDSDBBa0VDSWZVQ0lQUUNJUFVDT2dBR0lBUW9BZ1FoOWdKQkFDSDNBaUQyQWlEM0Fqb0FCeUFFS0FJRUlmZ0NJQVFnK0FJMkFod01EQXNMREFFTEN5QUVLQUlBSWZrQ1FmOEJJZm9DSVBrQ0lmc0NJUG9DSWZ3Q0lQc0NJUHdDUnlIOUFrRUJJZjRDSVAwQ0lQNENjU0gvQWdKQUlQOENSUTBBUVF3aGdBTWdnQU1RQ3lHQkF5QUVJSUVETmdJRUlBUW9BZ1FoZ2dOQkFDR0RBeUNDQXlHRUF5Q0RBeUdGQXlDRUF5Q0ZBMGNoaGdOQkFTR0hBeUNHQXlDSEEzRWhpQU1DUUNDSUF3MEFJQVFvQWhRaGlRTkJBU0dLQXlDSkF5Q0tBellDQUVFQUlZc0RJQVFnaXdNMkFod01DZ3NnQkNnQ0ZDR01BeUNNQXlnQ3FHWWhqUU1nQkNnQ0JDR09BeUNPQXlDTkF6WUNBQ0FFS0FJQUlZOERJQVFvQWdRaGtBTWdrQU1nandNNkFBVkJBQ0dSQXlDUkF5MEF4YndFSVpJRElBUW9BZ1Foa3dNZ2t3TWdrZ002QUFRZ0JDMEFFQ0dVQXlBRUtBSUVJWlVESUpVRElKUURPZ0FHSUFRb0FnUWhsZ05CQUNHWEF5Q1dBeUNYQXpvQUJ5QUVLQUlFSVpnRElBUWdtQU0yQWh3TUNRc01CQXNnQkMwQUVTR1pBMEgvQVNHYUF5Q1pBeUNhQTNFaG13TkIvd0FobkFNZ213TWduQU54SVowRElBUWduUU02QUJGQkRDR2VBeUNlQXhBTElaOERJQVFnbndNMkFnUWdCQ2dDQkNHZ0EwRUFJYUVESUtBRElhSURJS0VESWFNRElLSURJS01EUnlHa0EwRUJJYVVESUtRRElLVURjU0dtQXdKQUlLWUREUUFnQkNnQ0ZDR25BMEVCSWFnRElLY0RJS2dETmdJQVFRQWhxUU1nQkNDcEF6WUNIQXdJQ3lBRUtBSVVJYW9ESUtvREtBS29aaUdyQXlBRUtBSUVJYXdESUt3RElLc0ROZ0lBSUFRb0FnUWhyUU5CQ1NHdUF5Q3RBeUN1QXpvQUJVRUFJYThESUs4RExRREZ2QVFoc0FNZ0JDZ0NCQ0d4QXlDeEF5Q3dBem9BQkNBRUxRQVJJYklESUFRb0FnUWhzd01nc3dNZ3NnTTZBQVlnQkNnQ0JDRzBBMEVBSWJVRElMUURJTFVET2dBSElBUW9BZ1FodGdNZ0JDQzJBellDSEF3SEN3d0NDeUFFS0FJWUliY0RRUkFodUFNZ0JDQzRBMm9odVFNZ3VRTWh1Z05CQVNHN0F5QzNBeUM2QXlDN0F5QzdBeEJqR2lBRUxRQVFJYndEUWY4QkliMERJTHdESUwwRGNTRytBMEgvQUNHL0F5QytBeUMvQTNFaHdBTWdCQ0RBQXpvQUVFRU1JY0VESU1FREVBc2h3Z01nQkNEQ0F6WUNCQ0FFS0FJRUljTURRUUFoeEFNZ3d3TWh4UU1neEFNaHhnTWd4UU1neGdOSEljY0RRUUVoeUFNZ3h3TWd5QU54SWNrREFrQWd5UU1OQUNBRUtBSVVJY29EUVFFaHl3TWd5Z01neXdNMkFnQkJBQ0hNQXlBRUlNd0ROZ0ljREFZTElBUW9BaFFoelFNZ3pRTW9BcWhtSWM0RElBUW9BZ1FoendNZ3p3TWd6Z00yQWdBZ0JDZ0NCQ0hRQTBFSUlkRURJTkFESU5FRE9nQUZRUUFoMGdNZzBnTXRBTVc4QkNIVEF5QUVLQUlFSWRRRElOUURJTk1ET2dBRUlBUXRBQkVoMVFNZ0JDZ0NCQ0hXQXlEV0F5RFZBem9BQmlBRUxRQVFJZGNESUFRb0FnUWgyQU1nMkFNZzF3TTZBQWNnQkNnQ0JDSFpBeUFFSU5rRE5nSWNEQVVMQ3dzTERBQUxBQXNnQkNnQ0hDSGFBMEVnSWRzRElBUWcyd05xSWR3RElOd0RKQUFnMmdNUEM4TUNBaGwvRFh3akFDRURRU0FoQkNBRElBUnJJUVVnQlNBQU5nSWNJQVVnQVRZQ0dDQUZJQUkyQWhRZ0JTZ0NHQ0VHSUFhM0lSd2dCU2dDSENFSElBY29BZ2doQ0NBSXR5RWRJQndnSGFJaEhrU043YldnOThhd1B5RWZJQjRnSDZJaElDQUZLQUlVSVFrZ0NiY2hJU0FnSUNHaklTSWdCU0FpT1FNSUlBVXJBd2doSXlBam1TRWtSQUFBQUFBQUFPQkJJU1VnSkNBbFl5RUtJQXBGSVFzQ1FBSkFJQXNOQUNBanFpRU1JQXdoRFF3QkMwR0FnSUNBZUNFT0lBNGhEUXNnRFNFUFFmLy9BeUVRSUE4Z0VIRWhFU0FGS0FJY0lSSWdFaUFSTmdLNENDQUZLd01JSVNZZ0pwa2hKMFFBQUFBQUFBRGdRU0VvSUNjZ0tHTWhFeUFUUlNFVUFrQUNRQ0FVRFFBZ0pxb2hGU0FWSVJZTUFRdEJnSUNBZ0hnaEZ5QVhJUllMSUJZaEdFRVFJUmtnR0NBWmRTRWFJQVVvQWh3aEd5QWJJQm8yQXJRSUR3dUxBZ0VlZnlNQUlRRkJFQ0VDSUFFZ0Ftc2hBeUFESkFBZ0F5QUFOZ0lJUVFBaEJDQURJQVEyQWdRQ1FBTkFJQU1vQWdnaEJVRURJUVlnQXlBR2FpRUhJQWNoQ0VFQklRa2dCU0FJSUFrZ0NSQmpJUW9DUUNBS0RRQWdBeWdDQkNFTElBTWdDellDREF3Q0N5QURMUUFESVF4Qi93RWhEU0FNSUExeElRNUIvd0FoRHlBT0lBOXhJUkFnQXlnQ0JDRVJJQkVnRUdvaEVpQURJQkkyQWdRZ0F5MEFBeUVUUWY4QklSUWdFeUFVY1NFVlFZQUJJUllnRlNBV2NTRVhBa0FnRncwQUlBTW9BZ1FoR0NBRElCZzJBZ3dNQWdzZ0F5Z0NCQ0VaUVFjaEdpQVpJQnAwSVJzZ0F5QWJOZ0lFREFBTEFBc2dBeWdDRENFY1FSQWhIU0FESUIxcUlSNGdIaVFBSUJ3UEM3a0ZBVkYvSXdBaEJFRWdJUVVnQkNBRmF5RUdJQVlrQUNBR0lBQTJBaGdnQmlBQk5nSVVJQVlnQWpZQ0VDQUdJQU02QUE4Z0JpZ0NFQ0VIUVFFaENDQUhJQWhxSVFrZ0NSQUxJUW9nQmlBS05nSUVJQVlvQWdRaEMwRUFJUXdnQ3lFTklBd2hEaUFOSUE1SElROUJBU0VRSUE4Z0VIRWhFUUpBQWtBZ0VRMEFJQVlvQWhnaEVpQUdLQUlRSVJNZ0VpQVRFR1lhUVg4aEZDQUdJQlEyQWh3TUFRc2dCaWdDRUNFVklBWW9BaGdoRmlBR0tBSUVJUmNnQmlnQ0VDRVlRUUVoR1NBV0lCY2dHU0FZRUdNaEdpQVZJUnNnR2lFY0lCc2dIRWNoSFVFQklSNGdIU0FlY1NFZkFrQWdIMFVOQUNBR0tBSUVJU0FnSUJDeUFVRi9JU0VnQmlBaE5nSWNEQUVMSUFZb0FnUWhJaUFHS0FJUUlTTWdJaUFqYWlFa1FRQWhKU0FrSUNVNkFBQUNRQU5BSUFZb0FoQWhKa0YvSVNjZ0ppQW5haUVvSUFZZ0tEWUNFQ0FtUlEwQklBWW9BZ1FoS1NBR0tBSVFJU29nS1NBcWFpRXJJQ3N0QUFBaExFSC9BU0V0SUN3Z0xYRWhMa0VnSVM4Z0xpRXdJQzhoTVNBd0lERklJVEpCQVNFeklESWdNM0VoTkFKQUlEUkZEUUFnQmlnQ0JDRTFJQVlvQWhBaE5pQTFJRFpxSVRkQkxpRTRJRGNnT0RvQUFBc01BQXNBQ3lBR0xRQVBJVGxCZnlFNklEa2dPbW9oTzBFQklUd2dPeUE4U3hvQ1FBSkFBa0FDUUNBN0RnSUFBUUlMUVFBaFBTQUdJRDAyQWdnTUFndEJBU0UrSUFZZ1BqWUNDQXdCQ3lBR0tBSUVJVDhnUHhDeUFVRUFJVUFnQmlCQU5nSWNEQUVMSUFZb0FoUWhRVUd3NWdBaFFpQkJJRUpxSVVNZ0JpZ0NDQ0ZFUVFJaFJTQkVJRVYwSVVZZ1F5QkdhaUZISUVjb0FnQWhTQ0JJRUxJQklBWW9BZ1FoU1NBR0tBSVVJVXBCc09ZQUlVc2dTaUJMYWlGTUlBWW9BZ2doVFVFQ0lVNGdUU0JPZENGUElFd2dUMm9oVUNCUUlFazJBZ0JCQUNGUklBWWdVVFlDSEFzZ0JpZ0NIQ0ZTUVNBaFV5QUdJRk5xSVZRZ1ZDUUFJRklQQzdFS0FhRUJmeU1BSVFOQklDRUVJQU1nQkdzaEJTQUZKQUFnQlNBQU5nSVlJQVVnQVRZQ0ZDQUZJQUkyQWhBZ0JTZ0NHQ0VHUWJ3TklRY2dCaUFIYWlFSUlBVW9BaFFoQ1VIc0FTRUtJQWtnQ213aEN5QUlJQXRxSVF3Z0JTQU1OZ0lFSUFVb0FnUWhEU0FOS0FJRUlRNGdEaWdDRENFUEFrQUNRQ0FQRFFBZ0JTZ0NCQ0VRSUJBb0FoQWhFVUVNSVJJZ0VTQVNkU0VUSUFVZ0V6WUNEQ0FGS0FJUUlSUWdGQ2dDQUNFVklBVW9BZ1FoRmlBV0tBSUVJUmNnRnlnQ0NDRVlRUXdoR1NBWUlCbDFJUm9nQlNnQ0RDRWJJQm9nRzJzaEhDQVZJUjBnSENFZUlCMGdIazRoSDBFQklTQWdIeUFnY1NFaEFrQUNRQ0FoUlEwQUlBVW9BZ1FoSWtFQUlTTWdJaUFqT2dBQUlBVW9BZ1FoSkNBa0tBSUVJU1VnSlNnQ0NDRW1RUXdoSnlBbUlDZDFJU2dnQlNnQ0RDRXBJQ2dnS1dzaEtpQUZLQUlRSVNzZ0t5QXFOZ0lBREFFTElBVW9BaEFoTENBc0tBSUFJUzFCRENFdUlDMGdMblFoTHlBRktBSUVJVEFnTUNnQ0VDRXhJREVnTDJvaE1pQXdJREkyQWhBTElBVW9BZ1FoTXlBektBSUVJVFFnTkNnQ1VDRTFJQVVvQWd3aE5rRUJJVGNnTmlBM2RDRTRJRFVnT0dvaE9TQUZJRGsyQWh3TUFRc2dCU2dDQkNFNklEb29BZ1FoT3lBN0xRQm1JVHdnQlNBOE9nQUxJQVVvQWdRaFBTQTlLQUxVQVNFK0FrQWdQa1VOQUNBRkxRQUxJVDlCL3dFaFFDQS9JRUJ4SVVGQkJDRkNJRUVnUW5FaFF3SkFJRU5GRFFBZ0JTMEFDeUZFUWY4QklVVWdSQ0JGY1NGR1FjQUFJVWNnUmlCSGNTRklBa0FnU0EwQUlBVW9BZ1FoU1NCSkxRQUFJVXBCL3dFaFN5QktJRXR4SVV4QkFTRk5JRXdoVGlCTklVOGdUaUJQUmlGUVFRRWhVU0JRSUZGeElWSWdVZzBBSUFVb0FnUWhVeUJUTFFBQUlWUkIvd0VoVlNCVUlGVnhJVlpCQWlGWElGWWhXQ0JYSVZrZ1dDQlpSaUZhUVFFaFd5QmFJRnR4SVZ3Z1hFVU5BUXNnQlMwQUN5RmRRZjhCSVY0Z1hTQmVjU0ZmUVFnaFlDQmZJR0J4SVdFQ1FDQmhSUTBBSUFVb0FoZ2hZaUFGS0FJRUlXTWdCU2dDRUNGa0lHUW9BZ0FoWlNCaUlHTWdaUkJWSVdZZ0JTQm1OZ0ljREFNTElBVW9BaGdoWnlBRktBSUVJV2dnQlNnQ0VDRnBJR2tvQWdBaGFpQm5JR2dnYWhCV0lXc2dCU0JyTmdJY0RBSUxJQVVvQWhnaGJDQUZLQUlVSVcwZ0JTZ0NFQ0Z1SUd3Z2JTQnVFRmNoYnlBRklHODJBaHdNQVFzZ0JTMEFDeUZ3UWY4QklYRWdjQ0J4Y1NGeVFRUWhjeUJ5SUhOeElYUUNRQ0IwUlEwQUlBVXRBQXNoZFVIL0FTRjJJSFVnZG5FaGQwSEFBQ0Y0SUhjZ2VIRWhlUUpBSUhrTkFDQUZLQUlFSVhvZ2VpMEFBQ0Y3UWY4QklYd2dleUI4Y1NGOVFRRWhmaUI5SVg4Z2ZpR0FBU0IvSUlBQlJpR0JBVUVCSVlJQklJRUJJSUlCY1NHREFTQ0RBUTBBSUFVb0FnUWhoQUVnaEFFdEFBQWhoUUZCL3dFaGhnRWdoUUVnaGdGeElZY0JRUUloaUFFZ2h3RWhpUUVnaUFFaGlnRWdpUUVnaWdGR0lZc0JRUUVoakFFZ2l3RWdqQUZ4SVkwQklJMEJSUTBCQ3lBRkxRQUxJWTRCUWY4QklZOEJJSTRCSUk4QmNTR1FBVUVJSVpFQklKQUJJSkVCY1NHU0FRSkFJSklCUlEwQUlBVW9BaGdoa3dFZ0JTZ0NCQ0dVQVNBRktBSVFJWlVCSUpVQktBSUFJWllCSUpNQklKUUJJSllCRUZnaGx3RWdCU0NYQVRZQ0hBd0NDeUFGS0FJWUlaZ0JJQVVvQWdRaG1RRWdCU2dDRUNHYUFTQ2FBU2dDQUNHYkFTQ1lBU0NaQVNDYkFSQlpJWndCSUFVZ25BRTJBaHdNQVFzZ0JTZ0NHQ0dkQVNBRktBSVVJWjRCSUFVb0FoQWhud0VnblFFZ25nRWdud0VRV2lHZ0FTQUZJS0FCTmdJY0N5QUZLQUljSWFFQlFTQWhvZ0VnQlNDaUFXb2hvd0Vnb3dFa0FDQ2hBUThMcUJRQm1RSi9Jd0FoQTBIQUFDRUVJQU1nQkdzaEJTQUZKQUFnQlNBQU5nSThJQVVnQVRZQ09DQUZJQUkyQWpRZ0JTZ0NPQ0VHSUFZb0FoQWhCeUFGSUFjMkFpd2dCU2dDT0NFSUlBZ29BaFFoQ1NBRklBazJBaWdnQlNnQ09DRUtJQW9vQWdRaEN5QUxLQUlFSVF3Z0JTQU1OZ0lrSUFVb0FqZ2hEU0FOS0FJRUlRNGdEaWdDQUNFUElBVWdEellDSUNBRktBSThJUkFnRUNnQ3JBZ2hFU0FGSUJFMkFod2dCU2dDT0NFU0lCSW9BZ1FoRXlBVEtBSlFJUlFnQlNBVU5nSVlJQVVvQWpnaEZTQVZLQUxZQVNFV0lBVWdGallDRkNBRktBSWtJUmRCQVNFWUlCY2dHSFFoR1NBRklCazJBaEFnQlNnQ0lDRWFRUUVoR3lBYUlCdDBJUndnQlNBY05nSU1RUUFoSFNBRklCMDJBZ0FEUUNBRktBSTBJUjVCQUNFZklCOGhJQUpBSUI1RkRRQWdCU2dDS0NFaFFRQWhJaUFoSVNNZ0lpRWtJQ01nSkVvaEpVRUFJU1pCQVNFbklDVWdKM0VoS0NBbUlTQWdLRVVOQUNBRktBSXNJU2tnQlNnQ0lDRXFJQ2toS3lBcUlTd2dLeUFzU0NFdElDMGhJQXNnSUNFdVFRRWhMeUF1SUM5eElUQUNRQ0F3UlEwQUlBVW9BaUFoTVNBRktBSXNJVElnTVNBeWF5RXpJQVVvQWlnaE5DQXpJRFJxSVRWQkFTRTJJRFVnTm1zaE55QUZLQUlvSVRnZ055QTRiU0U1SUFVZ09UWUNDQ0FGS0FJSUlUb2dCU2dDTkNFN0lEb2hQQ0E3SVQwZ1BDQTlTaUUrUVFFaFB5QStJRDl4SVVBQ1FDQkFSUTBBSUFVb0FqUWhRU0FGSUVFMkFnZ0xJQVVvQWdnaFFpQUZLQUlVSVVNZ1FpRkVJRU1oUlNCRUlFVktJVVpCQVNGSElFWWdSM0VoU0FKQUFrQWdTRVVOQUNBRktBSVVJVWtnQlNCSk5nSUlRUUVoU2lBRklFbzJBZ0FNQVFzZ0JTZ0NDQ0ZMSUFVb0FoUWhUQ0JNSUV0cklVMGdCU0JOTmdJVUN5QUZLQUlJSVU0Z0JTZ0NOQ0ZQSUU4Z1Rtc2hVQ0FGSUZBMkFqUkJBQ0ZSSUFVZ1VUWUNCQUpBQTBBZ0JTZ0NCQ0ZTSUFVb0FnZ2hVeUJTSVZRZ1V5RlZJRlFnVlVnaFZrRUJJVmNnVmlCWGNTRllJRmhGRFFFZ0JTZ0NHQ0ZaSUFVb0Fpd2hXa0VNSVZzZ1dpQmJkU0ZjUVFFaFhTQmNJRjEwSVY0Z1dTQmVhaUZmSUY4dkFRQWhZQ0FGSUdBN0FUSWdCU2dDR0NGaElBVW9BaXdoWWtFTUlXTWdZaUJqZFNGa1FRRWhaU0JrSUdWcUlXWkJBU0ZuSUdZZ1ozUWhhQ0JoSUdocUlXa2dhUzhCQUNGcUlBVWdhanNCTUNBRkx3RXlJV3RCRUNGc0lHc2diSFFoYlNCdElHeDFJVzRnQlM4Qk1DRnZRUkFoY0NCdklIQjBJWEVnY1NCd2RTRnlJQVV2QVRJaGMwRVFJWFFnY3lCMGRDRjFJSFVnZEhVaGRpQnlJSFpySVhjZ0JTZ0NMQ0Y0UWY4ZklYa2dlQ0I1Y1NGNklIY2dlbXdoZTBFTUlYd2dleUI4ZGlGOUlHNGdmV29oZmlBRktBSWNJWDlCQWlHQUFTQi9JSUFCYWlHQkFTQUZJSUVCTmdJY0lIOGdmanNCQUNBRktBSW9JWUlCSUFVb0Fpd2hnd0VnZ3dFZ2dnRnFJWVFCSUFVZ2hBRTJBaXdnQlNnQ0JDR0ZBVUVCSVlZQklJVUJJSVlCYWlHSEFTQUZJSWNCTmdJRURBQUxBQXNnQlNnQ0FDR0lBUUpBSUlnQlJRMEFJQVVvQWpnaGlRRWdpUUVvQXRRQklZb0JJQVVnaWdFMkFoUWdCU2dDUENHTEFTQUZLQUk0SVl3QlFRQWhqUUVnaXdFZ2pBRWdqUUVRV3lHT0FTQUZJSTRCTmdJb1FRQWhqd0VnQlNDUEFUWUNBQXNNQVFzTEFrQURRQ0FGS0FJMElaQUJJSkFCUlEwQklBVW9BaWdoa1FGQkFDR1NBU0NSQVNHVEFTQ1NBU0dVQVNDVEFTQ1VBVW9obFFGQkFTR1dBU0NWQVNDV0FYRWhsd0VDUUFKQUlKY0JSUTBBSUFVb0FpUWhtQUVnbUFFaG1RRU1BUXNnQlNnQ0lDR2FBU0NhQVNHWkFRc2dtUUVobXdFZ0JTZ0NMQ0djQVNDYkFTQ2NBV3NoblFFZ0JTZ0NLQ0dlQVNDZEFTQ2VBV29obndGQkFTR2dBU0NmQVNDZ0FXc2hvUUVnQlNnQ0tDR2lBU0NoQVNDaUFXMGhvd0VnQlNDakFUWUNDQ0FGS0FJSUlhUUJJQVVvQWpRaHBRRWdwQUVocGdFZ3BRRWhwd0VncGdFZ3B3RktJYWdCUVFFaHFRRWdxQUVncVFGeElhb0JBa0FncWdGRkRRQWdCU2dDTkNHckFTQUZJS3NCTmdJSUN5QUZLQUlJSWF3QklBVW9BaFFoclFFZ3JBRWhyZ0VnclFFaHJ3RWdyZ0VncndGS0liQUJRUUVoc1FFZ3NBRWdzUUZ4SWJJQkFrQUNRQ0N5QVVVTkFDQUZLQUlVSWJNQklBVWdzd0UyQWdoQkFTRzBBU0FGSUxRQk5nSUFEQUVMSUFVb0FnZ2h0UUVnQlNnQ0ZDRzJBU0MyQVNDMUFXc2h0d0VnQlNDM0FUWUNGQXNnQlNnQ0NDRzRBU0FGS0FJMElia0JJTGtCSUxnQmF5RzZBU0FGSUxvQk5nSTBBa0FEUUNBRktBSUlJYnNCUVg4aHZBRWd1d0VndkFGcUliMEJJQVVndlFFMkFnZ2d1d0ZGRFFFZ0JTZ0NHQ0crQVNBRktBSXNJYjhCUVF3aHdBRWd2d0Vnd0FGMUljRUJRUUVod2dFZ3dRRWd3Z0YwSWNNQklMNEJJTU1CYWlIRUFTREVBUzhCQUNIRkFTQUZJTVVCT3dFeUlBVW9BaGdoeGdFZ0JTZ0NMQ0hIQVVFTUljZ0JJTWNCSU1nQmRTSEpBVUVCSWNvQklNa0JJTW9CYWlITEFVRUJJY3dCSU1zQklNd0JkQ0hOQVNER0FTRE5BV29oemdFZ3pnRXZBUUFoendFZ0JTRFBBVHNCTUNBRkx3RXlJZEFCUVJBaDBRRWcwQUVnMFFGMElkSUJJTklCSU5FQmRTSFRBU0FGTHdFd0lkUUJRUkFoMVFFZzFBRWcxUUYwSWRZQklOWUJJTlVCZFNIWEFTQUZMd0V5SWRnQlFSQWgyUUVnMkFFZzJRRjBJZG9CSU5vQklOa0JkU0hiQVNEWEFTRGJBV3NoM0FFZ0JTZ0NMQ0hkQVVIL0h5SGVBU0RkQVNEZUFYRWgzd0VnM0FFZzN3RnNJZUFCUVF3aDRRRWc0QUVnNFFGMkllSUJJTk1CSU9JQmFpSGpBU0FGS0FJY0llUUJRUUloNVFFZzVBRWc1UUZxSWVZQklBVWc1Z0UyQWh3ZzVBRWc0d0U3QVFBZ0JTZ0NLQ0huQVNBRktBSXNJZWdCSU9nQklPY0JhaUhwQVNBRklPa0JOZ0lzREFBTEFBc2dCU2dDQUNIcUFRSkFJT29CUlEwQUlBVW9BamdoNndFZzZ3RW9BdFFCSWV3QklBVWc3QUUyQWhRZ0JTZ0NQQ0h0QVNBRktBSTRJZTRCSUFVb0FpZ2g3d0ZCQUNId0FTRHZBU0h4QVNEd0FTSHlBU0R4QVNEeUFVZ2g4d0ZCQVNIMEFTRHpBU0QwQVhFaDlRRWc3UUVnN2dFZzlRRVFXeUgyQVNBRklQWUJOZ0lvUVFBaDl3RWdCU0QzQVRZQ0FBc2dCU2dDTENINEFTQUZLQUlrSWZrQklQZ0JJZm9CSVBrQklmc0JJUG9CSVBzQlRpSDhBVUVCSWYwQklQd0JJUDBCY1NIK0FRSkFBa0FnL2dGRkRRQWdCU2dDRUNIL0FTQUZLQUlzSVlBQ0lQOEJJSUFDYXlHQkFpQUZJSUVDTmdJc0lBVW9BaWdoZ2dKQmZ5R0RBaUNDQWlDREFtd2hoQUlnQlNDRUFqWUNLQXdCQ3lBRktBSXNJWVVDSUFVb0FpQWhoZ0lnaFFJaGh3SWdoZ0loaUFJZ2h3SWdpQUpNSVlrQ1FRRWhpZ0lnaVFJZ2lnSnhJWXNDQWtBZ2l3SkZEUUFnQlNnQ0RDR01BaUFGS0FJc0lZMENJSXdDSUkwQ2F5R09BaUFGSUk0Q05nSXNJQVVvQWlnaGp3SkJmeUdRQWlDUEFpQ1FBbXdoa1FJZ0JTQ1JBallDS0FzTERBQUxBQXNnQlNnQ0ZDR1NBaUFGS0FJNElaTUNJSk1DSUpJQ05nTFlBU0FGS0FJb0laUUNJQVVvQWpnaGxRSWdsUUlnbEFJMkFoUWdCU2dDTENHV0FpQUZLQUk0SVpjQ0lKY0NJSllDTmdJUUlBVW9BandobUFJZ21BSW9BcXdJSVprQ1FjQUFJWm9DSUFVZ21nSnFJWnNDSUpzQ0pBQWdtUUlQQzhFSkFZc0JmeU1BSVFOQndBQWhCQ0FESUFScklRVWdCU1FBSUFVZ0FEWUNQQ0FGSUFFMkFqZ2dCU0FDTmdJMElBVW9BamdoQmlBR0tBSVFJUWNnQlNBSE5nSXNJQVVvQWpnaENDQUlLQUlVSVFrZ0JTQUpOZ0lvSUFVb0FqZ2hDaUFLS0FJRUlRc2dDeWdDQkNFTUlBVWdERFlDSkNBRktBSWtJUTBnQlNnQ09DRU9JQTRvQWdRaER5QVBLQUlBSVJBZ0RTQVFheUVSSUFVZ0VUWUNJQ0FGS0FJOElSSWdFaWdDckFnaEV5QUZJQk0yQWh3Z0JTZ0NPQ0VVSUJRb0FnUWhGU0FWS0FKUUlSWWdCU0FXTmdJWUlBVW9BamdoRnlBWEtBTFlBU0VZSUFVZ0dEWUNGRUVBSVJrZ0JTQVpOZ0lJQWtBRFFDQUZLQUkwSVJvZ0drVU5BUUpBQTBBZ0JTZ0NMQ0ViSUFVb0FpUWhIQ0FiSVIwZ0hDRWVJQjBnSGs0aEgwRUJJU0FnSHlBZ2NTRWhJQ0ZGRFFFZ0JTZ0NJQ0VpSUFVb0Fpd2hJeUFqSUNKcklTUWdCU0FrTmdJc0RBQUxBQXNnQlNnQ0pDRWxJQVVvQWl3aEppQWxJQ1pySVNjZ0JTZ0NLQ0VvSUNjZ0tHb2hLVUVCSVNvZ0tTQXFheUVySUFVb0FpZ2hMQ0FySUN4dElTMGdCU0F0TmdJUUlBVW9BaEFoTGlBRktBSTBJUzhnTGlFd0lDOGhNU0F3SURGS0lUSkJBU0V6SURJZ00zRWhOQUpBSURSRkRRQWdCU2dDTkNFMUlBVWdOVFlDRUFzZ0JTZ0NFQ0UySUFVb0FoUWhOeUEySVRnZ055RTVJRGdnT1VvaE9rRUJJVHNnT2lBN2NTRThBa0FDUUNBOFJRMEFJQVVvQWhRaFBTQUZJRDAyQWhCQkFTRStJQVVnUGpZQ0NBd0JDeUFGS0FJUUlUOGdCU2dDRkNGQUlFQWdQMnNoUVNBRklFRTJBaFFMSUFVb0FoQWhRaUFGS0FJMElVTWdReUJDYXlGRUlBVWdSRFlDTkVFQUlVVWdCU0JGTmdJTUFrQURRQ0FGS0FJTUlVWWdCU2dDRUNGSElFWWhTQ0JISVVrZ1NDQkpTQ0ZLUVFFaFN5QktJRXR4SVV3Z1RFVU5BU0FGS0FJWUlVMGdCU2dDTENGT1FRd2hUeUJPSUU5MUlWQkJBU0ZSSUZBZ1VYUWhVaUJOSUZKcUlWTWdVeThCQUNGVUlBVWdWRHNCTWlBRktBSVlJVlVnQlNnQ0xDRldRUXdoVnlCV0lGZDFJVmhCQVNGWklGZ2dXV29oV2tFQklWc2dXaUJiZENGY0lGVWdYR29oWFNCZEx3RUFJVjRnQlNCZU93RXdJQVV2QVRJaFgwRVFJV0FnWHlCZ2RDRmhJR0VnWUhVaFlpQUZMd0V3SVdOQkVDRmtJR01nWkhRaFpTQmxJR1IxSVdZZ0JTOEJNaUZuUVJBaGFDQm5JR2gwSVdrZ2FTQm9kU0ZxSUdZZ2Ftc2hheUFGS0FJc0lXeEIveDhoYlNCc0lHMXhJVzRnYXlCdWJDRnZRUXdoY0NCdklIQjJJWEVnWWlCeGFpRnlJQVVvQWh3aGMwRUNJWFFnY3lCMGFpRjFJQVVnZFRZQ0hDQnpJSEk3QVFBZ0JTZ0NLQ0YySUFVb0Fpd2hkeUIzSUhacUlYZ2dCU0I0TmdJc0lBVW9BZ3doZVVFQklYb2dlU0I2YWlGN0lBVWdlellDREF3QUN3QUxJQVVvQWdnaGZBSkFJSHhGRFFBZ0JTZ0NPQ0Y5SUgwb0F0UUJJWDRnQlNCK05nSVVJQVVvQWp3aGZ5QUZLQUk0SVlBQlFRQWhnUUVnZnlDQUFTQ0JBUkJiSVlJQklBVWdnZ0UyQWloQkFDR0RBU0FGSUlNQk5nSUlDd3dBQ3dBTElBVW9BaFFoaEFFZ0JTZ0NPQ0dGQVNDRkFTQ0VBVFlDMkFFZ0JTZ0NLQ0dHQVNBRktBSTRJWWNCSUljQklJWUJOZ0lVSUFVb0Fpd2hpQUVnQlNnQ09DR0pBU0NKQVNDSUFUWUNFQ0FGS0FJOElZb0JJSW9CS0FLc0NDR0xBVUhBQUNHTUFTQUZJSXdCYWlHTkFTQ05BU1FBSUlzQkR3dWhDUUdPQVg4akFDRURRVEFoQkNBRElBUnJJUVVnQlNRQUlBVWdBRFlDTENBRklBRTJBaWdnQlNBQ05nSWtJQVVvQWl3aEJrRzhEU0VISUFZZ0Iyb2hDQ0FGS0FJb0lRbEI3QUVoQ2lBSklBcHNJUXNnQ0NBTGFpRU1JQVVnRERZQ0hDQUZLQUlzSVEwZ0RTZ0NyQWdoRGlBRklBNDJBaGdnQlNnQ0hDRVBJQThvQWdRaEVDQVFLQUpRSVJFZ0JTQVJOZ0lVSUFVb0Fod2hFaUFTS0FJRUlSTWdFeWdDQ0NFVUlBVWdGRFlDRUNBRktBSWNJUlVnRlNnQ0VDRVdJQVVnRmpZQ0RDQUZLQUljSVJjZ0Z5Z0NGQ0VZSUFVZ0dEWUNDQ0FGS0FJa0lSa2dHU2dDQUNFYUlBVWdHallDQkNBRktBSWNJUnNnR3lnQzJBRWhIQ0FGSUJ3MkFnQWdCU2dDQ0NFZFFRQWhIaUFkSVI4Z0hpRWdJQjhnSUVnaElVRUJJU0lnSVNBaWNTRWpBa0FnSTBVTkFDQUZLQUlJSVNSQkFDRWxJQ1VnSkdzaEppQUZJQ1kyQWdnTEFrQURRQ0FGS0FJRUlTZEJmeUVvSUNjZ0tHb2hLU0FGSUNrMkFnUWdKMFVOQVNBRktBSUFJU3BCZnlFcklDb2dLMm9oTENBRklDdzJBZ0FDUUNBcURRQWdCU2dDSENFdElDMG9BdFFCSVM0Z0JTQXVOZ0lBSUFVb0Fpd2hMeUFGS0FJY0lUQkJBQ0V4SUM4Z01DQXhFRnNoTWlBRklESTJBZ2dMSUFVb0FoUWhNeUFGS0FJTUlUUkJEQ0UxSURRZ05YVWhOa0VCSVRjZ05pQTNkQ0U0SURNZ09Hb2hPU0E1THdFQUlUb2dCU0E2T3dFaUlBVW9BaFFoT3lBRktBSU1JVHhCRENFOUlEd2dQWFVoUGtFQklUOGdQaUEvYWlGQVFRRWhRU0JBSUVGMElVSWdPeUJDYWlGRElFTXZBUUFoUkNBRklFUTdBU0FnQlM4QklpRkZRUkFoUmlCRklFWjBJVWNnUnlCR2RTRklJQVV2QVNBaFNVRVFJVW9nU1NCS2RDRkxJRXNnU25VaFRDQUZMd0VpSVUxQkVDRk9JRTBnVG5RaFR5QlBJRTUxSVZBZ1RDQlFheUZSSUFVb0Fnd2hVa0gvSHlGVElGSWdVM0VoVkNCUklGUnNJVlZCRENGV0lGVWdWblloVnlCSUlGZHFJVmdnQlNnQ0dDRlpRUUloV2lCWklGcHFJVnNnQlNCYk5nSVlJRmtnV0RzQkFDQUZLQUlJSVZ3Z0JTZ0NEQ0ZkSUYwZ1hHb2hYaUFGSUY0MkFnd2dCU2dDRENGZklBVW9BaEFoWUNCZklXRWdZQ0ZpSUdFZ1lrNGhZMEVCSVdRZ1l5QmtjU0ZsQWtBZ1pVVU5BQ0FGS0FJTUlXWWdCU2dDRUNGbklHWWhhQ0JuSVdrZ2FDQnBSaUZxUVFFaGF5QnFJR3R4SVd3Q1FDQnNSUTBBSUFVb0FoUWhiU0FGS0FJTUlXNUJEQ0Z2SUc0Z2IzVWhjRUVCSVhFZ2NDQnhheUZ5UVFFaGN5QnlJSE4wSVhRZ2JTQjBhaUYxSUhVdkFRQWhka0VRSVhjZ2RpQjNkQ0Y0SUhnZ2QzVWhlVUVDSVhvZ2VTQjZiU0Y3SUFVb0FoZ2hmRUVDSVgwZ2ZDQjlhaUYrSUFVZ2ZqWUNHQ0I4SUhzN0FRQUxJQVVvQWh3aGYwRUFJWUFCSUg4Z2dBRTZBQUFnQlNnQ0JDR0JBVUVCSVlJQklJRUJJSUlCYWlHREFTQUZLQUlrSVlRQklJUUJLQUlBSVlVQklJVUJJSU1CYXlHR0FTQ0VBU0NHQVRZQ0FBd0NDd3dBQ3dBTElBVW9BZ0FoaHdFZ0JTZ0NIQ0dJQVNDSUFTQ0hBVFlDMkFFZ0JTZ0NDQ0dKQVNBRktBSWNJWW9CSUlvQklJa0JOZ0lVSUFVb0Fnd2hpd0VnQlNnQ0hDR01BU0NNQVNDTEFUWUNFQ0FGS0FJc0lZMEJJSTBCS0FLc0NDR09BVUV3SVk4QklBVWdqd0ZxSVpBQklKQUJKQUFnamdFUEM0Y1FBZWtCZnlNQUlRTkJ3QUFoQkNBRElBUnJJUVVnQlNBQU5nSThJQVVnQVRZQ09DQUZJQUkyQWpRZ0JTZ0NPQ0VHSUFZb0FoQWhCeUFGSUFjMkFpd2dCU2dDT0NFSUlBZ29BaFFoQ1NBRklBazJBaWdnQlNnQ09DRUtJQW9vQWdRaEN5QUxLQUlFSVF3Z0JTQU1OZ0lrSUFVb0FqZ2hEU0FOS0FJRUlRNGdEaWdDQUNFUElBVWdEellDSUNBRktBSThJUkFnRUNnQ3JBZ2hFU0FGSUJFMkFod2dCU2dDT0NFU0lCSW9BZ1FoRXlBVEtBSlFJUlFnQlNBVU5nSVlJQVVvQWlRaEZVRUJJUllnRlNBV2RDRVhJQVVnRnpZQ0ZDQUZLQUlnSVJoQkFTRVpJQmdnR1hRaEdpQUZJQm8yQWhBZ0JTZ0NLQ0ViUVFBaEhDQWJJUjBnSENFZUlCMGdIa29oSDBFQklTQWdIeUFnY1NFaEFrQWdJVVVOQUNBRktBSXNJU0lnQlNnQ0lDRWpJQ0loSkNBaklTVWdKQ0FsU0NFbVFRRWhKeUFtSUNkeElTZ2dLRVVOQUNBRktBSWdJU2tnQlNnQ0xDRXFJQ2tnS21zaEt5QUZLQUlvSVN3Z0t5QXNhaUV0UVFFaExpQXRJQzVySVM4Z0JTZ0NLQ0V3SUM4Z01HMGhNU0FGSURFMkFnd2dCU2dDRENFeUlBVW9BalFoTXlBeUlUUWdNeUUxSURRZ05Vb2hOa0VCSVRjZ05pQTNjU0U0QWtBQ1FDQTRSUTBBSUFVb0FqUWhPU0FGSURrMkFneEJBQ0U2SUFVZ09qWUNOQXdCQ3lBRktBSU1JVHNnQlNnQ05DRThJRHdnTzJzaFBTQUZJRDAyQWpRTFFRQWhQaUFGSUQ0MkFnZ0NRQU5BSUFVb0FnZ2hQeUFGS0FJTUlVQWdQeUZCSUVBaFFpQkJJRUpJSVVOQkFTRkVJRU1nUkhFaFJTQkZSUTBCSUFVb0FoZ2hSaUFGS0FJc0lVZEJEQ0ZJSUVjZ1NIVWhTVUVCSVVvZ1NTQktkQ0ZMSUVZZ1Myb2hUQ0JNTHdFQUlVMGdCU0JOT3dFeUlBVW9BaGdoVGlBRktBSXNJVTlCRENGUUlFOGdVSFVoVVVFQklWSWdVU0JTYWlGVFFRRWhWQ0JUSUZSMElWVWdUaUJWYWlGV0lGWXZBUUFoVnlBRklGYzdBVEFnQlM4Qk1pRllRUkFoV1NCWUlGbDBJVm9nV2lCWmRTRmJJQVV2QVRBaFhFRVFJVjBnWENCZGRDRmVJRjRnWFhVaFh5QUZMd0V5SVdCQkVDRmhJR0FnWVhRaFlpQmlJR0YxSVdNZ1h5QmpheUZrSUFVb0Fpd2haVUgvSHlGbUlHVWdabkVoWnlCa0lHZHNJV2hCRENGcElHZ2dhWFloYWlCYklHcHFJV3NnQlNnQ0hDRnNRUUloYlNCc0lHMXFJVzRnQlNCdU5nSWNJR3dnYXpzQkFDQUZLQUlvSVc4Z0JTZ0NMQ0Z3SUhBZ2Iyb2hjU0FGSUhFMkFpd2dCU2dDQ0NGeVFRRWhjeUJ5SUhOcUlYUWdCU0IwTmdJSURBQUxBQXNMQWtBRFFDQUZLQUkwSVhVZ2RVVU5BU0FGS0FJb0lYWkJBQ0YzSUhZaGVDQjNJWGtnZUNCNVNpRjZRUUVoZXlCNklIdHhJWHdDUUFKQUlIeEZEUUFnQlNnQ0pDRjlJSDBoZmd3QkN5QUZLQUlnSVg4Z2Z5RitDeUIrSVlBQklBVW9BaXdoZ1FFZ2dBRWdnUUZySVlJQklBVW9BaWdoZ3dFZ2dnRWdnd0ZxSVlRQlFRRWhoUUVnaEFFZ2hRRnJJWVlCSUFVb0FpZ2hod0VnaGdFZ2h3RnRJWWdCSUFVZ2lBRTJBZ3dnQlNnQ0RDR0pBU0FGS0FJMElZb0JJSWtCSVlzQklJb0JJWXdCSUlzQklJd0JTaUdOQVVFQklZNEJJSTBCSUk0QmNTR1BBUUpBQWtBZ2p3RkZEUUFnQlNnQ05DR1FBU0FGSUpBQk5nSU1RUUFoa1FFZ0JTQ1JBVFlDTkF3QkN5QUZLQUlNSVpJQklBVW9BalFoa3dFZ2t3RWdrZ0ZySVpRQklBVWdsQUUyQWpRTFFRQWhsUUVnQlNDVkFUWUNDQUpBQTBBZ0JTZ0NDQ0dXQVNBRktBSU1JWmNCSUpZQklaZ0JJSmNCSVprQklKZ0JJSmtCU0NHYUFVRUJJWnNCSUpvQklKc0JjU0djQVNDY0FVVU5BU0FGS0FJWUlaMEJJQVVvQWl3aG5nRkJEQ0dmQVNDZUFTQ2ZBWFVob0FGQkFTR2hBU0NnQVNDaEFYUWhvZ0VnblFFZ29nRnFJYU1CSUtNQkx3RUFJYVFCSUFVZ3BBRTdBVElnQlNnQ0dDR2xBU0FGS0FJc0lhWUJRUXdocHdFZ3BnRWdwd0YxSWFnQlFRRWhxUUVncUFFZ3FRRnFJYW9CUVFFaHF3RWdxZ0VncXdGMElhd0JJS1VCSUt3QmFpR3RBU0N0QVM4QkFDR3VBU0FGSUs0Qk93RXdJQVV2QVRJaHJ3RkJFQ0d3QVNDdkFTQ3dBWFFoc1FFZ3NRRWdzQUYxSWJJQklBVXZBVEFoc3dGQkVDRzBBU0N6QVNDMEFYUWh0UUVndFFFZ3RBRjFJYllCSUFVdkFUSWh0d0ZCRUNHNEFTQzNBU0M0QVhRaHVRRWd1UUVndUFGMUlib0JJTFlCSUxvQmF5RzdBU0FGS0FJc0lid0JRZjhmSWIwQklMd0JJTDBCY1NHK0FTQzdBU0MrQVd3aHZ3RkJEQ0hBQVNDL0FTREFBWFlod1FFZ3NnRWd3UUZxSWNJQklBVW9BaHdod3dGQkFpSEVBU0REQVNERUFXb2h4UUVnQlNERkFUWUNIQ0REQVNEQ0FUc0JBQ0FGS0FJb0ljWUJJQVVvQWl3aHh3RWd4d0VneGdGcUljZ0JJQVVneUFFMkFpd2dCU2dDQ0NISkFVRUJJY29CSU1rQklNb0JhaUhMQVNBRklNc0JOZ0lJREFBTEFBc2dCU2dDTENITUFTQUZLQUlrSWMwQklNd0JJYzRCSU0wQkljOEJJTTRCSU04QlRpSFFBVUVCSWRFQklOQUJJTkVCY1NIU0FRSkFBa0FnMGdGRkRRQWdCU2dDRkNIVEFTQUZLQUlzSWRRQklOTUJJTlFCYXlIVkFTQUZJTlVCTmdJc0lBVW9BaWdoMWdGQmZ5SFhBU0RXQVNEWEFXd2gyQUVnQlNEWUFUWUNLQXdCQ3lBRktBSXNJZGtCSUFVb0FpQWgyZ0VnMlFFaDJ3RWcyZ0VoM0FFZzJ3RWczQUZNSWQwQlFRRWgzZ0VnM1FFZzNnRnhJZDhCQWtBZzN3RkZEUUFnQlNnQ0VDSGdBU0FGS0FJc0llRUJJT0FCSU9FQmF5SGlBU0FGSU9JQk5nSXNJQVVvQWlnaDR3RkJmeUhrQVNEakFTRGtBV3doNVFFZ0JTRGxBVFlDS0FzTERBQUxBQXNnQlNnQ0tDSG1BU0FGS0FJNEllY0JJT2NCSU9ZQk5nSVVJQVVvQWl3aDZBRWdCU2dDT0NIcEFTRHBBU0RvQVRZQ0VDQUZLQUk4SWVvQklPb0JLQUtzQ0NIckFTRHJBUThMbGdjQmIzOGpBQ0VEUVRBaEJDQURJQVJySVFVZ0JTQUFOZ0lzSUFVZ0FUWUNLQ0FGSUFJMkFpUWdCU2dDS0NFR0lBWW9BaEFoQnlBRklBYzJBaHdnQlNnQ0tDRUlJQWdvQWhRaENTQUZJQWsyQWhnZ0JTZ0NLQ0VLSUFvb0FnUWhDeUFMS0FJRUlRd2dCU0FNTmdJVUlBVW9BaFFoRFNBRktBSW9JUTRnRGlnQ0JDRVBJQThvQWdBaEVDQU5JQkJySVJFZ0JTQVJOZ0lRSUFVb0Fpd2hFaUFTS0FLc0NDRVRJQVVnRXpZQ0RDQUZLQUlvSVJRZ0ZDZ0NCQ0VWSUJVb0FsQWhGaUFGSUJZMkFnZ0NRQU5BSUFVb0FpUWhGeUFYUlEwQkFrQURRQ0FGS0FJY0lSZ2dCU2dDRkNFWklCZ2hHaUFaSVJzZ0dpQWJUaUVjUVFFaEhTQWNJQjF4SVI0Z0hrVU5BU0FGS0FJUUlSOGdCU2dDSENFZ0lDQWdIMnNoSVNBRklDRTJBaHdNQUFzQUN5QUZLQUlVSVNJZ0JTZ0NIQ0VqSUNJZ0kyc2hKQ0FGS0FJWUlTVWdKQ0FsYWlFbVFRRWhKeUFtSUNkcklTZ2dCU2dDR0NFcElDZ2dLVzBoS2lBRklDbzJBZ1FnQlNnQ0JDRXJJQVVvQWlRaExDQXJJUzBnTENFdUlDMGdMa29oTDBFQklUQWdMeUF3Y1NFeEFrQUNRQ0F4UlEwQUlBVW9BaVFoTWlBRklESTJBZ1JCQUNFeklBVWdNellDSkF3QkN5QUZLQUlFSVRRZ0JTZ0NKQ0UxSURVZ05Hc2hOaUFGSURZMkFpUUxRUUFoTnlBRklEYzJBZ0FDUUFOQUlBVW9BZ0FoT0NBRktBSUVJVGtnT0NFNklEa2hPeUE2SUR0SUlUeEJBU0U5SUR3Z1BYRWhQaUErUlEwQklBVW9BZ2doUHlBRktBSWNJVUJCRENGQklFQWdRWFVoUWtFQklVTWdRaUJEZENGRUlEOGdSR29oUlNCRkx3RUFJVVlnQlNCR093RWlJQVVvQWdnaFJ5QUZLQUljSVVoQkRDRkpJRWdnU1hVaFNrRUJJVXNnU2lCTGFpRk1RUUVoVFNCTUlFMTBJVTRnUnlCT2FpRlBJRTh2QVFBaFVDQUZJRkE3QVNBZ0JTOEJJaUZSUVJBaFVpQlJJRkowSVZNZ1V5QlNkU0ZVSUFVdkFTQWhWVUVRSVZZZ1ZTQldkQ0ZYSUZjZ1ZuVWhXQ0FGTHdFaUlWbEJFQ0ZhSUZrZ1duUWhXeUJiSUZwMUlWd2dXQ0JjYXlGZElBVW9BaHdoWGtIL0h5RmZJRjRnWDNFaFlDQmRJR0JzSVdGQkRDRmlJR0VnWW5ZaFl5QlVJR05xSVdRZ0JTZ0NEQ0ZsUVFJaFppQmxJR1pxSVdjZ0JTQm5OZ0lNSUdVZ1pEc0JBQ0FGS0FJWUlXZ2dCU2dDSENGcElHa2dhR29oYWlBRklHbzJBaHdnQlNnQ0FDRnJRUUVoYkNCcklHeHFJVzBnQlNCdE5nSUFEQUFMQUFzTUFBc0FDeUFGS0FJY0lXNGdCU2dDS0NGdklHOGdiallDRUNBRktBSXNJWEFnY0NnQ3JBZ2hjU0J4RHd2dENRR2FBWDhqQUNFRFFjQUFJUVFnQXlBRWF5RUZJQVVnQURZQ1BDQUZJQUUyQWpnZ0JTQUNOZ0kwSUFVb0Fqd2hCa0c4RFNFSElBWWdCMm9oQ0NBRktBSTRJUWxCN0FFaENpQUpJQXBzSVFzZ0NDQUxhaUVNSUFVZ0REWUNMQ0FGS0FJOElRMGdEU2dDckFnaERpQUZJQTQyQWlnZ0JTZ0NMQ0VQSUE4b0FnUWhFQ0FRS0FKUUlSRWdCU0FSTmdJa0lBVW9BaXdoRWlBU0tBSVFJUk1nQlNBVE5nSWdJQVVvQWl3aEZDQVVLQUlVSVJVZ0JTQVZOZ0ljSUFVb0Fpd2hGaUFXS0FJRUlSY2dGeWdDQ0NFWUlBVWdHRFlDR0NBRktBSTBJUmtnR1NnQ0FDRWFJQVVnR2pZQ0ZDQUZLQUljSVJ0QkFDRWNJQnNoSFNBY0lSNGdIU0FlU0NFZlFRRWhJQ0FmSUNCeElTRUNRQ0FoUlEwQUlBVW9BaHdoSWtFQUlTTWdJeUFpYXlFa0lBVWdKRFlDSEFzZ0JTZ0NHQ0VsSUFVb0FpQWhKaUFsSUNacklTY2dCU2dDSENFb0lDY2dLR29oS1VFQklTb2dLU0FxYXlFcklBVW9BaHdoTENBcklDeHRJUzBnQlNBdE5nSVFJQVVvQWhBaExpQUZLQUlVSVM4Z0xpRXdJQzhoTVNBd0lERktJVEpCQVNFeklESWdNM0VoTkFKQUFrQWdORVVOQUNBRktBSVVJVFVnQlNBMU5nSVFRUUFoTmlBRklEWTJBaFFNQVFzZ0JTZ0NFQ0UzSUFVb0FoUWhPQ0E0SURkcklUa2dCU0E1TmdJVUMwRUFJVG9nQlNBNk5nSU1Ba0FEUUNBRktBSU1JVHNnQlNnQ0VDRThJRHNoUFNBOElUNGdQU0ErU0NFL1FRRWhRQ0EvSUVCeElVRWdRVVVOQVNBRktBSWtJVUlnQlNnQ0lDRkRRUXdoUkNCRElFUjFJVVZCQVNGR0lFVWdSblFoUnlCQ0lFZHFJVWdnU0M4QkFDRkpJQVVnU1RzQk1pQUZLQUlrSVVvZ0JTZ0NJQ0ZMUVF3aFRDQkxJRXgxSVUxQkFTRk9JRTBnVG1vaFQwRUJJVkFnVHlCUWRDRlJJRW9nVVdvaFVpQlNMd0VBSVZNZ0JTQlRPd0V3SUFVdkFUSWhWRUVRSVZVZ1ZDQlZkQ0ZXSUZZZ1ZYVWhWeUFGTHdFd0lWaEJFQ0ZaSUZnZ1dYUWhXaUJhSUZsMUlWc2dCUzhCTWlGY1FSQWhYU0JjSUYxMElWNGdYaUJkZFNGZklGc2dYMnNoWUNBRktBSWdJV0ZCL3g4aFlpQmhJR0p4SVdNZ1lDQmpiQ0ZrUVF3aFpTQmtJR1YySVdZZ1Z5Qm1haUZuSUFVb0FpZ2hhRUVDSVdrZ2FDQnBhaUZxSUFVZ2FqWUNLQ0JvSUdjN0FRQWdCU2dDSENGcklBVW9BaUFoYkNCc0lHdHFJVzBnQlNCdE5nSWdJQVVvQWd3aGJrRUJJVzhnYmlCdmFpRndJQVVnY0RZQ0RBd0FDd0FMSUFVb0FpQWhjU0FGS0FJWUlYSWdjU0Z6SUhJaGRDQnpJSFJPSVhWQkFTRjJJSFVnZG5FaGR3SkFJSGRGRFFBZ0JTZ0NJQ0Y0SUFVb0FoZ2hlU0I0SVhvZ2VTRjdJSG9nZTBZaGZFRUJJWDBnZkNCOWNTRitBa0FnZmtVTkFDQUZLQUlrSVg4Z0JTZ0NJQ0dBQVVFTUlZRUJJSUFCSUlFQmRTR0NBVUVCSVlNQklJSUJJSU1CYXlHRUFVRUJJWVVCSUlRQklJVUJkQ0dHQVNCL0lJWUJhaUdIQVNDSEFTOEJBQ0dJQVVFUUlZa0JJSWdCSUlrQmRDR0tBU0NLQVNDSkFYVWhpd0ZCQWlHTUFTQ0xBU0NNQVcwaGpRRWdCU2dDS0NHT0FVRUNJWThCSUk0QklJOEJhaUdRQVNBRklKQUJOZ0lvSUk0QklJMEJPd0VBQ3lBRktBSXNJWkVCUVFBaGtnRWdrUUVna2dFNkFBQWdCU2dDRkNHVEFVRUJJWlFCSUpNQklKUUJhaUdWQVNBRktBSTBJWllCSUpZQktBSUFJWmNCSUpjQklKVUJheUdZQVNDV0FTQ1lBVFlDQUFzZ0JTZ0NJQ0daQVNBRktBSXNJWm9CSUpvQklKa0JOZ0lRSUFVb0Fqd2htd0VnbXdFb0Fxd0lJWndCSUp3QkR3dUlEUVNnQVg4aWZBRjlBbjRqQUNFRFFjQUFJUVFnQXlBRWF5RUZJQVVrQUNBRklBQTJBamdnQlNBQk5nSTBJQVVnQWpZQ01DQUZLQUkwSVFZZ0JpZ0MwQUVoQjBFQklRZ2dCeUFJYWlFSklBWWdDVFlDMEFGQlB5RUtJQWNoQ3lBS0lRd2dDeUFNVGlFTlFRRWhEaUFOSUE1eElROENRQ0FQUlEwQUlBVW9BalFoRUVFQUlSRWdFQ0FSTmdMUUFRc2dCU2dDTkNFU0lCSW9BdEFCSVJNZ0V4QmRJUlFnQlNBVU5nSW9JQVVvQWpRaEZVSFFBQ0VXSUJVZ0Ztb2hGeUFGS0FJb0lSaEJBaUVaSUJnZ0dYUWhHaUFYSUJwcUlSc2dHeWdDQUNFY0FrQUNRQ0FjUlEwQUlBVW9BakFoSFFKQUlCMUZEUUFnQlNnQ05DRWVRZEFBSVI4Z0hpQWZhaUVnSUFVb0FpZ2hJVUVDSVNJZ0lTQWlkQ0VqSUNBZ0kyb2hKQ0FrS0FJQUlTVkJBQ0VtSUNZZ0pXc2hKeUFGSUNjMkFqd01BZ3NnQlNnQ05DRW9RZEFBSVNrZ0tDQXBhaUVxSUFVb0FpZ2hLMEVDSVN3Z0t5QXNkQ0V0SUNvZ0xXb2hMaUF1S0FJQUlTOGdCU0F2TmdJOERBRUxJQVVvQWpRaE1DQXdLQUlFSVRFZ01TMEFaU0V5UWY4QklUTWdNaUF6Y1NFMFFRY2hOU0EwSURWMElUWWdCU0EyTmdJc0lBVW9BalFoTnlBM0tBSTBJVGdDUUNBNFJRMEFJQVVvQWpRaE9TQTVLQUkwSVRvZ0JTZ0NOQ0U3SURzb0FqZ2hQQ0E4SURwcUlUMGdPeUE5TmdJNElBVW9BalFoUGlBK0tBSTRJVDlCZ0lBRUlVQWdQeUZCSUVBaFFpQkJJRUpPSVVOQkFTRkVJRU1nUkhFaFJRSkFBa0FnUlVVTkFDQUZLQUkwSVVaQkFDRkhJRVlnUnpZQ05Bd0JDeUFGS0FJMElVZ2dTQ2dDT0NGSklBVW9BaXdoU2lCS0lFbHNJVXNnQlNCTE5nSXNJQVVvQWl3aFRFRVFJVTBnVENCTmRTRk9JQVVnVGpZQ0xBc0xJQVVvQWpRaFR5QlBLQUlFSVZBZ1VDZ0NEQ0ZSSUZHM0lhTUJJRThvQWd3aFVpQlN0eUdrQVNDakFTQ2tBYUlocFFFZ1VDZ0NHQ0ZUSUZPM0lhWUJJQVVvQWpnaFZDQlVLQUlJSVZVZ1ZiY2hwd0VncGdFZ3B3R2lJYWdCSUtVQklLZ0JveUdwQVVRQUFBQUFBQUN3UUNHcUFTQ3BBU0NxQWFJaHF3RWdxd0cySWNVQklNVUJ1eUdzQVNBRklLd0JPUU1ZSUFVb0FqUWhWaUJXS0FMUUFTRlhRUVFoV0NCWElGaDBJVmtnV2JjaHJRRkVHQzFFVlBzaGVUOGhyZ0VnclFFZ3JnR2lJYThCSUs4QkVKd0JJYkFCSUFVb0Fpd2hXaUJhdHlHeEFTQ3dBU0N4QWFJaHNnRkJDQ0ZiSUFVZ1cyb2hYQ0JjSUxJQkVMUUJRUkFoWFNBRklGMXFJVjRnWGlrREFDSEdBU0FGS1FNSUljY0JJTWNCSU1ZQkVMVUJJVjhnQlNCZk5nSWtJQVVvQWlRaFlFRUFJV0VnWUNGaUlHRWhZeUJpSUdOSUlXUkJBU0ZsSUdRZ1pYRWhaZ0pBQWtBZ1prVU5BQ0FGS0FJa0lXZEJBQ0ZvSUdnZ1oyc2hhU0FGSUdrMkFpUWdCU2dDSkNGcVFRVWhheUJxSUd0MUlXeEIvd0VoYlNCc0lHMXhJVzVCa0k0RUlXOUJBeUZ3SUc0Z2NIUWhjU0J2SUhGcUlYSWdjaXNEQUNHekFTQUZLQUlrSVhOQkRTRjBJSE1nZEhVaGRVR1FuZ1FoZGtFRElYY2dkU0IzZENGNElIWWdlR29oZVNCNUt3TUFJYlFCSUxNQklMUUJvaUcxQVNBRkt3TVlJYllCSUxZQklMVUJveUczQVNBRklMY0JPUU1ZREFFTElBVW9BaVFoZWtFRklYc2dlaUI3ZFNGOFFmOEJJWDBnZkNCOWNTRitRWkNPQkNGL1FRTWhnQUVnZmlDQUFYUWhnUUVnZnlDQkFXb2hnZ0VnZ2dFckF3QWh1QUVnQlNnQ0pDR0RBVUVOSVlRQklJTUJJSVFCZFNHRkFVR1FuZ1FoaGdGQkF5R0hBU0NGQVNDSEFYUWhpQUVnaGdFZ2lBRnFJWWtCSUlrQkt3TUFJYmtCSUxnQklMa0JvaUc2QVNBRkt3TVlJYnNCSUxzQklMb0JvaUc4QVNBRklMd0JPUU1ZQ3lBRktBSTBJWW9CSUlvQktBSTBJWXNCQWtBZ2l3RU5BQ0FGS3dNWUliMEJJTDBCbVNHK0FVUUFBQUFBQUFEZ1FTRy9BU0MrQVNDL0FXTWhqQUVnakFGRklZMEJBa0FDUUNDTkFRMEFJTDBCcWlHT0FTQ09BU0dQQVF3QkMwR0FnSUNBZUNHUUFTQ1FBU0dQQVFzZ2p3RWhrUUVnQlNnQ05DR1NBVUhRQUNHVEFTQ1NBU0NUQVdvaGxBRWdCU2dDS0NHVkFVRUNJWllCSUpVQklKWUJkQ0dYQVNDVUFTQ1hBV29obUFFZ21BRWdrUUUyQWdBTElBVW9BakFobVFFQ1FDQ1pBVVVOQUNBRkt3TVlJY0FCSU1BQm1pSEJBU0FGSU1FQk9RTVlDeUFGS3dNWUljSUJJTUlCbVNIREFVUUFBQUFBQUFEZ1FTSEVBU0REQVNERUFXTWhtZ0VnbWdGRklac0JBa0FDUUNDYkFRMEFJTUlCcWlHY0FTQ2NBU0dkQVF3QkMwR0FnSUNBZUNHZUFTQ2VBU0dkQVFzZ25RRWhud0VnQlNDZkFUWUNQQXNnQlNnQ1BDR2dBVUhBQUNHaEFTQUZJS0VCYWlHaUFTQ2lBU1FBSUtBQkR3dnZHQVNxQW44d2ZBWitBWDBqQUNFQ1FZQUJJUU1nQWlBRGF5RUVJQVFrQUNBRUlBQTJBbndnQkNBQk5nSjRJQVFvQW5naEJTQUZLQUpRSVFZZ0JDQUdOZ0pNSUFRb0FuZ2hCeUFIS0FJWUlRZ2dDTGNockFJZ0JDZ0NmQ0VKSUFrb0FnZ2hDaUFLdHlHdEFpQ3NBaUN0QXFJaHJnSWdCQ2dDZUNFTElBc29BZ3doRENBTXR5R3ZBaUFFS0FKNElRMGdEUzBBYUNFT1FSZ2hEeUFPSUE5MElSQWdFQ0FQZFNFUlFaQ0NCQ0VTUVFJaEV5QVJJQk4wSVJRZ0VpQVVhaUVWSUJVb0FnQWhGaUFXdHlHd0FpQ3ZBaUN3QXFJaHNRSWdyZ0lnc1FLakliSUNJQVFnc2dJNUEzQWdCQ2dDZUNFWElCY29BZ2doR0NBWXR5R3pBaUFFS3dOd0liUUNJTE1DSUxRQ29pRzFBa1FBQU1ELy8vL2ZRU0cyQWlDMUFpQzJBbVloR1VFQklSb2dHU0FhY1NFYkFrQUNRQ0FiUlEwQURBRUxJQVFvQW5naEhDQWNLQUlJSVIwZ0hiY2h0d0lnQkNzRGNDRzRBaUMzQWlDNEFxSWh1UUlndVFLWklib0NSQUFBQUFBQUFPQkJJYnNDSUxvQ0lMc0NZeUVlSUI1RklSOENRQUpBSUI4TkFDQzVBcW9oSUNBZ0lTRU1BUXRCZ0lDQWdIZ2hJaUFpSVNFTElDRWhJeUFFSUNNMkFsd2dCQ2dDWENFa1FRd2hKU0FrSUNWMUlTWkJBU0VuSUNZZ0oyc2hLQ0FFSUNnMkFsZ2dCQ2dDZUNFcElDa29BZ2doS2tHQUlDRXJJQ29nSzJzaExDQUVLQUpZSVMwZ0xDQXRiU0V1SUFRZ0xqWUNaQ0FFSUM0MkFtQWdCQ2dDWENFdklDKzNJYndDSUFRb0FtUWhNQ0F3dHlHOUFpQzhBaUM5QXFBaHZnSkVBQURBLy8vLzMwRWh2d0lndmdJZ3Z3Sm1JVEZCQVNFeUlERWdNbkVoTXdKQUlETkZEUUFNQVFzZ0JDZ0NYQ0UwUVFzaE5TQTBJRFYxSVRaQkFpRTNJRFlnTjJvaE9DQTRFQXNoT1NBRUlEazJBbFFnQkNBNU5nSlFJQVFvQWxBaE9rRUFJVHNnT2lFOElEc2hQU0E4SUQxSElUNUJBU0UvSUQ0Z1AzRWhRQUpBSUVBTkFDQUVLQUo4SVVGQkFTRkNJRUVnUWpZQ0FBd0JDeUFFS0FKWUlVTkJmeUZFSUVNZ1JHb2hSU0FFSUVVMkFsZ0NRQ0JGUlEwQUlBUW9Ba3doUmlCR0x3RUFJVWNnQkNnQ1VDRklRUUloU1NCSUlFbHFJVW9nQkNCS05nSlFJRWdnUnpzQkFBc2dCQ2dDV0NGTFFYOGhUQ0JMSUV4cUlVMGdCQ0JOTmdKWVFRQWhUaUFFSUU0MkFpd0NRQU5BSUFRb0Fpd2hUeUFFS0FKWUlWQWdUeUZSSUZBaFVpQlJJRkpJSVZOQkFTRlVJRk1nVkhFaFZTQlZSUTBCSUFRb0Frd2hWaUFFS0FKZ0lWZEJEQ0ZZSUZjZ1dIVWhXVUVCSVZvZ1dTQmFkQ0ZiSUZZZ1cyb2hYQ0FFSUZ3MkFrZ2dCQ2dDU0NGZElBUW9Ba3doWGtFQ0lWOGdYaUJmYWlGZ0lGMGhZU0JnSVdJZ1lTQmlUeUZqUVFFaFpDQmpJR1J4SVdVQ1FBSkFJR1ZGRFFBZ0JDZ0NTQ0ZtUVg0aFp5Qm1JR2RxSVdnZ2FDOEJBQ0ZwUVJBaGFpQnBJR3AwSVdzZ2F5QnFkU0ZzSUd3aGJRd0JDMEVBSVc0Z2JpRnRDeUJ0SVc4Z0JDQnZOZ0pBSUFRb0FrZ2hjQ0J3TGdFQUlYRWdCQ0J4TmdJOElBUW9Ba2doY2lCeUxnRUNJWE1nQkNCek5nSTRJQVFvQWtnaGRDQjBMZ0VFSVhVZ0JDQjFOZ0kwSUFRb0Fqd2hkaUFFS0FJNElYY2dkaUIzYXlGNElBUWdlRFlDTUNBRUtBSmdJWGxCL3g4aGVpQjVJSHB4SVh0QkdDRjhJQVFnZkdvaGZTQjlJSHNRdGdGQkNDRitRUmdoZnlBRUlIOXFJWUFCSUlBQklINXFJWUVCSUlFQktRTUFJZHdDSUFRcEF4Z2gzUUpDZ0lDQWdJQ0F3UGsvSWQ0Q1FnQWgzd0pCQ0NHQ0FTQUVJSUlCYWlHREFTQ0RBU0RkQWlEY0FpRGZBaURlQWhDNEFVRUlJWVFCSUFRZ2hBRnFJWVVCSUlVQklINXFJWVlCSUlZQktRTUFJZUFDSUFRcEF3Z2g0UUlnNFFJZzRBSVF1UUVoNGdJZzRnSzdJY0FDSUFRZ3dBSTVBMmdnQkNnQ1BDR0hBU0NIQWJjaHdRSWdCQ3NEYUNIQ0FrUlZWVlZWVlZYRlB5SERBaURDQWlEREFxSWh4QUlnQkNnQ09DR0lBU0FFS0FJd0lZa0JJSWdCSUlrQmF5R0tBVUVESVlzQklJb0JJSXNCYkNHTUFTQUVLQUpBSVkwQlFRRWhqZ0VnalFFZ2pnRjBJWThCSUl3QklJOEJheUdRQVNBRUtBSTBJWkVCSUpBQklKRUJheUdTQVNDU0FiY2h4UUlnQkNzRGFDSEdBaUFFS0FKQUlaTUJJQVFvQWp3aGxBRWdrd0VnbEFGcklaVUJJQVFvQWpBaGxnRWdsUUVnbGdGcklaY0JRUU1obUFFZ2x3RWdtQUZzSVprQklKa0J0eUhIQWlBRUt3Tm9JY2dDSUFRb0FqQWhtZ0ZCQXlHYkFTQ2FBU0NiQVd3aG5BRWdCQ2dDTkNHZEFTQ2NBU0NkQVdvaG5nRWdCQ2dDUUNHZkFTQ2VBU0NmQVdzaG9BRWdvQUczSWNrQ0lNZ0NJTWtDb2lIS0FpREtBaURIQXFBaHl3SWd4Z0lneXdLaUljd0NJTXdDSU1VQ29DSE5BaURFQWlETkFxSWh6Z0lnemdJZ3dRS2dJYzhDSU04Q21TSFFBa1FBQUFBQUFBRGdRU0hSQWlEUUFpRFJBbU1ob1FFZ29RRkZJYUlCQWtBQ1FDQ2lBUTBBSU04Q3FpR2pBU0NqQVNHa0FRd0JDMEdBZ0lDQWVDR2xBU0NsQVNHa0FRc2dwQUVocGdFZ0JDQ21BVFlDUkNBRUtBSkVJYWNCUWYvL0FTR29BU0NuQVNHcEFTQ29BU0dxQVNDcEFTQ3FBVW9ocXdGQkFTR3NBU0NyQVNDc0FYRWhyUUVDUUFKQUlLMEJSUTBBUWYvL0FTR3VBU0N1QVNHdkFRd0JDeUFFS0FKRUliQUJRWUNBZmlHeEFTQ3dBU0d5QVNDeEFTR3pBU0N5QVNDekFVZ2h0QUZCQVNHMUFTQzBBU0MxQVhFaHRnRUNRQUpBSUxZQlJRMEFRWUNBZmlHM0FTQzNBU0c0QVF3QkN5QUVLQUpFSWJrQklMa0JJYmdCQ3lDNEFTRzZBU0M2QVNHdkFRc2dyd0VodXdFZ0JDZ0NVQ0c4QVVFQ0liMEJJTHdCSUwwQmFpRytBU0FFSUw0Qk5nSlFJTHdCSUxzQk93RUFJQVFvQW1RaHZ3RWdCQ2dDWUNIQUFTREFBU0MvQVdvaHdRRWdCQ0RCQVRZQ1lDQUVLQUlzSWNJQlFRRWh3d0Vnd2dFZ3d3RnFJY1FCSUFRZ3hBRTJBaXdNQUFzQUN5QUVLQUpnSWNVQlFmOGZJY1lCSU1VQklNWUJjU0hIQVFKQUFrQWd4d0ZGRFFBZ0JDZ0NUQ0hJQVNBRUtBSmdJY2tCUVF3aHlnRWd5UUVneWdGMUljc0JRUUVoekFFZ3l3RWd6QUYwSWMwQklNZ0JJTTBCYWlIT0FTRE9BUzhCQUNIUEFVRVFJZEFCSU04QklOQUJkQ0hSQVNEUkFTRFFBWFVoMGdFZ0JDRFNBVFlDUUNBRUtBSk1JZE1CSUFRb0FtQWgxQUZCRENIVkFTRFVBU0RWQVhVaDFnRkJBU0hYQVNEV0FTRFhBV29oMkFGQkFTSFpBU0RZQVNEWkFYUWgyZ0VnMHdFZzJnRnFJZHNCSU5zQkx3RUFJZHdCUVJBaDNRRWczQUVnM1FGMElkNEJJTjRCSU4wQmRTSGZBU0FFSU44Qk5nSThJQVFvQWtBaDRBRWdCQ2dDUENIaEFTQUVLQUpBSWVJQklPRUJJT0lCYXlIakFTQUVLQUpnSWVRQlFmOGZJZVVCSU9RQklPVUJjU0htQVNEakFTRG1BV3doNXdGQkRDSG9BU0RuQVNEb0FYWWg2UUVnNEFFZzZRRnFJZW9CSUFRb0FsQWg2d0ZCQWlIc0FTRHJBU0RzQVdvaDdRRWdCQ0R0QVRZQ1VDRHJBU0RxQVRzQkFBd0JDeUFFS0FKTUllNEJJQVFvQW1BaDd3RkJEQ0h3QVNEdkFTRHdBWFVoOFFGQkFTSHlBU0R4QVNEeUFYUWg4d0VnN2dFZzh3RnFJZlFCSVBRQkx3RUFJZlVCSUFRb0FsQWg5Z0ZCQWlIM0FTRDJBU0QzQVdvaCtBRWdCQ0Q0QVRZQ1VDRDJBU0QxQVRzQkFBc2dCQ2dDVUNINUFVRitJZm9CSVBrQklQb0JhaUg3QVNEN0FTOEJBQ0g4QVVFUUlmMEJJUHdCSVAwQmRDSCtBU0QrQVNEOUFYVWgvd0ZCQWlHQUFpRC9BU0NBQW0waGdRSWdCQ2dDVUNHQ0FpQ0NBaUNCQWpzQkFDQUVLQUpRSVlNQ1FRSWhoQUlnZ3dJZ2hBSnFJWVVDSUFRZ2hRSTJBbEFnQkNnQ1VDR0dBa0YrSVljQ0lJWUNJSWNDYWlHSUFpQ0lBaThCQUNHSkFrRVFJWW9DSUlrQ0lJb0NkQ0dMQWlDTEFpQ0tBblVoakFKQkFpR05BaUNNQWlDTkFtMGhqZ0lnQkNnQ1VDR1BBaUNQQWlDT0Fqc0JBQ0FFS0FKY0laQUNJQVFvQW5naGtRSWdrUUlna0FJMkFnZ2dCQ2dDZUNHU0FpQ1NBaWdDQUNHVEFpQ1RBcmNoMGdJZ0JDc0RjQ0hUQWlEU0FpRFRBcUloMUFJZzFBS1pJZFVDUkFBQUFBQUFBT0JCSWRZQ0lOVUNJTllDWXlHVUFpQ1VBa1VobFFJQ1FBSkFJSlVDRFFBZzFBS3FJWllDSUpZQ0laY0NEQUVMUVlDQWdJQjRJWmdDSUpnQ0laY0NDeUNYQWlHWkFpQUVLQUo0SVpvQ0lKb0NJSmtDTmdJQUlBUW9BbmdobXdJZ213SW9BZ1FobkFJZ25BSzNJZGNDSUFRckEzQWgyQUlnMXdJZzJBS2lJZGtDSU5rQ21TSGFBa1FBQUFBQUFBRGdRU0hiQWlEYUFpRGJBbU1oblFJZ25RSkZJWjRDQWtBQ1FDQ2VBZzBBSU5rQ3FpR2ZBaUNmQWlHZ0Fnd0JDMEdBZ0lDQWVDR2hBaUNoQWlHZ0Fnc2dvQUlob2dJZ0JDZ0NlQ0dqQWlDakFpQ2lBallDQkNBRUtBSjRJYVFDSUtRQ0tBSlFJYVVDSUtVQ0VMSUJJQVFvQWxRaHBnSWdCQ2dDZUNHbkFpQ25BaUNtQWpZQ1VDQUVLQUo0SWFnQ1FRQWhxUUlncUFJZ3FRSTJBZ3dMUVlBQklhb0NJQVFncWdKcUlhc0NJS3NDSkFBUEM5RUJBUnQvSXdBaEFVRVFJUUlnQVNBQ2F5RURJQU1nQURZQ0NDQURLQUlJSVFSQkVDRUZJQVFoQmlBRklRY2dCaUFIU0NFSVFRRWhDU0FJSUFseElRb0NRQUpBSUFwRkRRQWdBeWdDQ0NFTFFROGhEQ0FNSUF0cklRMGdBeUFOTmdJTURBRUxJQU1vQWdnaERrRXdJUThnRGlFUUlBOGhFU0FRSUJGT0lSSkJBU0VUSUJJZ0UzRWhGQUpBSUJSRkRRQWdBeWdDQ0NFVlFjOEFJUllnRmlBVmF5RVhJQU1nRnpZQ0RBd0JDeUFES0FJSUlSaEJFQ0VaSUJnZ0dXc2hHaUFESUJvMkFnd0xJQU1vQWd3aEd5QWJEd3VkQXdFdWZ5TUFJUUpCSUNFRElBSWdBMnNoQkNBRUpBQWdCQ0FBTmdJWUlBUWdBVFlDRkVFVUlRVWdCUkN3QVNFR0lBUWdCallDRENBRUtBSU1JUWRCQUNFSUlBY2hDU0FJSVFvZ0NTQUtSaUVMUVFFaERDQUxJQXh4SVEwQ1FBSkFJQTFGRFFCQkFDRU9JQVFnRGpZQ0hBd0JDMEVNSVE4Z0R4Q3dBU0VRSUFRZ0VEWUNFQ0FFS0FJUUlSRkJBQ0VTSUJFaEV5QVNJUlFnRXlBVVJpRVZRUUVoRmlBVklCWnhJUmNDUUNBWFJRMEFJQVFvQWd3aEdDQVlFTElCUVFBaEdTQUVJQmsyQWh3TUFRc2dCQ2dDR0NFYUlBUW9BaEFoR3lBYklCbzJBZ0FnQkNnQ0dDRWNJQVFvQWhBaEhTQWRJQncyQWdRZ0JDZ0NHQ0VlSUFRb0FoUWhIeUFlSUI5cUlTQWdCQ2dDRUNFaElDRWdJRFlDQ0NBRUtBSVFJU0lnQkNnQ0RDRWpJQ01nSWpZQ0VDQUVLQUlNSVNSQkFTRWxJQ1FnSlRZQ0FDQUVLQUlNSVNaQkFpRW5JQ1lnSnpZQ0JDQUVLQUlNSVNoQkF5RXBJQ2dnS1RZQ0NDQUVLQUlNSVNwQkJDRXJJQ29nS3pZQ0RDQUVLQUlNSVN3Z0JDQXNOZ0ljQ3lBRUtBSWNJUzFCSUNFdUlBUWdMbW9oTHlBdkpBQWdMUThMaWdNQkszOGpBQ0VFUVNBaEJTQUVJQVZySVFZZ0JpUUFJQVlnQURZQ0dDQUdJQUUyQWhRZ0JpQUNOZ0lRSUFZZ0F6WUNEQ0FHS0FJWUlRY2dCaUFITmdJSUlBWW9BZ3doQ0NBR0lBZzJBZ1FnQmlnQ0NDRUpJQWtvQWdRaENpQUdLQUlFSVFzZ0JpZ0NFQ0VNSUFzZ0RHd2hEU0FLSUExcUlRNGdCaWdDQ0NFUElBOG9BZ2doRUNBT0lSRWdFQ0VTSUJFZ0Vrc2hFMEVCSVJRZ0V5QVVjU0VWQWtBZ0ZVVU5BQ0FHS0FJSUlSWWdGaWdDQ0NFWElBWW9BZ2doR0NBWUtBSUVJUmtnRnlBWmF5RWFJQVlvQWhBaEd5QWFJQnR1SVJ3Z0JpQWNOZ0lFQ3lBR0tBSUVJUjBDUUFKQUlCME5BRUVBSVI0Z0JpQWVOZ0ljREFFTElBWW9BaFFoSHlBR0tBSUlJU0FnSUNnQ0JDRWhJQVlvQWdRaElpQUdLQUlRSVNNZ0lpQWpiQ0VrSUI4Z0lTQWtFSGdhSUFZb0FnUWhKU0FHS0FJUUlTWWdKU0FtYkNFbklBWW9BZ2doS0NBb0tBSUVJU2tnS1NBbmFpRXFJQ2dnS2pZQ0JDQUdLQUlFSVNzZ0JpQXJOZ0ljQ3lBR0tBSWNJU3hCSUNFdElBWWdMV29oTGlBdUpBQWdMQThMMHdNQk5IOGpBQ0VEUVNBaEJDQURJQVJySVFVZ0JTQUFOZ0lZSUFVZ0FUWUNGQ0FGSUFJMkFoQWdCU2dDR0NFR0lBVWdCallDRENBRktBSVFJUWRCQWlFSUlBY2dDRXNhQWtBQ1FBSkFBa0FDUUFKQUlBY09Bd0FCQWdNTERBTUxJQVVvQWd3aENTQUpLQUlFSVFvZ0JTZ0NEQ0VMSUFzb0FnQWhEQ0FLSUF4cklRMGdCU2dDRkNFT0lBNGdEV29oRHlBRklBODJBaFFNQWdzZ0JTZ0NEQ0VRSUJBb0FnZ2hFU0FGS0FJTUlSSWdFaWdDQUNFVElCRWdFMnNoRkNBRktBSVVJUlVnRlNBVWFpRVdJQVVnRmpZQ0ZBd0JDMEYvSVJjZ0JTQVhOZ0ljREFFTElBVW9BaFFoR0VFQUlSa2dHQ0VhSUJraEd5QWFJQnRJSVJ4QkFTRWRJQndnSFhFaEhnSkFJQjVGRFFCQmZ5RWZJQVVnSHpZQ0hBd0JDeUFGS0FJVUlTQWdCU2dDRENFaElDRW9BZ2doSWlBRktBSU1JU01nSXlnQ0FDRWtJQ0lnSkdzaEpTQWdJU1lnSlNFbklDWWdKMG9oS0VFQklTa2dLQ0FwY1NFcUFrQWdLa1VOQUNBRktBSU1JU3NnS3lnQ0NDRXNJQVVvQWd3aExTQXRLQUlBSVM0Z0xDQXVheUV2SUFVZ0x6WUNGQXNnQlNnQ0RDRXdJREFvQWdBaE1TQUZLQUlVSVRJZ01TQXlhaUV6SUFVb0Fnd2hOQ0EwSURNMkFnUkJBQ0UxSUFVZ05UWUNIQXNnQlNnQ0hDRTJJRFlQQzA0QkNYOGpBQ0VCUVJBaEFpQUJJQUpySVFNZ0F5QUFOZ0lNSUFNb0Fnd2hCQ0FESUFRMkFnZ2dBeWdDQ0NFRklBVW9BZ1FoQmlBREtBSUlJUWNnQnlnQ0FDRUlJQVlnQ0dzaENTQUpEd3RBQVFkL0l3QWhBVUVRSVFJZ0FTQUNheUVESUFNa0FDQURJQUEyQWd3Z0F5Z0NEQ0VFSUFRUXNnRkJBQ0VGUVJBaEJpQURJQVpxSVFjZ0J5UUFJQVVQQzRVQkFRMS9Jd0FoQkVFUUlRVWdCQ0FGYXlFR0lBWWtBQ0FHSUFBMkFnd2dCaUFCTmdJSUlBWWdBallDQkNBR0lBTTJBZ0FnQmlnQ0RDRUhJQWNvQWdBaENDQUdLQUlNSVFrZ0NTZ0NFQ0VLSUFZb0FnZ2hDeUFHS0FJRUlRd2dCaWdDQUNFTklBb2dDeUFNSUEwZ0NCRUdBQ0VPUVJBaER5QUdJQTlxSVJBZ0VDUUFJQTRQQzNVQkRIOGpBQ0VEUVJBaEJDQURJQVJySVFVZ0JTUUFJQVVnQURZQ0RDQUZJQUUyQWdnZ0JTQUNOZ0lFSUFVb0Fnd2hCaUFHS0FJRUlRY2dCU2dDRENFSUlBZ29BaEFoQ1NBRktBSUlJUW9nQlNnQ0JDRUxJQWtnQ2lBTElBY1JBUUFoREVFUUlRMGdCU0FOYWlFT0lBNGtBQ0FNRHd0VkFRcC9Jd0FoQVVFUUlRSWdBU0FDYXlFRElBTWtBQ0FESUFBMkFnd2dBeWdDRENFRUlBUW9BZ2doQlNBREtBSU1JUVlnQmlnQ0VDRUhJQWNnQlJFQUFDRUlRUkFoQ1NBRElBbHFJUW9nQ2lRQUlBZ1BDN01CQVJWL0l3QWhBa0VRSVFNZ0FpQURheUVFSUFRa0FDQUVJQUEyQWdnZ0JDQUJOZ0lFSUFRb0FnZ2hCU0FGS0FJRUlRWWdCQ2dDQ0NFSElBY29BaEFoQ0NBRUtBSUVJUWxCQVNFS0lBZ2dDU0FLSUFZUkFRQWhDMEVBSVF3Z0N5RU5JQXdoRGlBTklBNUlJUTlCQVNFUUlBOGdFSEVoRVFKQUFrQWdFVVVOQUVGL0lSSWdCQ0FTTmdJTURBRUxRUUFoRXlBRUlCTTJBZ3dMSUFRb0Fnd2hGRUVRSVJVZ0JDQVZhaUVXSUJZa0FDQVVEd3R2QVF4L0l3QWhBVUVRSVFJZ0FTQUNheUVESUFNa0FDQURJQUEyQWd3Z0F5Z0NEQ0VFSUFRb0Fnd2hCU0FES0FJTUlRWWdCaWdDRUNFSElBY2dCUkVBQUNFSUlBTWdDRFlDQ0NBREtBSU1JUWtnQ1JDeUFTQURLQUlJSVFwQkVDRUxJQU1nQzJvaERDQU1KQUFnQ2c4TFBnRUhmMEVBSVFCQkFDRUJJQUVnQURZQzhMd0VRUUFoQWtFQUlRTWdBeUFDTmdMd3dBUkJBQ0VFUVFBaEJTQUZJQVEyQXZERUJCQnBJUVlnQmc4TG5BTUJPSDhqQUNFQVFSQWhBU0FBSUFGcklRSWdBaVFBUVlRRUlRTWdBeEFMSVFSQkFDRUZJQVVnQkRZQzhMd0VRUUFoQmlBR0tBTHd2QVFoQjBFQUlRZ2dCeUVKSUFnaENpQUpJQXBISVF0QkFTRU1JQXNnREhFaERRSkFBa0FDUUNBTkRRQU1BUXRCZ0J3aERpQU9FQXNoRDBFQUlSQWdFQ2dDOEx3RUlSRWdFU0FQTmdJQVFRQWhFaUFTS0FMd3ZBUWhFeUFUS0FJQUlSUkJBQ0VWSUJRaEZpQVZJUmNnRmlBWFJ5RVlRUUVoR1NBWUlCbHhJUm9DUUNBYURRQU1BUXRCaEFRaEd5QWJFQXNoSEVFQUlSMGdIU0FjTmdMd3dBUkJBQ0VlSUI0b0F2REFCQ0VmUVFBaElDQWZJU0VnSUNFaUlDRWdJa2NoSTBFQklTUWdJeUFrY1NFbEFrQWdKUTBBREFFTFFZQWNJU1lnSmhBTElTZEJBQ0VvSUNnb0F2REFCQ0VwSUNrZ0p6WUNBRUVBSVNvZ0tpZ0M4TUFFSVNzZ0t5Z0NBQ0VzUVFBaExTQXNJUzRnTFNFdklDNGdMMGNoTUVFQklURWdNQ0F4Y1NFeUFrQWdNZzBBREFFTFFRQWhNeUFDSURNMkFnd01BUXNRYWtGK0lUUWdBaUEwTmdJTUN5QUNLQUlNSVRWQkVDRTJJQUlnTm1vaE55QTNKQUFnTlE4THJnb0Jxd0YvSXdBaEFFRVFJUUVnQUNBQmF5RUNJQUlrQUVFQUlRTWdBeWdDOE1RRUlRUkJBQ0VGSUFRaEJpQUZJUWNnQmlBSFJ5RUlRUUVoQ1NBSUlBbHhJUW9DUUNBS1JRMEFRUUFoQ3lBQ0lBczJBZ3dDUUFOQUlBSW9BZ3doREVFeUlRMGdEQ0VPSUEwaER5QU9JQTlJSVJCQkFTRVJJQkFnRVhFaEVpQVNSUTBCUVFBaEV5QVRLQUx3eEFRaEZDQUNLQUlNSVJWQkFpRVdJQlVnRm5RaEZ5QVVJQmRxSVJnZ0dDZ0NBQ0VaUVFBaEdpQVpJUnNnR2lFY0lCc2dIRWNoSFVFQklSNGdIU0FlY1NFZkFrQWdIMFVOQUVFQUlTQWdJQ2dDOE1RRUlTRWdBaWdDRENFaVFRSWhJeUFpSUNOMElTUWdJU0FrYWlFbElDVW9BZ0FoSmlBbUVIMGFDeUFDS0FJTUlTZEJBU0VvSUNjZ0tHb2hLU0FDSUNrMkFnd01BQXNBQzBFQUlTb2dLaWdDOE1RRUlTc2dLeEN5QVVFQUlTeEJBQ0V0SUMwZ0xEWUM4TVFFQzBFQUlTNGdBaUF1TmdJTUFrQURRQ0FDS0FJTUlTOUJnQUVoTUNBdklURWdNQ0V5SURFZ01rZ2hNMEVCSVRRZ015QTBjU0UxSURWRkRRRWdBaWdDRENFMlFmQzhCQ0UzUVFJaE9DQTJJRGgwSVRrZ055QTVhaUU2SURvb0FnQWhPMEVBSVR3Z095RTlJRHdoUGlBOUlENUhJVDlCQVNGQUlEOGdRSEVoUVFKQUlFRkZEUUFnQWlnQ0RDRkNRZkM4QkNGRFFRSWhSQ0JDSUVSMElVVWdReUJGYWlGR0lFWW9BZ0FoUnlCSEtBSUFJVWdnQWlCSU5nSUVJQUlvQWdRaFNVRUFJVW9nU1NGTElFb2hUQ0JMSUV4SElVMUJBU0ZPSUUwZ1RuRWhUd0pBSUU5RkRRQkJBQ0ZRSUFJZ1VEWUNDQUpBQTBBZ0FpZ0NDQ0ZSUVlBQklWSWdVU0ZUSUZJaFZDQlRJRlJJSVZWQkFTRldJRlVnVm5FaFZ5QlhSUTBCSUFJb0FnUWhXQ0FDS0FJSUlWbEJIQ0ZhSUZrZ1dtd2hXeUJZSUZ0cUlWd2dYQ2dDQUNGZElGMFFzZ0VnQWlnQ0NDRmVRUUVoWHlCZUlGOXFJV0FnQWlCZ05nSUlEQUFMQUFzZ0FpZ0NCQ0ZoSUdFUXNnRUxJQUlvQWd3aFlrSHd2QVFoWTBFQ0lXUWdZaUJrZENGbElHTWdaV29oWmlCbUtBSUFJV2NnWnhDeUFTQUNLQUlNSVdoQjhMd0VJV2xCQWlGcUlHZ2dhblFoYXlCcElHdHFJV3hCQUNGdElHd2diVFlDQUFzZ0FpZ0NEQ0Z1UWZEQUJDRnZRUUloY0NCdUlIQjBJWEVnYnlCeGFpRnlJSElvQWdBaGMwRUFJWFFnY3lGMUlIUWhkaUIxSUhaSElYZEJBU0Y0SUhjZ2VIRWhlUUpBSUhsRkRRQWdBaWdDRENGNlFmREFCQ0Y3UVFJaGZDQjZJSHgwSVgwZ2V5QjlhaUYrSUg0b0FnQWhmeUIvS0FJQUlZQUJJQUlnZ0FFMkFnQWdBaWdDQUNHQkFVRUFJWUlCSUlFQklZTUJJSUlCSVlRQklJTUJJSVFCUnlHRkFVRUJJWVlCSUlVQklJWUJjU0dIQVFKQUlJY0JSUTBBUVFBaGlBRWdBaUNJQVRZQ0NBSkFBMEFnQWlnQ0NDR0pBVUdBQVNHS0FTQ0pBU0dMQVNDS0FTR01BU0NMQVNDTUFVZ2hqUUZCQVNHT0FTQ05BU0NPQVhFaGp3RWdqd0ZGRFFFZ0FpZ0NBQ0dRQVNBQ0tBSUlJWkVCUVJ3aGtnRWdrUUVna2dGc0laTUJJSkFCSUpNQmFpR1VBU0NVQVNnQ0FDR1ZBU0NWQVJDeUFTQUNLQUlJSVpZQlFRRWhsd0VnbGdFZ2x3RnFJWmdCSUFJZ21BRTJBZ2dNQUFzQUN5QUNLQUlBSVprQklKa0JFTElCQ3lBQ0tBSU1JWm9CUWZEQUJDR2JBVUVDSVp3QklKb0JJSndCZENHZEFTQ2JBU0NkQVdvaG5nRWduZ0VvQWdBaG53RWdud0VRc2dFZ0FpZ0NEQ0dnQVVId3dBUWhvUUZCQWlHaUFTQ2dBU0NpQVhRaG93RWdvUUVnb3dGcUlhUUJRUUFocFFFZ3BBRWdwUUUyQWdBTElBSW9BZ3docGdGQkFTR25BU0NtQVNDbkFXb2hxQUVnQWlDb0FUWUNEQXdBQ3dBTEVBMUJFQ0dwQVNBQ0lLa0JhaUdxQVNDcUFTUUFEd3ZnQVFFWmZ5TUFJUUZCRUNFQ0lBRWdBbXNoQXlBREpBQWdBeUFBTmdJSUVHZ2hCQ0FESUFRMkFnUWdBeWdDQkNFRkFrQUNRQ0FGUlEwQUlBTW9BZ1FoQmlBRElBWTJBZ3dNQVFzZ0F5Z0NDQ0VIUVFBaENDQUhJUWtnQ0NFS0lBa2dDa1loQzBFQklRd2dDeUFNY1NFTkFrQUNRQ0FORFFBZ0F5Z0NDQ0VPSUE0dEFBQWhEMEVZSVJBZ0R5QVFkQ0VSSUJFZ0VIVWhFaUFTRFFFTFFhMkJCQ0VUSUJNUWJDRVVJQU1nRkRZQ0RBd0JDeUFES0FJSUlSVWdGUkJzSVJZZ0F5QVdOZ0lNQ3lBREtBSU1JUmRCRUNFWUlBTWdHR29oR1NBWkpBQWdGdzhMMEFFQkUzOGpBQ0VCUVJBaEFpQUJJQUpySVFNZ0F5UUFJQU1nQURZQ0NDQURLQUlJSVFRZ0JCQnRJUVVnQXlBRk5nSUVJQU1vQWdRaEJnSkFBa0FnQmtVTkFCQnFJQU1vQWdRaEJ5QURJQWMyQWd3TUFRc2dBeWdDQ0NFSVFRQWhDU0FJSUFrUWJpRUtJQU1nQ2pZQ0JDQURLQUlFSVFzQ1FBSkFJQXRGRFFBUWFnd0JDMEVBSVF3Z0RDZ0M4TVFFSVEwZ0RSQ3lBVUVBSVE1QkFDRVBJQThnRGpZQzhNUUVDeUFES0FJRUlSQWdBeUFRTmdJTUN5QURLQUlNSVJGQkVDRVNJQU1nRW1vaEV5QVRKQUFnRVE4TGxRSUJJMzhqQUNFQlFSQWhBaUFCSUFKcklRTWdBeVFBSUFNZ0FEWUNDRUhJQVNFRUlBUVFDeUVGUVFBaEJpQUdJQVUyQXZERUJFRUFJUWNnQnlnQzhNUUVJUWhCQUNFSklBZ2hDaUFKSVFzZ0NpQUxSeUVNUVFFaERTQU1JQTF4SVE0Q1FBSkFJQTROQUVGK0lROGdBeUFQTmdJTURBRUxJQU1vQWdnaEVDQVFFSFVoRVNBRElCRTJBZ1FnQXlnQ0JDRVNRUUFoRXlBU0lSUWdFeUVWSUJRZ0ZVY2hGa0VCSVJjZ0ZpQVhjU0VZQWtBZ0dFVU5BQ0FES0FJSUlSa2dBeWdDQkNFYUlBTW9BZ2doR3lBYUlCdHJJUnhCQVNFZElCd2dIV29oSGlBWklCNFFEQ0VmSUFNZ0h6WUNEQXdCQzBFQUlTQWdBeUFnTmdJTUN5QURLQUlNSVNGQkVDRWlJQU1nSW1vaEl5QWpKQUFnSVE4THZEOEIvZ1ovSXdBaEFrSGdDQ0VESUFJZ0Eyc2hCQ0FFSkFBZ0JDQUFOZ0xZQ0NBRUlBRTJBdFFJSUFRb0F0UUlJUVZCTWlFR0lBVWhCeUFHSVFnZ0J5QUlUaUVKUVFFaENpQUpJQXB4SVFzQ1FBSkFJQXRGRFFCQmZ5RU1JQVFnRERZQzNBZ01BUXNnQkNnQzJBZ2hEU0FORUFvaERrRUFJUThnRHlnQzhNUUVJUkFnQkNnQzFBZ2hFVUVDSVJJZ0VTQVNkQ0VUSUJBZ0Uyb2hGQ0FVSUE0MkFnQkJBQ0VWSUE0aEZpQVZJUmNnRmlBWFJ5RVlRUUVoR1NBWUlCbHhJUm9DUUNBYURRQkJmeUViSUFRZ0d6WUMzQWdNQVF0QkFDRWNJQVFnSERZQ0dFRUFJUjBnQkNBZE5nSUlRWDhoSGlBRUlCNDJBZ1FDUUFKQUEwQkIwQUFoSHlBRUlCOXFJU0FnSUNFaFFRQWhJaUFpS0FMd3hBUWhJeUFFS0FMVUNDRWtRUUloSlNBa0lDVjBJU1lnSXlBbWFpRW5JQ2NvQWdBaEtFR0FDQ0VwSUNFZ0tTQW9FSFloS2tFQUlTc2dLaUVzSUNzaExTQXNJQzFISVM1QkFTRXZJQzRnTDNFaE1DQXdSUTBCSUFRb0FnZ2hNVUVCSVRJZ01TQXlhaUV6SUFRZ016WUNDRUVBSVRRZ0JDQTBOZ0lBUWRBQUlUVWdCQ0ExYWlFMklEWWhOMEdBZ0FRaE9DQTNJRGdRcXdFaE9TQUVJRGsyQWlBZ0JDZ0NJQ0U2UVFBaE95QTZJVHdnT3lFOUlEd2dQVWNoUGtFQklUOGdQaUEvY1NGQUFrQWdRQTBBREFFTElBUW9BaUFoUVVHQmdRUWhRaUJCSUVJUW9BRWhRd0pBSUVNTkFFRUFJVVJCZ0lBRUlVVWdSQ0JGRUtzQklVWWdCQ0JHTmdJZ0lBUW9BaUFoUjBFQUlVZ2dSeUZKSUVnaFNpQkpJRXBISVV0QkFTRk1JRXNnVEhFaFRRSkFJRTBOQUF3Q0N3c2dCQ2dDSUNGT0lFNHRBQUFoVDBFWUlWQWdUeUJRZENGUklGRWdVSFVoVWtFaklWTWdVaUZVSUZNaFZTQlVJRlZHSVZaQkFTRlhJRllnVjNFaFdBSkFJRmhGRFFBTUFRc0RRQ0FFS0FJQUlWbEJJQ0ZhSUFRZ1dtb2hXeUJiSVZ4QkFpRmRJRmtnWFhRaFhpQmNJRjVxSVY4Z1h5Z0NBQ0ZnUVFBaFlTQmdJV0lnWVNGaklHSWdZMGNoWkVFQUlXVkJBU0ZtSUdRZ1puRWhaeUJsSVdnQ1FDQm5SUTBBSUFRb0FnQWhhVUVnSVdvZ0JDQnFhaUZySUdzaGJFRUNJVzBnYVNCdGRDRnVJR3dnYm1vaGJ5QnZLQUlBSVhBZ2NDMEFBQ0Z4UVJnaGNpQnhJSEowSVhNZ2N5QnlkU0YwUVNNaGRTQjBJWFlnZFNGM0lIWWdkMGNoZUNCNElXZ0xJR2doZVVFQklYb2dlU0I2Y1NGN0FrQWdlMFVOQUNBRUtBSUFJWHhCQVNGOUlId2dmV29oZmlBRUlINDJBZ0JCQ2lGL0lINGhnQUVnZnlHQkFTQ0FBU0NCQVVZaGdnRkJBU0dEQVNDQ0FTQ0RBWEVoaEFFQ1FDQ0VBVVVOQUF3QkMwRUFJWVVCUVlDQUJDR0dBU0NGQVNDR0FSQ3JBU0dIQVNBRUtBSUFJWWdCUVNBaGlRRWdCQ0NKQVdvaGlnRWdpZ0VoaXdGQkFpR01BU0NJQVNDTUFYUWhqUUVnaXdFZ2pRRnFJWTRCSUk0QklJY0JOZ0lBREFFTEN5QUVLQUlnSVk4QlFacUJCQ0dRQVNDUEFTQ1FBUkNnQVNHUkFRSkFBa0FDUUNDUkFVVU5BQ0FFS0FJZ0laSUJRWVNBQkNHVEFTQ1NBU0NUQVJDZ0FTR1VBU0NVQVVVTkFDQUVLQUlnSVpVQlFZNkFCQ0dXQVNDVkFTQ1dBUkNnQVNHWEFTQ1hBVVVOQUNBRUtBSWdJWmdCUWVDQUJDR1pBU0NZQVNDWkFSQ2dBU0dhQVNDYUFVVU5BQ0FFS0FJZ0lac0JRYU9BQkNHY0FTQ2JBU0NjQVJDZ0FTR2RBU0NkQVEwQkN3d0JDeUFFS0FJZ0laNEJRWnVBQkNHZkFTQ2VBU0NmQVJDZ0FTR2dBUUpBQWtBZ29BRU5BQXdCQ3lBRUtBSWdJYUVCUWNTQUJDR2lBU0NoQVNDaUFSQ2dBU0dqQVFKQUFrQUNRQ0NqQVVVTkFDQUVLQUlnSWFRQlFhU0JCQ0dsQVNDa0FTQ2xBUkNnQVNHbUFTQ21BUTBCQ3d3QkN5QUVLQUlnSWFjQlFicUJCQ0dvQVNDbkFTQ29BUkNnQVNHcEFRSkFBa0FncVFFTkFBd0JDeUFFS0FJZ0lhb0JRWXlCQkNHckFTQ3FBU0NyQVJDZ0FTR3NBUUpBQWtBZ3JBRU5BQXdCQ3lBRUtBSWdJYTBCUWFlQUJDR3VBU0N0QVNDdUFSQ2dBU0d2QVFKQUFrQUNRQ0N2QVVVTkFDQUVLQUlnSWJBQlFheUFCQ0d4QVNDd0FTQ3hBUkNnQVNHeUFTQ3lBUTBCQ3d3QkN5QUVLQUlnSWJNQlFjV0JCQ0cwQVNDekFTQzBBUkNnQVNHMUFRSkFBa0FndFFFTkFBd0JDeUFFS0FJZ0liWUJRZjJBQkNHM0FTQzJBU0MzQVJDZ0FTRzRBUUpBQWtBZ3VBRU5BQXdCQ3lBRUtBSWdJYmtCUWRXQUJDRzZBU0M1QVNDNkFSQ2dBU0c3QVFKQUFrQWd1d0VOQUNBRUtBSUFJYndCUVFJaHZRRWd2QUVodmdFZ3ZRRWh2d0VndmdFZ3Z3RklJY0FCUVFFaHdRRWd3QUVnd1FGeEljSUJBa0Fnd2dGRkRRQU1EUXRCQVNIREFTQUVJTU1CTmdJVUFrQURRQ0FFS0FJVUljUUJJQVFvQWdBaHhRRWd4QUVoeGdFZ3hRRWh4d0VneGdFZ3h3RklJY2dCUVFFaHlRRWd5QUVneVFGeEljb0JJTW9CUlEwQklBUW9BaFFoeXdGQklDSE1BU0FFSU13QmFpSE5BU0ROQVNIT0FVRUNJYzhCSU1zQklNOEJkQ0hRQVNET0FTRFFBV29oMFFFZzBRRW9BZ0FoMGdFZ0JDZ0NGQ0hUQVVFZ0lkUUJJQVFnMUFGcUlkVUJJTlVCSWRZQlFRSWgxd0VnMHdFZzF3RjBJZGdCSU5ZQklOZ0JhaUhaQVNEWkFTZ0NBQ0hhQVNEYUFSQ2tBU0hiQVNEU0FTRGJBUkFNSWR3QlFRQWgzUUVnM0FFaDNnRWczUUVoM3dFZzNnRWczd0ZJSWVBQlFRRWg0UUVnNEFFZzRRRnhJZUlCQWtBZzRnRkZEUUFNRHdzZ0JDZ0NGQ0hqQVVFQkllUUJJT01CSU9RQmFpSGxBU0FFSU9VQk5nSVVEQUFMQUFzTUFRc2dCQ2dDSUNIbUFVSE9nUVFoNXdFZzVnRWc1d0VRb0FFaDZBRUNRQUpBSU9nQkRRQWdCQ2dDQUNIcEFVRUNJZW9CSU9rQkllc0JJT29CSWV3QklPc0JJT3dCU0NIdEFVRUJJZTRCSU8wQklPNEJjU0h2QVFKQUlPOEJSUTBBREE0TFFRRWg4QUVnQkNEd0FUWUNGQUpBQTBBZ0JDZ0NGQ0h4QVNBRUtBSUFJZklCSVBFQklmTUJJUElCSWZRQklQTUJJUFFCU0NIMUFVRUJJZllCSVBVQklQWUJjU0gzQVNEM0FVVU5BU0FFS0FJVUlmZ0JRU0FoK1FFZ0JDRDVBV29oK2dFZytnRWgrd0ZCQWlIOEFTRDRBU0Q4QVhRaC9RRWcrd0VnL1FGcUlmNEJJUDRCS0FJQUlmOEJJQVFvQXRRSUlZQUNRUUVoZ1FJZ2dBSWdnUUpxSVlJQ0lQOEJJSUlDRUc0aGd3SWdCQ0NEQWpZQ0JDQUVLQUlFSVlRQ0FrQWdoQUpGRFFBTUVBc2dCQ2dDRkNHRkFrRUJJWVlDSUlVQ0lJWUNhaUdIQWlBRUlJY0NOZ0lVREFBTEFBdEJmeUdJQWlBRUlJZ0NOZ0lFREFFTElBUW9BaUFoaVFKQnNZQUVJWW9DSUlrQ0lJb0NFS0FCSVlzQ0FrQUNRQ0NMQWcwQUlBUW9BZ0FoakFKQkFpR05BaUNNQWlHT0FpQ05BaUdQQWlDT0FpQ1BBa2Noa0FKQkFTR1JBaUNRQWlDUkFuRWhrZ0lDUUNDU0FrVU5BQXdQQ3lBRUtBSWtJWk1DUVlERkJDR1VBa0gvQVNHVkFpQ1VBaUNUQWlDVkFoQ21BUnBCQUNHV0FrRUFJWmNDSUpjQ0lKWUNPZ0QveGdRTUFRc2dCQ2dDSUNHWUFrSElnQVFobVFJZ21BSWdtUUlRb0FFaG1nSUNRQUpBSUpvQ0RRQWdCQ2dDQUNHYkFrRUNJWndDSUpzQ0laMENJSndDSVo0Q0lKMENJSjRDU0NHZkFrRUJJYUFDSUo4Q0lLQUNjU0doQWdKQUlLRUNSUTBBREJBTElBUW9BaVFob2dJZ29nSVFkeUdqQWlBRUlLTUNOZ0lVSUFRb0FoUWhwQUpCQUNHbEFpQ2tBaUdtQWlDbEFpR25BaUNtQWlDbkFrZ2hxQUpCQVNHcEFpQ29BaUNwQW5FaHFnSUNRQUpBSUtvQ0RRQWdCQ2dDRkNHckFrSC9BQ0dzQWlDckFpR3RBaUNzQWlHdUFpQ3RBaUN1QWtvaHJ3SkJBU0d3QWlDdkFpQ3dBbkVoc1FJZ3NRSkZEUUVMREJBTElBUW9BaFFoc2dKQjhNQUVJYk1DUVFJaHRBSWdzZ0lndEFKMEliVUNJTE1DSUxVQ2FpRzJBaUMyQWlnQ0FDRzNBa0VBSWJnQ0lMY0NJYmtDSUxnQ0lib0NJTGtDSUxvQ1J5RzdBa0VCSWJ3Q0lMc0NJTHdDY1NHOUFnSkFJTDBDRFFCQmhBUWh2Z0lndmdJUUN5Ry9BaUFFS0FJVUljQUNRZkRBQkNIQkFrRUNJY0lDSU1BQ0lNSUNkQ0hEQWlEQkFpRERBbW9oeEFJZ3hBSWd2d0kyQWdBZ0JDZ0NGQ0hGQWtId3dBUWh4Z0pCQWlISEFpREZBaURIQW5RaHlBSWd4Z0lneUFKcUlja0NJTWtDS0FJQUljb0NRUUFoeXdJZ3lnSWh6QUlneXdJaHpRSWd6QUlnelFKSEljNENRUUVoendJZ3pnSWd6d0p4SWRBQ0FrQWcwQUlOQUF3UkMwR0FIQ0hSQWlEUkFoQUxJZElDSUFRb0FoUWgwd0pCOE1BRUlkUUNRUUloMVFJZzB3SWcxUUowSWRZQ0lOUUNJTllDYWlIWEFpRFhBaWdDQUNIWUFpRFlBaURTQWpZQ0FDQUVLQUlVSWRrQ1FmREFCQ0hhQWtFQ0lkc0NJTmtDSU5zQ2RDSGNBaURhQWlEY0Ftb2gzUUlnM1FJb0FnQWgzZ0lnM2dJb0FnQWgzd0pCQUNIZ0FpRGZBaUhoQWlEZ0FpSGlBaURoQWlEaUFrY2g0d0pCQVNIa0FpRGpBaURrQW5FaDVRSUNRQ0RsQWcwQURCRUxDeUFFS0FJVUllWUNRZkRBQkNIbkFrRUNJZWdDSU9ZQ0lPZ0NkQ0hwQWlEbkFpRHBBbW9oNmdJZzZnSW9BZ0FoNndJZ0JDRHJBallDR0F3QkN5QUVLQUlnSWV3Q1FhaUJCQ0h0QWlEc0FpRHRBaENnQVNIdUFnSkFBa0FnN2dJTkFDQUVLQUlBSWU4Q1FRSWg4QUlnN3dJaDhRSWc4QUloOGdJZzhRSWc4Z0pJSWZNQ1FRRWg5QUlnOHdJZzlBSnhJZlVDQWtBZzlRSkZEUUFNRVFzZ0JDZ0NKQ0gyQWlEMkFoQjNJZmNDSUFRZzl3STJBaFFnQkNnQ0ZDSDRBa0VBSWZrQ0lQZ0NJZm9DSVBrQ0lmc0NJUG9DSVBzQ1NDSDhBa0VCSWYwQ0lQd0NJUDBDY1NIK0FnSkFBa0FnL2dJTkFDQUVLQUlVSWY4Q1FmOEFJWUFESVA4Q0lZRURJSUFESVlJRElJRURJSUlEU2lHREEwRUJJWVFESUlNRElJUURjU0dGQXlDRkEwVU5BUXNNRVFzZ0JDZ0NGQ0dHQTBId3ZBUWhod05CQWlHSUF5Q0dBeUNJQTNRaGlRTWdod01naVFOcUlZb0RJSW9ES0FJQUlZc0RRUUFoakFNZ2l3TWhqUU1nakFNaGpnTWdqUU1namdOSElZOERRUUVoa0FNZ2p3TWdrQU54SVpFREFrQWdrUU1OQUVHRUJDR1NBeUNTQXhBTElaTURJQVFvQWhRaGxBTkI4THdFSVpVRFFRSWhsZ01nbEFNZ2xnTjBJWmNESUpVRElKY0RhaUdZQXlDWUF5Q1RBellDQUNBRUtBSVVJWmtEUWZDOEJDR2FBMEVDSVpzRElKa0RJSnNEZENHY0F5Q2FBeUNjQTJvaG5RTWduUU1vQWdBaG5nTkJBQ0dmQXlDZUF5R2dBeUNmQXlHaEF5Q2dBeUNoQTBjaG9nTkJBU0dqQXlDaUF5Q2pBM0VocEFNQ1FDQ2tBdzBBREJJTFFZQWNJYVVESUtVREVBc2hwZ01nQkNnQ0ZDR25BMEh3dkFRaHFBTkJBaUdwQXlDbkF5Q3BBM1FocWdNZ3FBTWdxZ05xSWFzRElLc0RLQUlBSWF3RElLd0RJS1lETmdJQUlBUW9BaFFoclFOQjhMd0VJYTREUVFJaHJ3TWdyUU1ncndOMEliQURJSzRESUxBRGFpR3hBeUN4QXlnQ0FDR3lBeUN5QXlnQ0FDR3pBMEVBSWJRRElMTURJYlVESUxRREliWURJTFVESUxZRFJ5RzNBMEVCSWJnRElMY0RJTGdEY1NHNUF3SkFJTGtERFFBTUVnc0xJQVFvQWhRaHVnTkI4THdFSWJzRFFRSWh2QU1ndWdNZ3ZBTjBJYjBESUxzRElMMERhaUcrQXlDK0F5Z0NBQ0cvQXlBRUlMOEROZ0lZREFFTElBUW9BZ0Fod0FOQkFpSEJBeURBQXlIQ0F5REJBeUhEQXlEQ0F5RERBMGdoeEFOQkFTSEZBeURFQXlERkEzRWh4Z01DUUFKQUlNWUREUUFnQkNnQ0lDSEhBeURIQXkwQUFDSElBMEVZSWNrRElNZ0RJTWtEZENIS0F5REtBeURKQTNVaHl3TkJNQ0hNQXlETEF5SE5BeURNQXlIT0F5RE5BeURPQTBnaHp3TkJBU0hRQXlEUEF5RFFBM0VoMFFNZzBRTU5BQ0FFS0FJZ0lkSURJTklETFFBQUlkTURRUmdoMUFNZzB3TWcxQU4wSWRVRElOVURJTlFEZFNIV0EwRTVJZGNESU5ZRElkZ0RJTmNESWRrRElOZ0RJTmtEU2lIYUEwRUJJZHNESU5vRElOc0RjU0hjQXlEY0EwVU5BUXNNRUFzZ0JDZ0NJQ0hkQXlEZEF4QjNJZDRESUFRZzNnTTJBaFFnQkNnQ0ZDSGZBMEVBSWVBRElOOERJZUVESU9BREllSURJT0VESU9JRFNDSGpBMEVCSWVRRElPTURJT1FEY1NIbEF3SkFBa0FnNVFNTkFDQUVLQUlVSWVZRFFmOEFJZWNESU9ZREllZ0RJT2NESWVrRElPZ0RJT2tEU2lIcUEwRUJJZXNESU9vRElPc0RjU0hzQXlEc0EwVU5BUXNNRUFzZ0JDZ0NHQ0h0QTBFQUllNERJTzBESWU4RElPNERJZkFESU84RElQQURSeUh4QTBFQklmSURJUEVESVBJRGNTSHpBd0pBSVBNRERRQU1FQXNnQkNnQ0dDSDBBeUQwQXlnQ0FDSDFBeUFFS0FJVUlmWURRUndoOXdNZzlnTWc5d05zSWZnRElQVURJUGdEYWlINUF5RDVBeWdDQUNINkF5RDZBeEN5QVNBRUtBSWtJZnNESVBzREVLUUJJZndEUVFFaC9RTWcvQU1nL1FOcUlmNERJUDRERUFzaC93TWdCQ2dDR0NHQUJDQ0FCQ2dDQUNHQkJDQUVLQUlVSVlJRVFSd2hnd1FnZ2dRZ2d3UnNJWVFFSUlFRUlJUUVhaUdGQkNDRkJDRC9BellDQUNBRUtBSVlJWVlFSUlZRUtBSUFJWWNFSUFRb0FoUWhpQVJCSENHSkJDQ0lCQ0NKQkd3aGlnUWdod1FnaWdScUlZc0VJSXNFS0FJQUlZd0VRUUFoalFRZ2pBUWhqZ1FnalFRaGp3UWdqZ1FnandSSElaQUVRUUVoa1FRZ2tBUWdrUVJ4SVpJRUFrQWdrZ1FOQUF3UUN5QUVLQUlZSVpNRUlKTUVLQUlBSVpRRUlBUW9BaFFobFFSQkhDR1dCQ0NWQkNDV0JHd2hsd1FnbEFRZ2x3UnFJWmdFSUpnRUtBSUFJWmtFSUFRb0FpUWhtZ1FnbVFRZ21nUVFvZ0VhSUFRb0FoZ2htd1FnbXdRb0FnQWhuQVFnQkNnQ0ZDR2RCRUVjSVo0RUlKMEVJSjRFYkNHZkJDQ2NCQ0NmQkdvaG9BUkJmeUdoQkNDZ0JDQ2hCRFlDR0NBRUtBSVlJYUlFSUtJRUtBSUFJYU1FSUFRb0FoUWhwQVJCSENHbEJDQ2tCQ0NsQkd3aHBnUWdvd1FncGdScUlhY0VRWDhocUFRZ3B3UWdxQVEyQWhRZ0JDZ0NHQ0dwQkNDcEJDZ0NBQ0dxQkNBRUtBSVVJYXNFUVJ3aHJBUWdxd1FnckFSc0lhMEVJS29FSUswRWFpR3VCRUYvSWE4RUlLNEVJSzhFTmdJUUlBUW9BaGdoc0FRZ3NBUW9BZ0Foc1FRZ0JDZ0NGQ0d5QkVFY0liTUVJTElFSUxNRWJDRzBCQ0N4QkNDMEJHb2h0UVJCZnlHMkJDQzFCQ0MyQkRZQ0RDQUVLQUlZSWJjRUlMY0VLQUlBSWJnRUlBUW9BaFFodVFSQkhDRzZCQ0M1QkNDNkJHd2h1d1FndUFRZ3V3UnFJYndFUVg4aHZRUWd2QVFndlFRMkFnZ2dCQ2dDR0NHK0JDQytCQ2dDQUNHL0JDQUVLQUlVSWNBRVFSd2h3UVFnd0FRZ3dRUnNJY0lFSUw4RUlNSUVhaUhEQkVGL0ljUUVJTU1FSU1RRU5nSUVRUUloeFFRZ0JDREZCRFlDRUFKQUEwQWdCQ2dDRUNIR0JDQUVLQUlBSWNjRUlNWUVJY2dFSU1jRUlja0VJTWdFSU1rRVNDSEtCRUVCSWNzRUlNb0VJTXNFY1NITUJDRE1CRVVOQVNBRUtBSVFJYzBFUVNBaHpnUWdCQ0RPQkdvaHp3UWd6d1FoMEFSQkFpSFJCQ0ROQkNEUkJIUWgwZ1FnMEFRZzBnUnFJZE1FSU5NRUtBSUFJZFFFUVQwaDFRUWcxQVFnMVFRUW5nRWgxZ1FnQkNEV0JEWUNIRUVBSWRjRUlOWUVJZGdFSU5jRUlka0VJTmdFSU5rRVJ5SGFCRUVCSWRzRUlOb0VJTnNFY1NIY0JBSkFJTndFRFFBTUVnc2dCQ2dDSENIZEJFRUJJZDRFSU4wRUlONEVhaUhmQkNBRUlOOEVOZ0ljUVFBaDRBUWczUVFnNEFRNkFBQWdCQ2dDRUNIaEJFRWdJZUlFSUFRZzRnUnFJZU1FSU9NRUllUUVRUUloNVFRZzRRUWc1UVIwSWVZRUlPUUVJT1lFYWlIbkJDRG5CQ2dDQUNIb0JFSHVnQVFoNlFRZzZBUWc2UVFRb0FFaDZnUUNRQUpBSU9vRURRQWdCQ2dDSENIckJDRHJCQkIzSWV3RUlBUWc3QVEyQWd3Z0JDZ0NEQ0h0QkVFQUllNEVJTzBFSWU4RUlPNEVJZkFFSU84RUlQQUVTQ0h4QkVFQklmSUVJUEVFSVBJRWNTSHpCQUpBQWtBZzh3UU5BQ0FFS0FJTUlmUUVRYUFHSWZVRUlQUUVJZllFSVBVRUlmY0VJUFlFSVBjRVNpSDRCRUVCSWZrRUlQZ0VJUGtFY1NINkJDRDZCQTBBSUFRb0Fod2grd1FnK3dRdEFBQWgvQVJCR0NIOUJDRDhCQ0Q5QkhRaC9nUWcvZ1FnL1FSMUlmOEVRVEFoZ0FVZy93UWhnUVVnZ0FVaGdnVWdnUVVnZ2dWSUlZTUZRUUVoaEFVZ2d3VWdoQVZ4SVlVRklJVUZEUUFnQkNnQ0hDR0dCU0NHQlMwQUFDR0hCVUVZSVlnRklJY0ZJSWdGZENHSkJTQ0pCU0NJQlhVaGlnVkJPU0dMQlNDS0JTR01CU0NMQlNHTkJTQ01CU0NOQlVvaGpnVkJBU0dQQlNDT0JTQ1BCWEVoa0FVZ2tBVkZEUUVMREJRTElBUW9BZ3doa1FVZ0JDZ0NHQ0dTQlNDU0JTZ0NBQ0dUQlNBRUtBSVVJWlFGUVJ3aGxRVWdsQVVnbFFWc0laWUZJSk1GSUpZRmFpR1hCU0NYQlNDUkJUWUNDQXdCQ3lBRUtBSVFJWmdGUVNBaG1RVWdCQ0NaQldvaG1nVWdtZ1VobXdWQkFpR2NCU0NZQlNDY0JYUWhuUVVnbXdVZ25RVnFJWjRGSUo0RktBSUFJWjhGUWNDQkJDR2dCU0NmQlNDZ0JSQ2dBU0doQlFKQUFrQWdvUVVOQUNBRUtBSWNJYUlGSUtJRkVIY2hvd1VnQkNDakJUWUNEQ0FFS0FJTUlhUUZRUUFocFFVZ3BBVWhwZ1VncFFVaHB3VWdwZ1VncHdWSUlhZ0ZRUUVocVFVZ3FBVWdxUVZ4SWFvRkFrQUNRQ0NxQlEwQUlBUW9BZ3docXdWQi93QWhyQVVncXdVaHJRVWdyQVVocmdVZ3JRVWdyZ1ZLSWE4RlFRRWhzQVVncndVZ3NBVnhJYkVGSUxFRkRRQWdCQ2dDSENHeUJTQ3lCUzBBQUNHekJVRVlJYlFGSUxNRklMUUZkQ0cxQlNDMUJTQzBCWFVodGdWQk1DRzNCU0MyQlNHNEJTQzNCU0c1QlNDNEJTQzVCVWdodWdWQkFTRzdCU0M2QlNDN0JYRWh2QVVndkFVTkFDQUVLQUljSWIwRklMMEZMUUFBSWI0RlFSZ2h2d1VndmdVZ3Z3VjBJY0FGSU1BRklMOEZkU0hCQlVFNUljSUZJTUVGSWNNRklNSUZJY1FGSU1NRklNUUZTaUhGQlVFQkljWUZJTVVGSU1ZRmNTSEhCU0RIQlVVTkFRc01GUXNnQkNnQ0RDSElCU0FFS0FJWUlja0ZJTWtGS0FJQUljb0ZJQVFvQWhRaHl3VkJIQ0hNQlNETEJTRE1CV3doelFVZ3lnVWd6UVZxSWM0RklNNEZJTWdGTmdJRURBRUxJQVFvQWhBaHp3VkJJQ0hRQlNBRUlOQUZhaUhSQlNEUkJTSFNCVUVDSWRNRklNOEZJTk1GZENIVUJTRFNCU0RVQldvaDFRVWcxUVVvQWdBaDFnVkJsb0VFSWRjRklOWUZJTmNGRUtBQklkZ0ZBa0FDUUNEWUJRMEFJQVFvQWh3aDJRVkIyWUFFSWRvRklOa0ZJTm9GRUtBQklkc0ZBa0FDUUNEYkJRMEFRY0FBSWR3RklBUWczQVUyQWd3TUFRc2dCQ2dDSENIZEJVRy9nQVFoM2dVZzNRVWczZ1VRb0FFaDN3VUNRQUpBSU44RkRRQkJBQ0hnQlNBRUlPQUZOZ0lNREFFTElBUW9BaHdoNFFWQnVZQUVJZUlGSU9FRklPSUZFS0FCSWVNRkFrQUNRQ0RqQlEwQVFmOEFJZVFGSUFRZzVBVTJBZ3dNQVFzZ0JDZ0NIQ0hsQlNEbEJSQjNJZVlGUWVRQUllY0ZJT1lGSU9jRmFpSG9CVUhrQUNIcEJTRG9CU0RwQld3aDZnVkJuUUVoNndVZzZnVWc2d1Z0SWV3RklBUWc3QVUyQWd3TEN3c2dCQ2dDRENIdEJVRUFJZTRGSU8wRkllOEZJTzRGSWZBRklPOEZJUEFGU0NIeEJVRUJJZklGSVBFRklQSUZjU0h6QlFKQUFrQWc4d1VOQUNBRUtBSU1JZlFGUWY4QUlmVUZJUFFGSWZZRklQVUZJZmNGSVBZRklQY0ZTaUg0QlVFQklma0ZJUGdGSVBrRmNTSDZCU0Q2QlEwQUlBUW9BZ3doK3dVZyt3VU5BU0FFS0FJY0lmd0ZJUHdGTFFBQUlmMEZRUmdoL2dVZy9RVWcvZ1YwSWY4RklQOEZJUDRGZFNHQUJrRXRJWUVHSUlBR0lZSUdJSUVHSVlNR0lJSUdJSU1HUnlHRUJrRUJJWVVHSUlRR0lJVUdjU0dHQmlDR0JrVU5BU0FFS0FJY0lZY0dJSWNHTFFBQUlZZ0dRUmdoaVFZZ2lBWWdpUVowSVlvR0lJb0dJSWtHZFNHTEJrRXdJWXdHSUlzR0lZMEdJSXdHSVk0R0lJMEdJSTRHU0NHUEJrRUJJWkFHSUk4R0lKQUdjU0dSQmlDUkJnMEFJQVFvQWh3aGtnWWdrZ1l0QUFBaGt3WkJHQ0dVQmlDVEJpQ1VCblFobFFZZ2xRWWdsQVoxSVpZR1FUa2hsd1lnbGdZaG1BWWdsd1lobVFZZ21BWWdtUVpLSVpvR1FRRWhtd1lnbWdZZ213WnhJWndHSUp3R1JRMEJDd3dXQ3lBRUtBSU1JWjBHSUFRb0FoZ2huZ1lnbmdZb0FnQWhud1lnQkNnQ0ZDR2dCa0VjSWFFR0lLQUdJS0VHYkNHaUJpQ2ZCaUNpQm1vaG93WWdvd1lnblFZMkFnd01BUXNnQkNnQ0VDR2tCa0VnSWFVR0lBUWdwUVpxSWFZR0lLWUdJYWNHUVFJaHFBWWdwQVlncUFaMElha0dJS2NHSUtrR2FpR3FCaUNxQmlnQ0FDR3JCa0g0Z0FRaHJBWWdxd1lnckFZUW9BRWhyUVlDUUFKQUlLMEdEUUFnQkNnQ0hDR3VCa0dYZ0FRaHJ3WWdyZ1lncndZUW9BRWhzQVlDUUFKQUlMQUdEUUFnQkNnQ0dDR3hCaUN4QmlnQ0FDR3lCaUFFS0FJVUliTUdRUndodEFZZ3N3WWd0QVpzSWJVR0lMSUdJTFVHYWlHMkJrRUFJYmNHSUxZR0lMY0dOZ0lVREFFTElBUW9BaHdodUFaQjZZQUVJYmtHSUxnR0lMa0dFS0FCSWJvR0FrQUNRQ0M2QmcwQUlBUW9BaGdodXdZZ3V3WW9BZ0FodkFZZ0JDZ0NGQ0c5QmtFY0liNEdJTDBHSUw0R2JDRy9CaUM4QmlDL0Jtb2h3QVpCQUNIQkJpREFCaURCQmpZQ0VBd0JDd3dZQ3dzTUFRc2dCQ2dDRUNIQ0JrRWdJY01HSUFRZ3d3WnFJY1FHSU1RR0ljVUdRUUloeGdZZ3dnWWd4Z1owSWNjR0lNVUdJTWNHYWlISUJpRElCaWdDQUNISkJrSHlnQVFoeWdZZ3lRWWd5Z1lRb0FFaHl3WUNRQUpBSU1zR0RRQWdCQ2dDSENITUJrR1hnQVFoelFZZ3pBWWd6UVlRb0FFaHpnWUNRQUpBSU00R0RRQWdCQ2dDR0NIUEJpRFBCaWdDQUNIUUJpQUVLQUlVSWRFR1FSd2gwZ1lnMFFZZzBnWnNJZE1HSU5BR0lOTUdhaUhVQmtFQklkVUdJTlFHSU5VR05nSVVEQUVMSUFRb0Fod2gxZ1pCNllBRUlkY0dJTllHSU5jR0VLQUJJZGdHQWtBQ1FDRFlCZzBBSUFRb0FoZ2gyUVlnMlFZb0FnQWgyZ1lnQkNnQ0ZDSGJCa0VjSWR3R0lOc0dJTndHYkNIZEJpRGFCaURkQm1vaDNnWkJBU0hmQmlEZUJpRGZCallDRUF3QkN5QUVLQUljSWVBR1FaK0JCQ0hoQmlEZ0JpRGhCaENnQVNIaUJnSkFBa0FnNGdZTkFDQUVLQUlZSWVNR0lPTUdLQUlBSWVRR0lBUW9BaFFoNVFaQkhDSG1CaURsQmlEbUJtd2g1d1lnNUFZZzV3WnFJZWdHUVFFaDZRWWc2QVlnNlFZMkFoZ01BUXNNR2dzTEN3d0JDd3dXQ3dzTEN3c2dCQ2dDRUNIcUJrRUJJZXNHSU9vR0lPc0dhaUhzQmlBRUlPd0dOZ0lRREFBTEFBc0xDd3NMQ3dzTEN3c0xDd3NMREFBTEFBdEJBQ0h0QmlBRUlPMEdOZ0lFQzBFQUllNEdJTzRHS0FMd3hBUWg3d1lnQkNnQzFBZ2g4QVpCQWlIeEJpRHdCaUR4Qm5RaDhnWWc3d1lnOGdacUlmTUdJUE1HS0FJQUlmUUdJUFFHRUgwYVFRQWg5UVlnOVFZb0F2REVCQ0gyQmlBRUtBTFVDQ0gzQmtFQ0lmZ0dJUGNHSVBnR2RDSDVCaUQyQmlENUJtb2grZ1pCQUNIN0JpRDZCaUQ3QmpZQ0FDQUVLQUlFSWZ3R0lBUWcvQVkyQXR3SUN5QUVLQUxjQ0NIOUJrSGdDQ0grQmlBRUlQNEdhaUgvQmlEL0JpUUFJUDBHRHd0akFRdC9Jd0FoQWtFUUlRTWdBaUFEYXlFRUlBUWtBQ0FFSUFBMkFnd2dCQ0FCTmdJSUlBUW9BZ3doQlNBRUtBSUlJUVpCQkNFSElBUWdCMm9oQ0NBSUlRa2dCU0FHSUFrUWNDQUVLQUlFSVFwQkVDRUxJQVFnQzJvaERDQU1KQUFnQ2c4TDRCb0IvUUovSXdBaEEwRWdJUVFnQXlBRWF5RUZJQVVrQUNBRklBQTJBaHdnQlNBQk5nSVlJQVVnQWpZQ0ZDQUZLQUlVSVFaQkFDRUhJQVlnQnpZQ0FDQUZLQUljSVFoQkFDRUpJQWdoQ2lBSklRc2dDaUFMUnlFTVFRRWhEU0FNSUExeElRNENRQUpBSUE0TkFBd0JDeUFGS0FJWUlROGdEeWdDQUNFUVFhQWZJUkVnRUNFU0lCRWhFeUFTSUJOSUlSUkJBU0VWSUJRZ0ZYRWhGZ0pBQWtBZ0ZnMEFJQVVvQWhnaEZ5QVhLQUlBSVJoQmdOQVBJUmtnR0NFYUlCa2hHeUFhSUJ0S0lSeEJBU0VkSUJ3Z0hYRWhIaUFlUlEwQkN3d0JDeUFGS0FJWUlSOGdIeTBBQmlFZ1FmOEJJU0VnSUNBaGNTRWlRUUVoSXlBaUlTUWdJeUVsSUNRZ0pVY2hKa0VCSVNjZ0ppQW5jU0VvQWtBZ0tFVU5BQ0FGS0FJWUlTa2dLUzBBQmlFcVFmOEJJU3NnS2lBcmNTRXNRUUloTFNBc0lTNGdMU0V2SUM0Z0wwY2hNRUVCSVRFZ01DQXhjU0V5SURKRkRRQU1BUXNnQlNnQ0dDRXpJRE12QVFRaE5FRUlJVFVnTkNBMVJpRTJBa0FDUUFKQUlEWU5BRUVRSVRjZ05DQTNSaUU0SURnTkFFR1FJQ0U1SURRZ09VWWhPaUE2RFFCQmlJQUNJVHNnTkNBN1JpRThJRHdOQUVHUWdBSWhQU0EwSUQxR0lUNGdQZzBBUVpDZ0FpRS9JRFFnUDBjaFFDQkFEUUVMREFFTERBRUxRZFRxQUNGQklFRVFDeUZDSUFVZ1FqWUNFQ0FGS0FJUUlVTkJBQ0ZFSUVNaFJTQkVJVVlnUlNCR1J5RkhRUUVoU0NCSElFaHhJVWtDUUNCSkRRQU1BUXRCQUNGS0lBVWdTallDREFKQUFrQURRQ0FGS0FJTUlVdEJnQUVoVENCTElVMGdUQ0ZPSUUwZ1RrZ2hUMEVCSVZBZ1R5QlFjU0ZSSUZGRkRRRWdCU2dDRENGU1FmQzhCQ0ZUUVFJaFZDQlNJRlIwSVZVZ1V5QlZhaUZXSUZZb0FnQWhWMEVBSVZnZ1Z5RlpJRmdoV2lCWklGcEhJVnRCQVNGY0lGc2dYSEVoWFFKQUlGMUZEUUJCaEFRaFhpQmVFQXNoWHlBRktBSVFJV0JCSENGaElHQWdZV29oWWlBRktBSU1JV05CQWlGa0lHTWdaSFFoWlNCaUlHVnFJV1lnWmlCZk5nSUFJQVVvQWhBaFowRWNJV2dnWnlCb2FpRnBJQVVvQWd3aGFrRUNJV3NnYWlCcmRDRnNJR2tnYkdvaGJTQnRLQUlBSVc1QkFDRnZJRzRoY0NCdklYRWdjQ0J4UnlGeVFRRWhjeUJ5SUhOeElYUUNRQ0IwRFFBTUJBc2dCU2dDRENGMVFmQzhCQ0YyUVFJaGR5QjFJSGQwSVhnZ2RpQjRhaUY1SUhrb0FnQWhlaUI2S0FJQUlYc2dCU2dDRUNGOFFSd2hmU0I4SUgxcUlYNGdCU2dDRENGL1FRSWhnQUVnZnlDQUFYUWhnUUVnZmlDQkFXb2hnZ0VnZ2dFb0FnQWhnd0VnZ3dFZ2V6WUNBQXNnQlNnQ0RDR0VBVUh3d0FRaGhRRkJBaUdHQVNDRUFTQ0dBWFFoaHdFZ2hRRWdod0ZxSVlnQklJZ0JLQUlBSVlrQlFRQWhpZ0VnaVFFaGl3RWdpZ0VoakFFZ2l3RWdqQUZISVkwQlFRRWhqZ0VnalFFZ2pnRnhJWThCQWtBZ2p3RkZEUUJCaEFRaGtBRWdrQUVRQ3lHUkFTQUZLQUlRSVpJQlFad0VJWk1CSUpJQklKTUJhaUdVQVNBRktBSU1JWlVCUVFJaGxnRWdsUUVnbGdGMElaY0JJSlFCSUpjQmFpR1lBU0NZQVNDUkFUWUNBQ0FGS0FJUUlaa0JRWndFSVpvQklKa0JJSm9CYWlHYkFTQUZLQUlNSVp3QlFRSWhuUUVnbkFFZ25RRjBJWjRCSUpzQklKNEJhaUdmQVNDZkFTZ0NBQ0dnQVVFQUlhRUJJS0FCSWFJQklLRUJJYU1CSUtJQklLTUJSeUdrQVVFQklhVUJJS1FCSUtVQmNTR21BUUpBSUtZQkRRQU1CQXNnQlNnQ0RDR25BVUh3d0FRaHFBRkJBaUdwQVNDbkFTQ3BBWFFocWdFZ3FBRWdxZ0ZxSWFzQklLc0JLQUlBSWF3QklLd0JLQUlBSWEwQklBVW9BaEFocmdGQm5BUWhyd0VncmdFZ3J3RnFJYkFCSUFVb0Fnd2hzUUZCQWlHeUFTQ3hBU0N5QVhRaHN3RWdzQUVnc3dGcUliUUJJTFFCS0FJQUliVUJJTFVCSUswQk5nSUFDeUFGS0FJTUliWUJRUUVodHdFZ3RnRWd0d0ZxSWJnQklBVWd1QUUyQWd3TUFBc0FDeUFGS0FJUUlia0JRY1lBSWJvQklMa0JJTG9CTmdJWUlBVW9BaEFodXdGQklDRzhBU0M3QVNDOEFUWUMvR1VnQlNnQ0VDRzlBVUdBQkNHK0FTQzlBU0MrQVRZQ2dHWWdCU2dDR0NHL0FTQy9BU2dDQUNIQUFTQUZLQUlRSWNFQklNRUJJTUFCTmdJSUlBVW9BaEFod2dGQkFDSERBU0RDQVNEREFUWUNEQ0FGS0FJWUljUUJJTVFCTHdFRUljVUJRZi8vQXlIR0FTREZBU0RHQVhFaHh3RkJFQ0hJQVNESEFTRElBWEVoeVFFQ1FDREpBVVVOQUNBRktBSVFJY29CSU1vQktBSU1JY3NCUVFRaHpBRWd5d0VnekFGeUljMEJJTW9CSU0wQk5nSU1DeUFGS0FJWUljNEJJTTRCTHdFRUljOEJRZi8vQXlIUUFTRFBBU0RRQVhFaDBRRkJnSUFDSWRJQklORUJJTklCY1NIVEFRSkFJTk1CUlEwQUlBVW9BaEFoMUFFZzFBRW9BZ3doMVFGQkFpSFdBU0RWQVNEV0FYSWgxd0VnMUFFZzF3RTJBZ3dMSUFVb0FoZ2gyQUVnMkFFdEFBWWgyUUZCL3dFaDJnRWcyUUVnMmdGeElkc0JRUUVoM0FFZzJ3RWgzUUVnM0FFaDNnRWczUUVnM2dGR0lkOEJRUUVoNEFFZzN3RWc0QUZ4SWVFQkFrQWc0UUZGRFFBZ0JTZ0NFQ0hpQVNEaUFTZ0NEQ0hqQVVFQkllUUJJT01CSU9RQmNpSGxBU0RpQVNEbEFUWUNEQXNnQlNnQ0dDSG1BU0RtQVM4QkJDSG5BVUVJSWVnQklPY0JJT2dCUmlIcEFRSkFBa0FDUUFKQUFrQUNRQ0RwQVEwQVFSQWg2Z0VnNXdFZzZnRkdJZXNCSU9zQkRRTkJrQ0FoN0FFZzV3RWc3QUZHSWUwQklPMEJEUVJCaUlBQ0llNEJJT2NCSU80QlJpSHZBUUpBSU84QkRRQkJrSUFDSWZBQklPY0JJUEFCUmlIeEFTRHhBUTBDUVpDZ0FpSHlBU0RuQVNEeUFVWWg4d0VnOHdFTkF3d0dDeUFGS0FJUUlmUUJRUVVoOVFFZzlBRWc5UUUyQXFRSURBVUxJQVVvQWhBaDlnRkJCaUgzQVNEMkFTRDNBVFlDcEFnTUJBc2dCU2dDRUNINEFVRUhJZmtCSVBnQklQa0JOZ0trQ0F3REN5QUZLQUlRSWZvQlFRZ2grd0VnK2dFZyt3RTJBcVFJREFJTElBVW9BaEFoL0FGQkNTSDlBU0Q4QVNEOUFUWUNwQWdNQVFzZ0JTZ0NFQ0grQVVFS0lmOEJJUDRCSVA4Qk5nS2tDQXNnQlNnQ0dDR0FBaUNBQWk4QkNDR0JBa0gvL3dNaGdnSWdnUUlnZ2dKeElZTUNJQVVvQWhBaGhBSWdoQUlnZ3dJMkFxZ0lJQVVvQWhnaGhRSWdoUUl2QVFnaGhnSkIvLzhESVljQ0lJWUNJSWNDY1NHSUFrRUJJWWtDSUlnQ0lJa0NkQ0dLQWlDS0FoQUxJWXNDSUFVb0FoQWhqQUlnakFJZ2l3STJBcXdJSUFVb0FoQWhqUUlnalFJb0Fxd0lJWTRDUVFBaGp3SWdqZ0loa0FJZ2p3SWhrUUlna0FJZ2tRSkhJWklDUVFFaGt3SWdrZ0lna3dKeElaUUNBa0FnbEFJTkFBd0JDeUFGS0FJWUlaVUNJSlVDTHdFSUlaWUNRZi8vQXlHWEFpQ1dBaUNYQW5FaG1BSkJBU0daQWlDWUFpQ1pBblFobWdKQkFpR2JBaUNhQWlDYkFuUWhuQUlnbkFJUUN5R2RBaUFGS0FJUUlaNENJSjRDSUowQ05nS3dDQ0FGS0FJUUlaOENJSjhDS0FLd0NDR2dBa0VBSWFFQ0lLQUNJYUlDSUtFQ0lhTUNJS0lDSUtNQ1J5R2tBa0VCSWFVQ0lLUUNJS1VDY1NHbUFnSkFJS1lDRFFBTUFRc2dCU2dDRUNHbkFrRUNJYWdDSUtjQ0lLZ0NOZ0lRSUFVb0FoQWhxUUlncVFJb0Fnd2hxZ0pCQkNHckFpQ3FBaUNyQW5FaHJBSUNRQ0NzQWtVTkFDQUZLQUlRSWEwQ0lLMENLQUlRSWE0Q1FRRWhyd0lncmdJZ3J3SjBJYkFDSUswQ0lMQUNOZ0lRQ3lBRktBSVFJYkVDSUxFQ0tBSU1JYklDUVFFaHN3SWdzZ0lnc3dKeEliUUNBa0FndEFKRkRRQWdCU2dDRUNHMUFpQzFBaWdDRUNHMkFrRUNJYmNDSUxZQ0lMY0NiU0c0QWlDMUFpQzRBallDRUFzZ0JTZ0NHQ0c1QWlDNUFpZ0NBQ0c2QWtIb0J5RzdBaUM2QWlDN0FtMGh2QUlnQlNnQ0VDRzlBaUM5QWlDOEFqWUNoR1lnQlNnQ0VDRytBaUMrQWlnQ2hHWWh2d0pCQVNIQUFpQy9BaUhCQWlEQUFpSENBaURCQWlEQ0FrZ2h3d0pCQVNIRUFpRERBaURFQW5FaHhRSUNRQUpBSU1VQ1JRMEFJQVVvQWhBaHhnSkJBU0hIQWlER0FpREhBallDaEdZTUFRc2dCU2dDRUNISUFpRElBaWdDaEdZaHlRSkIvd0VoeWdJZ3lRSWh5d0lneWdJaHpBSWd5d0lnekFKS0ljMENRUUVoemdJZ3pRSWd6Z0p4SWM4Q0FrQWd6d0pGRFFBZ0JTZ0NFQ0hRQWtIL0FTSFJBaURRQWlEUkFqWUNoR1lMQ3lBRktBSVFJZElDUVFBaDB3SWcwZ0lnMHdJMkFvaG1JQVVvQWhBaDFBSkJBQ0hWQWlEVUFpRFZBallDakdZZ0JTZ0NIQ0hXQWlBRktBSVFJZGNDSUFVb0FoQWgyQUpCck9ZQUlka0NJTmdDSU5rQ2FpSGFBaUFGS0FJUUlkc0NRWkRtQUNIY0FpRGJBaURjQW1vaDNRSWcxZ0lnMXdJZzJnSWczUUlRVENIZUFpQUZLQUlRSWQ4Q0lOOENJTjRDTmdLVVppQUZLQUlRSWVBQ0lPQUNLQUtVWmlIaEFrRUFJZUlDSU9FQ0llTUNJT0lDSWVRQ0lPTUNJT1FDUnlIbEFrRUJJZVlDSU9VQ0lPWUNjU0huQWdKQUlPY0NEUUFNQVFzZ0JTZ0NFQ0hvQWtFQUlla0NJT2dDSU9rQ05nS2NDQ0FGS0FJUUllb0NRUUFoNndJZzZnSWc2d0kyQXFBSVFRQWg3QUlnN0FJdEFJREZCQ0h0QWtFQUllNENRZjhCSWU4Q0lPMENJTzhDY1NId0FrSC9BU0h4QWlEdUFpRHhBbkVoOGdJZzhBSWc4Z0pISWZNQ1FRRWg5QUlnOHdJZzlBSnhJZlVDQWtBZzlRSkZEUUFnQlNnQ0VDSDJBa0dBeFFRaDl3SWc5Z0lnOXdJUUZCb0xJQVVvQWhBaCtBSWcrQUlRRGhvZ0JTZ0NFQ0g1QWlENUFpZ0NBQ0g2QWdKQUlQb0NEUUFnQlNnQ0VDSDdBaUFGS0FJVUlmd0NJUHdDSVBzQ05nSUFEQUlMQ3lBRktBSVFJZjBDSVAwQ0VIRUxRU0FoL2dJZ0JTRCtBbW9oL3dJZy93SWtBQThMcEFVQlZuOGpBQ0VCUVJBaEFpQUJJQUpySVFNZ0F5UUFJQU1nQURZQ0RDQURLQUlNSVFSQkFDRUZJQVFoQmlBRklRY2dCaUFIUnlFSVFRRWhDU0FJSUFseElRb0NRQUpBSUFvTkFBd0JDeUFES0FJTUlRc2dDeEFSUVFBaERDQURJQXcyQWdnQ1FBTkFJQU1vQWdnaERVR0FBU0VPSUEwaER5QU9JUkFnRHlBUVNDRVJRUUVoRWlBUklCSnhJUk1nRTBVTkFTQURLQUlNSVJSQkhDRVZJQlFnRldvaEZpQURLQUlJSVJkQkFpRVlJQmNnR0hRaEdTQVdJQmxxSVJvZ0dpZ0NBQ0ViSUJzUXNnRWdBeWdDRENFY1Fad0VJUjBnSENBZGFpRWVJQU1vQWdnaEgwRUNJU0FnSHlBZ2RDRWhJQjRnSVdvaElpQWlLQUlBSVNNZ0l4Q3lBU0FES0FJSUlTUkJBU0VsSUNRZ0pXb2hKaUFESUNZMkFnZ01BQXNBQ3lBREtBSU1JU2NnSnlnQ3NBZ2hLQ0FvRUxJQklBTW9BZ3doS1NBcEtBS3NDQ0VxSUNvUXNnRWdBeWdDRENFcklDc29BcFJtSVN3Z0xCQ3lBVUVBSVMwZ0F5QXROZ0lJQWtBRFFDQURLQUlJSVM1QkNDRXZJQzRoTUNBdklURWdNQ0F4U0NFeVFRRWhNeUF5SUROeElUUWdORVVOQVNBREtBSU1JVFZCc09ZQUlUWWdOU0EyYWlFM0lBTW9BZ2doT0VFQ0lUa2dPQ0E1ZENFNklEY2dPbW9oT3lBN0tBSUFJVHdnUEJDeUFTQURLQUlJSVQxQkFTRStJRDBnUG1vaFB5QURJRDgyQWdnTUFBc0FDMEVBSVVBZ0F5QkFOZ0lJQWtBRFFDQURLQUlJSVVFZ0F5Z0NEQ0ZDSUVJb0F0Qm1JVU1nUVNGRUlFTWhSU0JFSUVWSUlVWkJBU0ZISUVZZ1IzRWhTQ0JJUlEwQklBTW9BZ3doU1VIVTVnQWhTaUJKSUVwcUlVc2dBeWdDQ0NGTVFRSWhUU0JNSUUxMElVNGdTeUJPYWlGUElFOG9BZ0FoVUNCUUVMSUJJQU1vQWdnaFVVRUJJVklnVVNCU2FpRlRJQU1nVXpZQ0NBd0FDd0FMSUFNb0Fnd2hWQ0JVRUxJQkMwRVFJVlVnQXlCVmFpRldJRllrQUE4THNRRUJFSDhqQUNFRVFSQWhCU0FFSUFWcklRWWdCaVFBSUFZZ0FEWUNEQ0FHSUFFN0FRb2dCaUFDT2dBSklBWWdBenNCQmtFTUlRY2dCeEFMSVFnZ0JpQUlOZ0lBSUFZb0Fnd2hDU0FHS0FJQUlRb2dDaUFKTmdJQUlBWXZBUW9oQ3lBR0tBSUFJUXdnRENBTE93RUVJQVl0QUFraERTQUdLQUlBSVE0Z0RpQU5PZ0FHSUFZdkFRWWhEeUFHS0FJQUlSQWdFQ0FQT3dFSUlBWW9BZ0FoRVVFUUlSSWdCaUFTYWlFVElCTWtBQ0FSRHdzc0FRVi9Jd0FoQVVFUUlRSWdBU0FDYXlFRElBTWdBRFlDRENBREtBSU1JUVFnQkNnQzBHWWhCU0FGRHd0WUFRdC9Jd0FoQWtFUUlRTWdBaUFEYXlFRUlBUWdBRFlDRENBRUlBRTJBZ2dnQkNnQ0RDRUZRZFRtQUNFR0lBVWdCbW9oQnlBRUtBSUlJUWhCQWlFSklBZ2dDWFFoQ2lBSElBcHFJUXNnQ3lnQ0FDRU1JQXdQQzBRQkNIOGpBQ0VCUVJBaEFpQUJJQUpySVFNZ0F5UUFJQU1nQURZQ0RDQURLQUlNSVFSQkx5RUZJQVFnQlJDb0FTRUdRUkFoQnlBRElBZHFJUWdnQ0NRQUlBWVBDNW9FQVVKL0l3QWhBMEVnSVFRZ0F5QUVheUVGSUFVa0FDQUZJQUEyQWhnZ0JTQUJOZ0lVSUFVZ0FqWUNFRUVBSVFZZ0JTQUdOZ0lNSUFVb0FoZ2hCeUFGSUFjMkFnZ2dCU2dDRkNFSVFYOGhDU0FJSUFscUlRb2dCU0FLTmdJVUFrQUNRQU5BSUFVb0Fnd2hDeUFGS0FJVUlRd2dDeUVOSUF3aERpQU5JQTVJSVE5QkFTRVFJQThnRUhFaEVTQVJSUTBCSUFVb0FnZ2hFaUFGS0FJUUlSTkJBU0VVSUJJZ0ZDQVVJQk1RaVFFaEZVRUJJUllnRlNFWElCWWhHQ0FYSUJoSElSbEJBU0VhSUJrZ0duRWhHd0pBSUJ0RkRRQU1BZ3NnQlNnQ0RDRWNRUUVoSFNBY0lCMXFJUjRnQlNBZU5nSU1JQVVvQWdnaEh5QWZMUUFBSVNCQkdDRWhJQ0FnSVhRaElpQWlJQ0YxSVNOQkNpRWtJQ01oSlNBa0lTWWdKU0FtUmlFblFRRWhLQ0FuSUNoeElTa0NRQUpBSUNrTkFDQUZLQUlJSVNvZ0tpMEFBQ0VyUVJnaExDQXJJQ3gwSVMwZ0xTQXNkU0V1UVEwaEx5QXVJVEFnTHlFeElEQWdNVVloTWtFQklUTWdNaUF6Y1NFMElEUkZEUUVMSUFVb0FnZ2hOVUVBSVRZZ05TQTJPZ0FBSUFVb0FoZ2hOeUFGSURjMkFod01Bd3NnQlNnQ0NDRTRRUUVoT1NBNElEbHFJVG9nQlNBNk5nSUlEQUFMQUFzZ0JTZ0NDQ0U3UVFBaFBDQTdJRHc2QUFBZ0JTZ0NEQ0U5QWtBQ1FDQTlSUTBBSUFVb0FoZ2hQaUErSVQ4TUFRdEJBQ0ZBSUVBaFB3c2dQeUZCSUFVZ1FUWUNIQXNnQlNnQ0hDRkNRU0FoUXlBRklFTnFJVVFnUkNRQUlFSVBDNHNCQVFOL0EwQWdBQ0lCUVFGcUlRQWdBU3dBQUJDT0FRMEFDMEVCSVFJQ1FBSkFBa0FnQVN3QUFDSURRVlZxRGdNQkFnQUNDMEVBSVFJTElBQXNBQUFoQXlBQUlRRUxRUUFoQUFKQUlBTVFqUUZGRFFCQkFDRUFBMEFnQUVFS2JDQUJMQUFBYTBFd2FpRUFJQUVzQUFFaEF5QUJRUUZxSVFFZ0F4Q05BUTBBQ3d0QkFDQUFheUFBSUFJYkM0NEVBUU4vQWtBZ0FrR0FCRWtOQUNBQUlBRWdBaEFBSUFBUEN5QUFJQUpxSVFNQ1FBSkFJQUVnQUhOQkEzRU5BQUpBQWtBZ0FFRURjUTBBSUFBaEFnd0JDd0pBSUFJTkFDQUFJUUlNQVFzZ0FDRUNBMEFnQWlBQkxRQUFPZ0FBSUFGQkFXb2hBU0FDUVFGcUlnSkJBM0ZGRFFFZ0FpQURTUTBBQ3dzQ1FDQURRWHh4SWdSQndBQkpEUUFnQWlBRVFVQnFJZ1ZMRFFBRFFDQUNJQUVvQWdBMkFnQWdBaUFCS0FJRU5nSUVJQUlnQVNnQ0NEWUNDQ0FDSUFFb0FndzJBZ3dnQWlBQktBSVFOZ0lRSUFJZ0FTZ0NGRFlDRkNBQ0lBRW9BaGcyQWhnZ0FpQUJLQUljTmdJY0lBSWdBU2dDSURZQ0lDQUNJQUVvQWlRMkFpUWdBaUFCS0FJb05nSW9JQUlnQVNnQ0xEWUNMQ0FDSUFFb0FqQTJBakFnQWlBQktBSTBOZ0kwSUFJZ0FTZ0NPRFlDT0NBQ0lBRW9BancyQWp3Z0FVSEFBR29oQVNBQ1FjQUFhaUlDSUFWTkRRQUxDeUFDSUFSUERRRURRQ0FDSUFFb0FnQTJBZ0FnQVVFRWFpRUJJQUpCQkdvaUFpQUVTUTBBREFJTEFBc0NRQ0FEUVFSUERRQWdBQ0VDREFFTEFrQWdBMEY4YWlJRUlBQlBEUUFnQUNFQ0RBRUxJQUFoQWdOQUlBSWdBUzBBQURvQUFDQUNJQUV0QUFFNkFBRWdBaUFCTFFBQ09nQUNJQUlnQVMwQUF6b0FBeUFCUVFScUlRRWdBa0VFYWlJQ0lBUk5EUUFMQ3dKQUlBSWdBMDhOQUFOQUlBSWdBUzBBQURvQUFDQUJRUUZxSVFFZ0FrRUJhaUlDSUFOSERRQUxDeUFBQy9JQ0FnTi9BWDRDUUNBQ1JRMEFJQUFnQVRvQUFDQUFJQUpxSWdOQmYyb2dBVG9BQUNBQ1FRTkpEUUFnQUNBQk9nQUNJQUFnQVRvQUFTQURRWDFxSUFFNkFBQWdBMEYrYWlBQk9nQUFJQUpCQjBrTkFDQUFJQUU2QUFNZ0EwRjhhaUFCT2dBQUlBSkJDVWtOQUNBQVFRQWdBR3RCQTNFaUJHb2lBeUFCUWY4QmNVR0Jnb1FJYkNJQk5nSUFJQU1nQWlBRWEwRjhjU0lFYWlJQ1FYeHFJQUUyQWdBZ0JFRUpTUTBBSUFNZ0FUWUNDQ0FESUFFMkFnUWdBa0Y0YWlBQk5nSUFJQUpCZEdvZ0FUWUNBQ0FFUVJsSkRRQWdBeUFCTmdJWUlBTWdBVFlDRkNBRElBRTJBaEFnQXlBQk5nSU1JQUpCY0dvZ0FUWUNBQ0FDUVd4cUlBRTJBZ0FnQWtGb2FpQUJOZ0lBSUFKQlpHb2dBVFlDQUNBRUlBTkJCSEZCR0hJaUJXc2lBa0VnU1EwQUlBR3RRb0dBZ0lBUWZpRUdJQU1nQldvaEFRTkFJQUVnQmpjREdDQUJJQVkzQXhBZ0FTQUdOd01JSUFFZ0JqY0RBQ0FCUVNCcUlRRWdBa0ZnYWlJQ1FSOUxEUUFMQ3lBQUN3UUFRUUVMQWdBTEFnQUxwd0VCQlg4Q1FBSkFJQUFvQWt4QkFFNE5BRUVCSVFFTUFRc2dBQkI2UlNFQkN5QUFFSDRoQWlBQUlBQW9BZ3dSQUFBaEF3SkFJQUVOQUNBQUVIc0xBa0FnQUMwQUFFRUJjUTBBSUFBUWZCQ1RBU0VFSUFBb0FqZ2hBUUpBSUFBb0FqUWlCVVVOQUNBRklBRTJBamdMQWtBZ0FVVU5BQ0FCSUFVMkFqUUxBa0FnQkNnQ0FDQUFSdzBBSUFRZ0FUWUNBQXNRbEFFZ0FDZ0NZQkN5QVNBQUVMSUJDeUFESUFKeUM3d0NBUU4vQWtBZ0FBMEFRUUFoQVFKQVFRQW9Bb0RIQkVVTkFFRUFLQUtBeHdRUWZpRUJDd0pBUVFBb0FvREhCRVVOQUVFQUtBS0F4d1FRZmlBQmNpRUJDd0pBRUpNQktBSUFJZ0JGRFFBRFFFRUFJUUlDUUNBQUtBSk1RUUJJRFFBZ0FCQjZJUUlMQWtBZ0FDZ0NGQ0FBS0FJY1JnMEFJQUFRZmlBQmNpRUJDd0pBSUFKRkRRQWdBQkI3Q3lBQUtBSTRJZ0FOQUFzTEVKUUJJQUVQQ3dKQUFrQWdBQ2dDVEVFQVRnMEFRUUVoQWd3QkN5QUFFSHBGSVFJTEFrQUNRQUpBSUFBb0FoUWdBQ2dDSEVZTkFDQUFRUUJCQUNBQUtBSWtFUUVBR2lBQUtBSVVEUUJCZnlFQklBSkZEUUVNQWdzQ1FDQUFLQUlFSWdFZ0FDZ0NDQ0lEUmcwQUlBQWdBU0FEYTZ4QkFTQUFLQUlvRVFvQUdndEJBQ0VCSUFCQkFEWUNIQ0FBUWdBM0F4QWdBRUlBTndJRUlBSU5BUXNnQUJCN0N5QUJDd1lBUVlUSEJBdDBBUUYvUVFJaEFRSkFJQUJCS3hDZUFRMEFJQUF0QUFCQjhnQkhJUUVMSUFGQmdBRnlJQUVnQUVINEFCQ2VBUnNpQVVHQWdDQnlJQUVnQUVIbEFCQ2VBUnNpQVNBQlFjQUFjaUFBTFFBQUlnQkI4Z0JHR3lJQlFZQUVjaUFCSUFCQjl3QkdHeUlCUVlBSWNpQUJJQUJCNFFCR0d3c09BQ0FBS0FJOElBRWdBaENQQVF2bEFnRUhmeU1BUVNCcklnTWtBQ0FESUFBb0Fod2lCRFlDRUNBQUtBSVVJUVVnQXlBQ05nSWNJQU1nQVRZQ0dDQURJQVVnQkdzaUFUWUNGQ0FCSUFKcUlRWWdBMEVRYWlFRVFRSWhCd0pBQWtBQ1FBSkFBa0FnQUNnQ1BDQURRUkJxUVFJZ0EwRU1haEFFRUswQlJRMEFJQVFoQlF3QkN3TkFJQVlnQXlnQ0RDSUJSZzBDQWtBZ0FVRi9TZzBBSUFRaEJRd0VDeUFFSUFFZ0JDZ0NCQ0lJU3lJSlFRTjBhaUlGSUFVb0FnQWdBU0FJUVFBZ0NSdHJJZ2hxTmdJQUlBUkJERUVFSUFrYmFpSUVJQVFvQWdBZ0NHczJBZ0FnQmlBQmF5RUdJQVVoQkNBQUtBSThJQVVnQnlBSmF5SUhJQU5CREdvUUJCQ3RBVVVOQUFzTElBWkJmMGNOQVFzZ0FDQUFLQUlzSWdFMkFod2dBQ0FCTmdJVUlBQWdBU0FBS0FJd2FqWUNFQ0FDSVFFTUFRdEJBQ0VCSUFCQkFEWUNIQ0FBUWdBM0F4QWdBQ0FBS0FJQVFTQnlOZ0lBSUFkQkFrWU5BQ0FDSUFVb0FnUnJJUUVMSUFOQklHb2tBQ0FCQytNQkFRUi9Jd0JCSUdzaUF5UUFJQU1nQVRZQ0VFRUFJUVFnQXlBQ0lBQW9BakFpQlVFQVIyczJBaFFnQUNnQ0xDRUdJQU1nQlRZQ0hDQURJQVkyQWhoQklDRUZBa0FDUUFKQUlBQW9BandnQTBFUWFrRUNJQU5CREdvUUJSQ3RBUTBBSUFNb0Fnd2lCVUVBU2cwQlFTQkJFQ0FGR3lFRkN5QUFJQUFvQWdBZ0JYSTJBZ0FNQVFzZ0JTRUVJQVVnQXlnQ0ZDSUdUUTBBSUFBZ0FDZ0NMQ0lFTmdJRUlBQWdCQ0FGSUFacmFqWUNDQUpBSUFBb0FqQkZEUUFnQUNBRVFRRnFOZ0lFSUFFZ0FtcEJmMm9nQkMwQUFEb0FBQXNnQWlFRUN5QURRU0JxSkFBZ0JBc0VBQ0FBQ3d3QUlBQW9BandRaEFFUUJndkdBZ0VDZnlNQVFTQnJJZ0lrQUFKQUFrQUNRQUpBUWRpQkJDQUJMQUFBRUo0QkRRQVFmMEVjTmdJQURBRUxRWmdKRUxBQklnTU5BUXRCQUNFRERBRUxJQU5CQUVHUUFSQjVHZ0pBSUFGQkt4Q2VBUTBBSUFOQkNFRUVJQUV0QUFCQjhnQkdHellDQUFzQ1FBSkFJQUV0QUFCQjRRQkdEUUFnQXlnQ0FDRUJEQUVMQWtBZ0FFRURRUUFRQWlJQlFZQUljUTBBSUFJZ0FVR0FDSEtzTndNUUlBQkJCQ0FDUVJCcUVBSWFDeUFESUFNb0FnQkJnQUZ5SWdFMkFnQUxJQU5CZnpZQ1VDQURRWUFJTmdJd0lBTWdBRFlDUENBRElBTkJtQUZxTmdJc0FrQWdBVUVJY1EwQUlBSWdBa0VZYXEwM0F3QWdBRUdUcUFFZ0FoQUREUUFnQTBFS05nSlFDeUFEUVFzMkFpZ2dBMEVNTmdJa0lBTkJEVFlDSUNBRFFRNDJBZ3dDUUVFQUxRQ0p4d1FOQUNBRFFYODJBa3dMSUFNUWxRRWhBd3NnQWtFZ2FpUUFJQU1MZHdFRGZ5TUFRUkJySWdJa0FBSkFBa0FDUUVIWWdRUWdBU3dBQUJDZUFRMEFFSDlCSERZQ0FBd0JDeUFCRUlBQklRTWdBa0syQXpjREFFRUFJUVJCbkg4Z0FDQURRWUNBQW5JZ0FoQUJFS3dCSWdCQkFFZ05BU0FBSUFFUWhnRWlCQTBCSUFBUUJob0xRUUFoQkFzZ0FrRVFhaVFBSUFRTGdRRUJBbjhnQUNBQUtBSklJZ0ZCZjJvZ0FYSTJBa2dDUUNBQUtBSVVJQUFvQWh4R0RRQWdBRUVBUVFBZ0FDZ0NKQkVCQUJvTElBQkJBRFlDSENBQVFnQTNBeEFDUUNBQUtBSUFJZ0ZCQkhGRkRRQWdBQ0FCUVNCeU5nSUFRWDhQQ3lBQUlBQW9BaXdnQUNnQ01Hb2lBallDQ0NBQUlBSTJBZ1FnQVVFYmRFRWZkUXZ1QVFFRWZ3SkFBa0FnQXlnQ1RFRUFUZzBBUVFFaEJBd0JDeUFERUhwRklRUUxJQUlnQVd3aEJTQURJQU1vQWtnaUJrRi9haUFHY2pZQ1NBSkFBa0FnQXlnQ0JDSUdJQU1vQWdnaUIwY05BQ0FGSVFZTUFRc2dBQ0FHSUFjZ0Jtc2lCeUFGSUFjZ0JVa2JJZ2NRZUJvZ0F5QURLQUlFSUFkcU5nSUVJQVVnQjJzaEJpQUFJQWRxSVFBTEFrQWdCa1VOQUFOQUFrQUNRQ0FERUlnQkRRQWdBeUFBSUFZZ0F5Z0NJQkVCQUNJSERRRUxBa0FnQkEwQUlBTVFld3NnQlNBR2F5QUJiZzhMSUFBZ0Iyb2hBQ0FHSUFkcklnWU5BQXNMSUFKQkFDQUJHeUVBQWtBZ0JBMEFJQU1RZXdzZ0FBdWRBUUVCZndKQUFrQWdBa0VEU1EwQUVIOUJIRFlDQUF3QkN3SkFJQUpCQVVjTkFDQUFLQUlJSWdORkRRQWdBU0FESUFBb0FnUnJySDBoQVFzQ1FDQUFLQUlVSUFBb0FoeEdEUUFnQUVFQVFRQWdBQ2dDSkJFQkFCb2dBQ2dDRkVVTkFRc2dBRUVBTmdJY0lBQkNBRGNERUNBQUlBRWdBaUFBS0FJb0VRb0FRZ0JURFFBZ0FFSUFOd0lFSUFBZ0FDZ0NBRUZ2Y1RZQ0FFRUFEd3RCZndzNkFRRi9Ba0FnQUNnQ1RFRi9TZzBBSUFBZ0FTQUNFSW9CRHdzZ0FCQjZJUU1nQUNBQklBSVFpZ0VoQWdKQUlBTkZEUUFnQUJCN0N5QUNDd3dBSUFBZ0Fhd2dBaENMQVFzS0FDQUFRVkJxUVFwSkN4QUFJQUJCSUVZZ0FFRjNha0VGU1hJTE9RRUJmeU1BUVJCcklnTWtBQ0FBSUFFZ0FrSC9BWEVnQTBFSWFoREdBUkN0QVNFQ0lBTXBBd2doQVNBRFFSQnFKQUJDZnlBQklBSWJDNGNCQVFKL0FrQUNRQUpBSUFKQkJFa05BQ0FCSUFCeVFRTnhEUUVEUUNBQUtBSUFJQUVvQWdCSERRSWdBVUVFYWlFQklBQkJCR29oQUNBQ1FYeHFJZ0pCQTBzTkFBc0xJQUpGRFFFTEFrQURRQ0FBTFFBQUlnTWdBUzBBQUNJRVJ3MEJJQUZCQVdvaEFTQUFRUUZxSVFBZ0FrRi9haUlDUlEwQ0RBQUxBQXNnQXlBRWF3OExRUUFMQWdBTEFnQUxEUUJCd01jRUVKRUJRY1RIQkFzSkFFSEF4d1FRa2dFTExnRUNmeUFBRUpNQklnRW9BZ0FpQWpZQ09BSkFJQUpGRFFBZ0FpQUFOZ0kwQ3lBQklBQTJBZ0FRbEFFZ0FBdWFBUUVEZkNBQUlBQ2lJZ01nQXlBRG9xSWdBMFI4MWM5YU90bmxQYUpFNjV3cml1YmxXcjZnb2lBRElBTkVmZjZ4VitNZHh6NmlSTlZod1JtZ0FTcS9vS0pFcHZnUUVSRVJnVCtnb0NFRUlBTWdBS0loQlFKQUlBSU5BQ0FGSUFNZ0JLSkVTVlZWVlZWVnhiK2dvaUFBb0E4TElBQWdBeUFCUkFBQUFBQUFBT0Evb2lBRUlBV2lvYUlnQWFFZ0JVUkpWVlZWVlZYRlA2S2dvUXV1QVFBQ1FBSkFJQUZCZ0FoSURRQWdBRVFBQUFBQUFBRGdmNkloQUFKQUlBRkIvdzlQRFFBZ0FVR0JlR29oQVF3Q0N5QUFSQUFBQUFBQUFPQi9vaUVBSUFGQi9SY2dBVUg5RjBnYlFZSndhaUVCREFFTElBRkJnWGhLRFFBZ0FFUUFBQUFBQUFCZ0E2SWhBQUpBSUFGQnVIQk5EUUFnQVVISkIyb2hBUXdCQ3lBQVJBQUFBQUFBQUdBRG9pRUFJQUZCOEdnZ0FVSHdhRW9iUVpJUGFpRUJDeUFBSUFGQi93ZHFyVUkwaHIraUN3VUFJQUNjQzlJU0FoQi9BM3dqQUVHd0JHc2lCU1FBSUFKQmZXcEJHRzBpQmtFQUlBWkJBRW9iSWdkQmFHd2dBbW9oQ0FKQUlBUkJBblJCa0tZRWFpZ0NBQ0lKSUFOQmYyb2lDbXBCQUVnTkFDQUpJQU5xSVFzZ0J5QUtheUVDUVFBaEJnTkFBa0FDUUNBQ1FRQk9EUUJFQUFBQUFBQUFBQUFoRlF3QkN5QUNRUUowUWFDbUJHb29BZ0MzSVJVTElBVkJ3QUpxSUFaQkEzUnFJQlU1QXdBZ0FrRUJhaUVDSUFaQkFXb2lCaUFMUncwQUN3c2dDRUZvYWlFTVFRQWhDeUFKUVFBZ0NVRUFTaHNoRFNBRFFRRklJUTREUUFKQUFrQWdEa1VOQUVRQUFBQUFBQUFBQUNFVkRBRUxJQXNnQ21vaEJrRUFJUUpFQUFBQUFBQUFBQUFoRlFOQUlBQWdBa0VEZEdvckF3QWdCVUhBQW1vZ0JpQUNhMEVEZEdvckF3Q2lJQldnSVJVZ0FrRUJhaUlDSUFOSERRQUxDeUFGSUF0QkEzUnFJQlU1QXdBZ0N5QU5SaUVDSUF0QkFXb2hDeUFDUlEwQUMwRXZJQWhySVE5Qk1DQUlheUVRSUFoQloyb2hFU0FKSVFzQ1FBTkFJQVVnQzBFRGRHb3JBd0FoRlVFQUlRSWdDeUVHQWtBZ0MwRUJTQ0lLRFFBRFFBSkFBa0FnRlVRQUFBQUFBQUJ3UHFJaUZwbEVBQUFBQUFBQTRFRmpSUTBBSUJhcUlRME1BUXRCZ0lDQWdIZ2hEUXNnQlVIZ0Eyb2dBa0VDZEdvaERnSkFBa0FnRGJjaUZrUUFBQUFBQUFCd3dhSWdGYUFpRlpsRUFBQUFBQUFBNEVGalJRMEFJQldxSVEwTUFRdEJnSUNBZ0hnaERRc2dEaUFOTmdJQUlBVWdCa0YvYWlJR1FRTjBhaXNEQUNBV29DRVZJQUpCQVdvaUFpQUxSdzBBQ3dzZ0ZTQU1FSmNCSVJVQ1FBSkFJQlVnRlVRQUFBQUFBQURBUDZJUW1BRkVBQUFBQUFBQUlNQ2lvQ0lWbVVRQUFBQUFBQURnUVdORkRRQWdGYW9oRWd3QkMwR0FnSUNBZUNFU0N5QVZJQkszb1NFVkFrQUNRQUpBQWtBQ1FDQU1RUUZJSWhNTkFDQUxRUUowSUFWQjRBTnFha0Y4YWlJQ0lBSW9BZ0FpQWlBQ0lCQjFJZ0lnRUhScklnWTJBZ0FnQmlBUGRTRVVJQUlnRW1vaEVnd0JDeUFNRFFFZ0MwRUNkQ0FGUWVBRGFtcEJmR29vQWdCQkYzVWhGQXNnRkVFQlNBMENEQUVMUVFJaEZDQVZSQUFBQUFBQUFPQS9aZzBBUVFBaEZBd0JDMEVBSVFKQkFDRU9Ba0FnQ2cwQUEwQWdCVUhnQTJvZ0FrRUNkR29pQ2lnQ0FDRUdRZi8vL3djaERRSkFBa0FnRGcwQVFZQ0FnQWdoRFNBR0RRQkJBQ0VPREFFTElBb2dEU0FHYXpZQ0FFRUJJUTRMSUFKQkFXb2lBaUFMUncwQUN3c0NRQ0FURFFCQi8vLy9BeUVDQWtBQ1FDQVJEZ0lCQUFJTFFmLy8vd0VoQWdzZ0MwRUNkQ0FGUWVBRGFtcEJmR29pQmlBR0tBSUFJQUp4TmdJQUN5QVNRUUZxSVJJZ0ZFRUNSdzBBUkFBQUFBQUFBUEEvSUJXaElSVkJBaUVVSUE1RkRRQWdGVVFBQUFBQUFBRHdQeUFNRUpjQm9TRVZDd0pBSUJWRUFBQUFBQUFBQUFCaURRQkJBQ0VHSUFzaEFnSkFJQXNnQ1V3TkFBTkFJQVZCNEFOcUlBSkJmMm9pQWtFQ2RHb29BZ0FnQm5JaEJpQUNJQWxLRFFBTElBWkZEUUFnRENFSUEwQWdDRUZvYWlFSUlBVkI0QU5xSUF0QmYyb2lDMEVDZEdvb0FnQkZEUUFNQkFzQUMwRUJJUUlEUUNBQ0lnWkJBV29oQWlBRlFlQURhaUFKSUFaclFRSjBhaWdDQUVVTkFBc2dCaUFMYWlFTkEwQWdCVUhBQW1vZ0N5QURhaUlHUVFOMGFpQUxRUUZxSWdzZ0IycEJBblJCb0tZRWFpZ0NBTGM1QXdCQkFDRUNSQUFBQUFBQUFBQUFJUlVDUUNBRFFRRklEUUFEUUNBQUlBSkJBM1JxS3dNQUlBVkJ3QUpxSUFZZ0FtdEJBM1JxS3dNQW9pQVZvQ0VWSUFKQkFXb2lBaUFEUncwQUN3c2dCU0FMUVFOMGFpQVZPUU1BSUFzZ0RVZ05BQXNnRFNFTERBRUxDd0pBQWtBZ0ZVRVlJQWhyRUpjQkloVkVBQUFBQUFBQWNFRm1SUTBBSUF0QkFuUWhBd0pBQWtBZ0ZVUUFBQUFBQUFCd1BxSWlGcGxFQUFBQUFBQUE0RUZqUlEwQUlCYXFJUUlNQVF0QmdJQ0FnSGdoQWdzZ0JVSGdBMm9nQTJvaEF3SkFBa0FnQXJkRUFBQUFBQUFBY01HaUlCV2dJaFdaUkFBQUFBQUFBT0JCWTBVTkFDQVZxaUVHREFFTFFZQ0FnSUI0SVFZTElBTWdCallDQUNBTFFRRnFJUXNNQVFzQ1FBSkFJQldaUkFBQUFBQUFBT0JCWTBVTkFDQVZxaUVDREFFTFFZQ0FnSUI0SVFJTElBd2hDQXNnQlVIZ0Eyb2dDMEVDZEdvZ0FqWUNBQXRFQUFBQUFBQUE4RDhnQ0JDWEFTRVZBa0FnQzBGL1RBMEFJQXNoQXdOQUlBVWdBeUlDUVFOMGFpQVZJQVZCNEFOcUlBSkJBblJxS0FJQXQ2STVBd0FnQWtGL2FpRURJQlZFQUFBQUFBQUFjRDZpSVJVZ0FnMEFDeUFMUVg5TURRQWdDeUVHQTBCRUFBQUFBQUFBQUFBaEZVRUFJUUlDUUNBSklBc2dCbXNpRFNBSklBMUlHeUlBUVFCSURRQURRQ0FDUVFOMFFmQzdCR29yQXdBZ0JTQUNJQVpxUVFOMGFpc0RBS0lnRmFBaEZTQUNJQUJISVFNZ0FrRUJhaUVDSUFNTkFBc0xJQVZCb0FGcUlBMUJBM1JxSUJVNUF3QWdCa0VBU2lFQ0lBWkJmMm9oQmlBQ0RRQUxDd0pBQWtBQ1FBSkFBa0FnQkE0RUFRSUNBQVFMUkFBQUFBQUFBQUFBSVJjQ1FDQUxRUUZJRFFBZ0JVR2dBV29nQzBFRGRHb3JBd0FoRlNBTElRSURRQ0FGUWFBQmFpQUNRUU4wYWlBVklBVkJvQUZxSUFKQmYyb2lBMEVEZEdvaUJpc0RBQ0lXSUJZZ0ZhQWlGcUdnT1FNQUlBWWdGamtEQUNBQ1FRRkxJUVlnRmlFVklBTWhBaUFHRFFBTElBdEJBa2dOQUNBRlFhQUJhaUFMUVFOMGFpc0RBQ0VWSUFzaEFnTkFJQVZCb0FGcUlBSkJBM1JxSUJVZ0JVR2dBV29nQWtGL2FpSURRUU4wYWlJR0t3TUFJaFlnRmlBVm9DSVdvYUE1QXdBZ0JpQVdPUU1BSUFKQkFrc2hCaUFXSVJVZ0F5RUNJQVlOQUF0RUFBQUFBQUFBQUFBaEZ5QUxRUUZNRFFBRFFDQVhJQVZCb0FGcUlBdEJBM1JxS3dNQW9DRVhJQXRCQWtvaEFpQUxRWDlxSVFzZ0FnMEFDd3NnQlNzRG9BRWhGU0FVRFFJZ0FTQVZPUU1BSUFVckE2Z0JJUlVnQVNBWE9RTVFJQUVnRlRrRENBd0RDMFFBQUFBQUFBQUFBQ0VWQWtBZ0MwRUFTQTBBQTBBZ0N5SUNRWDlxSVFzZ0ZTQUZRYUFCYWlBQ1FRTjBhaXNEQUtBaEZTQUNEUUFMQ3lBQklCV2FJQlVnRkJzNUF3QU1BZ3RFQUFBQUFBQUFBQUFoRlFKQUlBdEJBRWdOQUNBTElRTURRQ0FESWdKQmYyb2hBeUFWSUFWQm9BRnFJQUpCQTNScUt3TUFvQ0VWSUFJTkFBc0xJQUVnRlpvZ0ZTQVVHemtEQUNBRkt3T2dBU0FWb1NFVlFRRWhBZ0pBSUF0QkFVZ05BQU5BSUJVZ0JVR2dBV29nQWtFRGRHb3JBd0NnSVJVZ0FpQUxSeUVESUFKQkFXb2hBaUFERFFBTEN5QUJJQldhSUJVZ0ZCczVBd2dNQVFzZ0FTQVZtamtEQUNBRkt3T29BU0VWSUFFZ0Y1bzVBeEFnQVNBVm1qa0RDQXNnQlVHd0JHb2tBQ0FTUVFkeEMrMEtBd1YvQVg0RWZDTUFRVEJySWdJa0FBSkFBa0FDUUFKQUlBQzlJZ2RDSUlpbklnTkIvLy8vL3dkeElnUkIrdFM5Z0FSTERRQWdBMEgvL3o5eFFmdkRKRVlOQVFKQUlBUkIvTEtMZ0FSTERRQUNRQ0FIUWdCVERRQWdBU0FBUkFBQVFGVDdJZm0vb0NJQVJERmpZaHBodE5DOW9DSUlPUU1BSUFFZ0FDQUlvVVF4WTJJYVliVFF2YUE1QXdoQkFTRUREQVVMSUFFZ0FFUUFBRUJVK3lINVA2QWlBRVF4WTJJYVliVFFQYUFpQ0RrREFDQUJJQUFnQ0tGRU1XTmlHbUcwMEQyZ09RTUlRWDhoQXd3RUN3SkFJQWRDQUZNTkFDQUJJQUJFQUFCQVZQc2hDY0NnSWdCRU1XTmlHbUcwNEwyZ0lnZzVBd0FnQVNBQUlBaWhSREZqWWhwaHRPQzlvRGtEQ0VFQ0lRTU1CQXNnQVNBQVJBQUFRRlQ3SVFsQW9DSUFSREZqWWhwaHRPQTlvQ0lJT1FNQUlBRWdBQ0FJb1VReFkySWFZYlRnUGFBNUF3aEJmaUVEREFNTEFrQWdCRUc3alBHQUJFc05BQUpBSUFSQnZQdlhnQVJMRFFBZ0JFSDhzc3VBQkVZTkFnSkFJQWRDQUZNTkFDQUJJQUJFQUFBd2YzelpFc0NnSWdCRXlwU1RwNUVPNmIyZ0lnZzVBd0FnQVNBQUlBaWhSTXFVazZlUkR1bTlvRGtEQ0VFRElRTU1CUXNnQVNBQVJBQUFNSDk4MlJKQW9DSUFSTXFVazZlUkR1azlvQ0lJT1FNQUlBRWdBQ0FJb1VUS2xKT25rUTdwUGFBNUF3aEJmU0VEREFRTElBUkIrOFBrZ0FSR0RRRUNRQ0FIUWdCVERRQWdBU0FBUkFBQVFGVDdJUm5Bb0NJQVJERmpZaHBodFBDOW9DSUlPUU1BSUFFZ0FDQUlvVVF4WTJJYVliVHd2YUE1QXdoQkJDRUREQVFMSUFFZ0FFUUFBRUJVK3lFWlFLQWlBRVF4WTJJYVliVHdQYUFpQ0RrREFDQUJJQUFnQ0tGRU1XTmlHbUcwOEQyZ09RTUlRWHdoQXd3REN5QUVRZnJENUlrRVN3MEJDeUFBSUFCRWc4akpiVEJmNUQraVJBQUFBQUFBQURoRG9FUUFBQUFBQUFBNHc2QWlDRVFBQUVCVSt5SDV2NktnSWdrZ0NFUXhZMklhWWJUUVBhSWlDcUVpQzBRWUxVUlUreUhwdjJNaEJRSkFBa0FnQ0psRUFBQUFBQUFBNEVGalJRMEFJQWlxSVFNTUFRdEJnSUNBZ0hnaEF3c0NRQUpBSUFWRkRRQWdBMEYvYWlFRElBaEVBQUFBQUFBQThMK2dJZ2hFTVdOaUdtRzAwRDJpSVFvZ0FDQUlSQUFBUUZUN0lmbS9vcUFoQ1F3QkN5QUxSQmd0UkZUN0llay9aRVVOQUNBRFFRRnFJUU1nQ0VRQUFBQUFBQUR3UDZBaUNFUXhZMklhWWJUUVBhSWhDaUFBSUFoRUFBQkFWUHNoK2IraW9DRUpDeUFCSUFrZ0NxRWlBRGtEQUFKQUlBUkJGSFlpQlNBQXZVSTBpS2RCL3c5eGEwRVJTQTBBSUFFZ0NTQUlSQUFBWUJwaHROQTlvaUlBb1NJTElBaEVjM0FETG9vWm96dWlJQWtnQzZFZ0FLR2hJZ3FoSWdBNUF3QUNRQ0FGSUFDOVFqU0lwMEgvRDNGclFUSk9EUUFnQ3lFSkRBRUxJQUVnQ3lBSVJBQUFBQzZLR2FNN29pSUFvU0lKSUFoRXdVa2dKWnFEZXptaUlBc2dDYUVnQUtHaElncWhJZ0E1QXdBTElBRWdDU0FBb1NBS29Ua0RDQXdCQ3dKQUlBUkJnSURBL3dkSkRRQWdBU0FBSUFDaElnQTVBd0FnQVNBQU9RTUlRUUFoQXd3QkN5QUhRdi8vLy8vLy8vOEhnMEtBZ0lDQWdJQ0FzTUVBaEw4aEFFRUFJUU5CQVNFRkEwQWdBa0VRYWlBRFFRTjBhaUVEQWtBQ1FDQUFtVVFBQUFBQUFBRGdRV05GRFFBZ0FLb2hCZ3dCQzBHQWdJQ0FlQ0VHQ3lBRElBYTNJZ2c1QXdBZ0FDQUlvVVFBQUFBQUFBQndRYUloQUVFQklRTWdCVUVCY1NFR1FRQWhCU0FHRFFBTElBSWdBRGtESUVFQ0lRTURRQ0FESWdWQmYyb2hBeUFDUVJCcUlBVkJBM1JxS3dNQVJBQUFBQUFBQUFBQVlRMEFDeUFDUVJCcUlBSWdCRUVVZGtIcWQyb2dCVUVCYWtFQkVKa0JJUU1nQWlzREFDRUFBa0FnQjBKL1ZRMEFJQUVnQUpvNUF3QWdBU0FDS3dNSW1qa0RDRUVBSUFOcklRTU1BUXNnQVNBQU9RTUFJQUVnQWlzRENEa0RDQXNnQWtFd2FpUUFJQU1Ma2dFQkEzeEVBQUFBQUFBQThEOGdBQ0FBb2lJQ1JBQUFBQUFBQU9BL29pSURvU0lFUkFBQUFBQUFBUEEvSUFTaElBT2hJQUlnQWlBQ0lBSkVrQlhMR2FBQitqNmlSSGRSd1Jac3dWYS9vS0pFVEZWVlZWVlZwVCtnb2lBQ0lBS2lJZ01nQTZJZ0FpQUNSTlE0aUw3cCtxaTlva1RFc2JTOW51NGhQcUNpUksxU25JQlBmcEsrb0tLZ29pQUFJQUdpb2FDZ0M4c0JBZ0ovQVh3akFFRVFheUlCSkFBQ1FBSkFJQUM5UWlDSXAwSC8vLy8vQjNFaUFrSDd3NlQvQTBzTkFDQUNRWUNBd1BJRFNRMEJJQUJFQUFBQUFBQUFBQUJCQUJDV0FTRUFEQUVMQWtBZ0FrR0FnTUQvQjBrTkFDQUFJQUNoSVFBTUFRc2dBQ0FCRUpvQklRSWdBU3NEQ0NFQUlBRXJBd0FoQXdKQUFrQUNRQUpBSUFKQkEzRU9Bd0FCQWdNTElBTWdBRUVCRUpZQklRQU1Bd3NnQXlBQUVKc0JJUUFNQWdzZ0F5QUFRUUVRbGdHYUlRQU1BUXNnQXlBQUVKc0JtaUVBQ3lBQlFSQnFKQUFnQUFzU0FDQUFJQUFRcEFGcUlBRVFvZ0VhSUFBTEdnQWdBQ0FCRUo4QklnQkJBQ0FBTFFBQUlBRkIvd0Z4UmhzTDVBRUJBbjhDUUFKQUlBRkIvd0Z4SWdKRkRRQUNRQ0FBUVFOeFJRMEFBMEFnQUMwQUFDSURSUTBESUFNZ0FVSC9BWEZHRFFNZ0FFRUJhaUlBUVFOeERRQUxDd0pBSUFBb0FnQWlBMEYvY3lBRFFmLzkrM2RxY1VHQWdZS0VlSEVOQUNBQ1FZR0NoQWhzSVFJRFFDQURJQUp6SWdOQmYzTWdBMEgvL2Z0M2FuRkJnSUdDaEhoeERRRWdBQ2dDQkNFRElBQkJCR29oQUNBRFFYOXpJQU5CLy8zN2QycHhRWUNCZ29SNGNVVU5BQXNMQWtBRFFDQUFJZ010QUFBaUFrVU5BU0FEUVFGcUlRQWdBaUFCUWY4QmNVY05BQXNMSUFNUEN5QUFJQUFRcEFGcUR3c2dBQXRaQVFKL0lBRXRBQUFoQWdKQUlBQXRBQUFpQTBVTkFDQURJQUpCL3dGeFJ3MEFBMEFnQVMwQUFTRUNJQUF0QUFFaUEwVU5BU0FCUVFGcUlRRWdBRUVCYWlFQUlBTWdBa0gvQVhGR0RRQUxDeUFESUFKQi93Rnhhd3ZaQVFFQmZ3SkFBa0FDUUNBQklBQnpRUU54UlEwQUlBRXRBQUFoQWd3QkN3SkFJQUZCQTNGRkRRQURRQ0FBSUFFdEFBQWlBam9BQUNBQ1JRMERJQUJCQVdvaEFDQUJRUUZxSWdGQkEzRU5BQXNMSUFFb0FnQWlBa0YvY3lBQ1FmLzkrM2RxY1VHQWdZS0VlSEVOQUFOQUlBQWdBallDQUNBQktBSUVJUUlnQUVFRWFpRUFJQUZCQkdvaEFTQUNRWDl6SUFKQi8vMzdkMnB4UVlDQmdvUjRjVVVOQUFzTElBQWdBam9BQUNBQ1FmOEJjVVVOQUFOQUlBQWdBUzBBQVNJQ09nQUJJQUJCQVdvaEFDQUJRUUZxSVFFZ0FnMEFDd3NnQUFzTUFDQUFJQUVRb1FFYUlBQUxJd0VDZndKQUlBQVFwQUZCQVdvaUFSQ3dBU0lDRFFCQkFBOExJQUlnQUNBQkVIZ0xoUUVCQTM4Z0FDRUJBa0FDUUNBQVFRTnhSUTBBQWtBZ0FDMEFBQTBBSUFBZ0FHc1BDeUFBSVFFRFFDQUJRUUZxSWdGQkEzRkZEUUVnQVMwQUFBMEFEQUlMQUFzRFFDQUJJZ0pCQkdvaEFTQUNLQUlBSWdOQmYzTWdBMEgvL2Z0M2FuRkJnSUdDaEhoeFJRMEFDd05BSUFJaUFVRUJhaUVDSUFFdEFBQU5BQXNMSUFFZ0FHc0wvQUVCQVg4Q1FBSkFBa0FDUUNBQklBQnpRUU54RFFBZ0FrRUFSeUVEQWtBZ0FVRURjVVVOQUNBQ1JRMEFBMEFnQUNBQkxRQUFJZ002QUFBZ0EwVU5CU0FBUVFGcUlRQWdBa0YvYWlJQ1FRQkhJUU1nQVVFQmFpSUJRUU54UlEwQklBSU5BQXNMSUFORkRRSWdBUzBBQUVVTkF5QUNRUVJKRFFBRFFDQUJLQUlBSWdOQmYzTWdBMEgvL2Z0M2FuRkJnSUdDaEhoeERRSWdBQ0FETmdJQUlBQkJCR29oQUNBQlFRUnFJUUVnQWtGOGFpSUNRUU5MRFFBTEN5QUNSUTBCQ3dOQUlBQWdBUzBBQUNJRE9nQUFJQU5GRFFJZ0FFRUJhaUVBSUFGQkFXb2hBU0FDUVg5cUlnSU5BQXNMUVFBaEFnc2dBRUVBSUFJUWVSb2dBQXNPQUNBQUlBRWdBaENsQVJvZ0FBc3ZBUUYvSUFGQi93RnhJUUVEUUFKQUlBSU5BRUVBRHdzZ0FDQUNRWDlxSWdKcUlnTXRBQUFnQVVjTkFBc2dBd3NSQUNBQUlBRWdBQkNrQVVFQmFoQ25BUXZrQVFFRGZ5TUFRU0JySWdKQkdHcENBRGNEQUNBQ1FSQnFRZ0EzQXdBZ0FrSUFOd01JSUFKQ0FEY0RBQUpBSUFFdEFBQWlBdzBBUVFBUEN3SkFJQUV0QUFFTkFDQUFJUUVEUUNBQklnUkJBV29oQVNBRUxRQUFJQU5HRFFBTElBUWdBR3NQQ3dOQUlBSWdBMEVEZGtFY2NXb2lCQ0FFS0FJQVFRRWdBM1J5TmdJQUlBRXRBQUVoQXlBQlFRRnFJUUVnQXcwQUN5QUFJUVFDUUNBQUxRQUFJZ05GRFFBZ0FDRUJBMEFDUUNBQ0lBTkJBM1pCSEhGcUtBSUFJQU4yUVFGeERRQWdBU0VFREFJTElBRXRBQUVoQXlBQlFRRnFJZ1FoQVNBRERRQUxDeUFFSUFCckM4MEJBUU4vSXdCQklHc2lBaVFBQWtBQ1FBSkFJQUVzQUFBaUEwVU5BQ0FCTFFBQkRRRUxJQUFnQXhDZkFTRUVEQUVMSUFKQkFFRWdFSGthQWtBZ0FTMEFBQ0lEUlEwQUEwQWdBaUFEUVFOMlFSeHhhaUlFSUFRb0FnQkJBU0FEZEhJMkFnQWdBUzBBQVNFRElBRkJBV29oQVNBRERRQUxDeUFBSVFRZ0FDMEFBQ0lEUlEwQUlBQWhBUU5BQWtBZ0FpQURRUU4yUVJ4eGFpZ0NBQ0FEZGtFQmNVVU5BQ0FCSVFRTUFnc2dBUzBBQVNFRElBRkJBV29pQkNFQklBTU5BQXNMSUFKQklHb2tBQ0FFSUFCckMzUUJBWDhDUUFKQUlBQU5BRUVBSVFKQkFDZ0N5TWNFSWdCRkRRRUxBa0FnQUNBQUlBRVFxUUZxSWdJdEFBQU5BRUVBUVFBMkFzakhCRUVBRHdzQ1FDQUNJQUlnQVJDcUFXb2lBQzBBQUVVTkFFRUFJQUJCQVdvMkFzakhCQ0FBUVFBNkFBQWdBZzhMUVFCQkFEWUN5TWNFQ3lBQ0N4MEFBa0FnQUVHQllFa05BQkIvUVFBZ0FHczJBZ0JCZnlFQUN5QUFDeFVBQWtBZ0FBMEFRUUFQQ3hCL0lBQTJBZ0JCZndzSEFEOEFRUkIwQzFNQkFuOUJBQ2dDdUx3RUlnRWdBRUVIYWtGNGNTSUNhaUVBQWtBQ1FDQUNSUTBBSUFBZ0FVME5BUXNDUUNBQUVLNEJUUTBBSUFBUUIwVU5BUXRCQUNBQU5nSzR2QVFnQVE4TEVIOUJNRFlDQUVGL0M5c2lBUXQvSXdCQkVHc2lBU1FBQWtBQ1FBSkFBa0FDUUFKQUFrQUNRQUpBQWtBZ0FFSDBBVXNOQUFKQVFRQW9Bc3pIQkNJQ1FSQWdBRUVMYWtGNGNTQUFRUXRKR3lJRFFRTjJJZ1IySWdCQkEzRkZEUUFDUUFKQUlBQkJmM05CQVhFZ0JHb2lCVUVEZENJRVFmVEhCR29pQUNBRVFmekhCR29vQWdBaUJDZ0NDQ0lEUncwQVFRQWdBa0YrSUFWM2NUWUN6TWNFREFFTElBTWdBRFlDRENBQUlBTTJBZ2dMSUFSQkNHb2hBQ0FFSUFWQkEzUWlCVUVEY2pZQ0JDQUVJQVZxSWdRZ0JDZ0NCRUVCY2pZQ0JBd0tDeUFEUVFBb0F0VEhCQ0lHVFEwQkFrQWdBRVVOQUFKQUFrQWdBQ0FFZEVFQ0lBUjBJZ0JCQUNBQWEzSnhhQ0lFUVFOMElnQkI5TWNFYWlJRklBQkIvTWNFYWlnQ0FDSUFLQUlJSWdkSERRQkJBQ0FDUVg0Z0JIZHhJZ0kyQXN6SEJBd0JDeUFISUFVMkFnd2dCU0FITmdJSUN5QUFJQU5CQTNJMkFnUWdBQ0FEYWlJSElBUkJBM1FpQkNBRGF5SUZRUUZ5TmdJRUlBQWdCR29nQlRZQ0FBSkFJQVpGRFFBZ0JrRjRjVUgweHdScUlRTkJBQ2dDNE1jRUlRUUNRQUpBSUFKQkFTQUdRUU4yZENJSWNRMEFRUUFnQWlBSWNqWUN6TWNFSUFNaENBd0JDeUFES0FJSUlRZ0xJQU1nQkRZQ0NDQUlJQVEyQWd3Z0JDQUROZ0lNSUFRZ0NEWUNDQXNnQUVFSWFpRUFRUUFnQnpZQzRNY0VRUUFnQlRZQzFNY0VEQW9MUVFBb0F0REhCQ0lKUlEwQklBbG9RUUowUWZ6SkJHb29BZ0FpQnlnQ0JFRjRjU0FEYXlFRUlBY2hCUUpBQTBBQ1FDQUZLQUlRSWdBTkFDQUZRUlJxS0FJQUlnQkZEUUlMSUFBb0FnUkJlSEVnQTJzaUJTQUVJQVVnQkVraUJSc2hCQ0FBSUFjZ0JSc2hCeUFBSVFVTUFBc0FDeUFIS0FJWUlRb0NRQ0FIS0FJTUlnZ2dCMFlOQUNBSEtBSUlJZ0JCQUNnQzNNY0VTUm9nQUNBSU5nSU1JQWdnQURZQ0NBd0pDd0pBSUFkQkZHb2lCU2dDQUNJQURRQWdCeWdDRUNJQVJRMERJQWRCRUdvaEJRc0RRQ0FGSVFzZ0FDSUlRUlJxSWdVb0FnQWlBQTBBSUFoQkVHb2hCU0FJS0FJUUlnQU5BQXNnQzBFQU5nSUFEQWdMUVg4aEF5QUFRYjkvU3cwQUlBQkJDMm9pQUVGNGNTRURRUUFvQXRESEJDSUdSUTBBUVFBaEN3SkFJQU5CZ0FKSkRRQkJIeUVMSUFOQi8vLy9CMHNOQUNBRFFTWWdBRUVJZG1jaUFHdDJRUUZ4SUFCQkFYUnJRVDVxSVFzTFFRQWdBMnNoQkFKQUFrQUNRQUpBSUF0QkFuUkIvTWtFYWlnQ0FDSUZEUUJCQUNFQVFRQWhDQXdCQzBFQUlRQWdBMEVBUVJrZ0MwRUJkbXNnQzBFZlJodDBJUWRCQUNFSUEwQUNRQ0FGS0FJRVFYaHhJQU5ySWdJZ0JFOE5BQ0FDSVFRZ0JTRUlJQUlOQUVFQUlRUWdCU0VJSUFVaEFBd0RDeUFBSUFWQkZHb29BZ0FpQWlBQ0lBVWdCMEVkZGtFRWNXcEJFR29vQWdBaUJVWWJJQUFnQWhzaEFDQUhRUUYwSVFjZ0JRMEFDd3NDUUNBQUlBaHlEUUJCQUNFSVFRSWdDM1FpQUVFQUlBQnJjaUFHY1NJQVJRMERJQUJvUVFKMFFmekpCR29vQWdBaEFBc2dBRVVOQVFzRFFDQUFLQUlFUVhoeElBTnJJZ0lnQkVraEJ3SkFJQUFvQWhBaUJRMEFJQUJCRkdvb0FnQWhCUXNnQWlBRUlBY2JJUVFnQUNBSUlBY2JJUWdnQlNFQUlBVU5BQXNMSUFoRkRRQWdCRUVBS0FMVXh3UWdBMnRQRFFBZ0NDZ0NHQ0VMQWtBZ0NDZ0NEQ0lISUFoR0RRQWdDQ2dDQ0NJQVFRQW9BdHpIQkVrYUlBQWdCellDRENBSElBQTJBZ2dNQndzQ1FDQUlRUlJxSWdVb0FnQWlBQTBBSUFnb0FoQWlBRVVOQXlBSVFSQnFJUVVMQTBBZ0JTRUNJQUFpQjBFVWFpSUZLQUlBSWdBTkFDQUhRUkJxSVFVZ0J5Z0NFQ0lBRFFBTElBSkJBRFlDQUF3R0N3SkFRUUFvQXRUSEJDSUFJQU5KRFFCQkFDZ0M0TWNFSVFRQ1FBSkFJQUFnQTJzaUJVRVFTUTBBSUFRZ0Eyb2lCeUFGUVFGeU5nSUVJQVFnQUdvZ0JUWUNBQ0FFSUFOQkEzSTJBZ1FNQVFzZ0JDQUFRUU55TmdJRUlBUWdBR29pQUNBQUtBSUVRUUZ5TmdJRVFRQWhCMEVBSVFVTFFRQWdCVFlDMU1jRVFRQWdCellDNE1jRUlBUkJDR29oQUF3SUN3SkFRUUFvQXRqSEJDSUhJQU5ORFFCQkFDQUhJQU5ySWdRMkF0akhCRUVBUVFBb0F1VEhCQ0lBSUFOcUlnVTJBdVRIQkNBRklBUkJBWEkyQWdRZ0FDQURRUU55TmdJRUlBQkJDR29oQUF3SUN3SkFBa0JCQUNnQ3BNc0VSUTBBUVFBb0FxekxCQ0VFREFFTFFRQkNmemNDc01zRVFRQkNnS0NBZ0lDQUJEY0NxTXNFUVFBZ0FVRU1ha0Z3Y1VIWXF0V3FCWE0yQXFUTEJFRUFRUUEyQXJqTEJFRUFRUUEyQW9qTEJFR0FJQ0VFQzBFQUlRQWdCQ0FEUVM5cUlnWnFJZ0pCQUNBRWF5SUxjU0lJSUFOTkRRZEJBQ0VBQWtCQkFDZ0NoTXNFSWdSRkRRQkJBQ2dDL01vRUlnVWdDR29pQ2lBRlRRMElJQW9nQkVzTkNBc0NRQUpBUVFBdEFJakxCRUVFY1EwQUFrQUNRQUpBQWtBQ1FFRUFLQUxreHdRaUJFVU5BRUdNeXdRaEFBTkFBa0FnQUNnQ0FDSUZJQVJMRFFBZ0JTQUFLQUlFYWlBRVN3MERDeUFBS0FJSUlnQU5BQXNMUVFBUXJ3RWlCMEYvUmcwRElBZ2hBZ0pBUVFBb0FxakxCQ0lBUVg5cUlnUWdCM0ZGRFFBZ0NDQUhheUFFSUFkcVFRQWdBR3R4YWlFQ0N5QUNJQU5ORFFNQ1FFRUFLQUtFeXdRaUFFVU5BRUVBS0FMOHlnUWlCQ0FDYWlJRklBUk5EUVFnQlNBQVN3MEVDeUFDRUs4QklnQWdCMGNOQVF3RkN5QUNJQWRySUF0eElnSVFyd0VpQnlBQUtBSUFJQUFvQWdScVJnMEJJQWNoQUFzZ0FFRi9SZzBCQWtBZ0FpQURRVEJxU1EwQUlBQWhCd3dFQ3lBR0lBSnJRUUFvQXF6TEJDSUVha0VBSUFScmNTSUVFSzhCUVg5R0RRRWdCQ0FDYWlFQ0lBQWhCd3dEQ3lBSFFYOUhEUUlMUVFCQkFDZ0NpTXNFUVFSeU5nS0l5d1FMSUFnUXJ3RWhCMEVBRUs4QklRQWdCMEYvUmcwRklBQkJmMFlOQlNBSElBQlBEUVVnQUNBSGF5SUNJQU5CS0dwTkRRVUxRUUJCQUNnQy9Nb0VJQUpxSWdBMkF2ektCQUpBSUFCQkFDZ0NnTXNFVFEwQVFRQWdBRFlDZ01zRUN3SkFBa0JCQUNnQzVNY0VJZ1JGRFFCQmpNc0VJUUFEUUNBSElBQW9BZ0FpQlNBQUtBSUVJZ2hxUmcwQ0lBQW9BZ2dpQUEwQURBVUxBQXNDUUFKQVFRQW9BdHpIQkNJQVJRMEFJQWNnQUU4TkFRdEJBQ0FITmdMY3h3UUxRUUFoQUVFQUlBSTJBcERMQkVFQUlBYzJBb3pMQkVFQVFYODJBdXpIQkVFQVFRQW9BcVRMQkRZQzhNY0VRUUJCQURZQ21Nc0VBMEFnQUVFRGRDSUVRZnpIQkdvZ0JFSDB4d1JxSWdVMkFnQWdCRUdBeUFScUlBVTJBZ0FnQUVFQmFpSUFRU0JIRFFBTFFRQWdBa0ZZYWlJQVFYZ2dCMnRCQjNFaUJHc2lCVFlDMk1jRVFRQWdCeUFFYWlJRU5nTGt4d1FnQkNBRlFRRnlOZ0lFSUFjZ0FHcEJLRFlDQkVFQVFRQW9BclRMQkRZQzZNY0VEQVFMSUFRZ0IwOE5BaUFFSUFWSkRRSWdBQ2dDREVFSWNRMENJQUFnQ0NBQ2FqWUNCRUVBSUFSQmVDQUVhMEVIY1NJQWFpSUZOZ0xreHdSQkFFRUFLQUxZeHdRZ0Ftb2lCeUFBYXlJQU5nTFl4d1FnQlNBQVFRRnlOZ0lFSUFRZ0IycEJLRFlDQkVFQVFRQW9BclRMQkRZQzZNY0VEQU1MUVFBaENBd0ZDMEVBSVFjTUF3c0NRQ0FIUVFBb0F0ekhCRThOQUVFQUlBYzJBdHpIQkFzZ0J5QUNhaUVGUVl6TEJDRUFBa0FDUUFKQUFrQURRQ0FBS0FJQUlBVkdEUUVnQUNnQ0NDSUFEUUFNQWdzQUN5QUFMUUFNUVFoeFJRMEJDMEdNeXdRaEFBSkFBMEFDUUNBQUtBSUFJZ1VnQkVzTkFDQUZJQUFvQWdScUlnVWdCRXNOQWdzZ0FDZ0NDQ0VBREFBTEFBdEJBQ0FDUVZocUlnQkJlQ0FIYTBFSGNTSUlheUlMTmdMWXh3UkJBQ0FISUFocUlnZzJBdVRIQkNBSUlBdEJBWEkyQWdRZ0J5QUFha0VvTmdJRVFRQkJBQ2dDdE1zRU5nTG94d1FnQkNBRlFTY2dCV3RCQjNGcVFWRnFJZ0FnQUNBRVFSQnFTUnNpQ0VFYk5nSUVJQWhCRUdwQkFDa0NsTXNFTndJQUlBaEJBQ2tDak1zRU53SUlRUUFnQ0VFSWFqWUNsTXNFUVFBZ0FqWUNrTXNFUVFBZ0J6WUNqTXNFUVFCQkFEWUNtTXNFSUFoQkdHb2hBQU5BSUFCQkJ6WUNCQ0FBUVFocUlRY2dBRUVFYWlFQUlBY2dCVWtOQUFzZ0NDQUVSZzBDSUFnZ0NDZ0NCRUYrY1RZQ0JDQUVJQWdnQkdzaUIwRUJjallDQkNBSUlBYzJBZ0FDUUNBSFFmOEJTdzBBSUFkQmVIRkI5TWNFYWlFQUFrQUNRRUVBS0FMTXh3UWlCVUVCSUFkQkEzWjBJZ2R4RFFCQkFDQUZJQWR5TmdMTXh3UWdBQ0VGREFFTElBQW9BZ2doQlFzZ0FDQUVOZ0lJSUFVZ0JEWUNEQ0FFSUFBMkFnd2dCQ0FGTmdJSURBTUxRUjhoQUFKQUlBZEIvLy8vQjBzTkFDQUhRU1lnQjBFSWRtY2lBR3QyUVFGeElBQkJBWFJyUVQ1cUlRQUxJQVFnQURZQ0hDQUVRZ0EzQWhBZ0FFRUNkRUg4eVFScUlRVUNRQUpBUVFBb0F0REhCQ0lJUVFFZ0FIUWlBbkVOQUVFQUlBZ2dBbkkyQXRESEJDQUZJQVEyQWdBZ0JDQUZOZ0lZREFFTElBZEJBRUVaSUFCQkFYWnJJQUJCSDBZYmRDRUFJQVVvQWdBaENBTkFJQWdpQlNnQ0JFRjRjU0FIUmcwRElBQkJIWFloQ0NBQVFRRjBJUUFnQlNBSVFRUnhha0VRYWlJQ0tBSUFJZ2dOQUFzZ0FpQUVOZ0lBSUFRZ0JUWUNHQXNnQkNBRU5nSU1JQVFnQkRZQ0NBd0NDeUFBSUFjMkFnQWdBQ0FBS0FJRUlBSnFOZ0lFSUFjZ0JTQURFTEVCSVFBTUJRc2dCU2dDQ0NJQUlBUTJBZ3dnQlNBRU5nSUlJQVJCQURZQ0dDQUVJQVUyQWd3Z0JDQUFOZ0lJQzBFQUtBTFl4d1FpQUNBRFRRMEFRUUFnQUNBRGF5SUVOZ0xZeHdSQkFFRUFLQUxreHdRaUFDQURhaUlGTmdMa3h3UWdCU0FFUVFGeU5nSUVJQUFnQTBFRGNqWUNCQ0FBUVFocUlRQU1Bd3NRZjBFd05nSUFRUUFoQUF3Q0N3SkFJQXRGRFFBQ1FBSkFJQWdnQ0NnQ0hDSUZRUUowUWZ6SkJHb2lBQ2dDQUVjTkFDQUFJQWMyQWdBZ0J3MEJRUUFnQmtGK0lBVjNjU0lHTmdMUXh3UU1BZ3NnQzBFUVFSUWdDeWdDRUNBSVJodHFJQWMyQWdBZ0IwVU5BUXNnQnlBTE5nSVlBa0FnQ0NnQ0VDSUFSUTBBSUFjZ0FEWUNFQ0FBSUFjMkFoZ0xJQWhCRkdvb0FnQWlBRVVOQUNBSFFSUnFJQUEyQWdBZ0FDQUhOZ0lZQ3dKQUFrQWdCRUVQU3cwQUlBZ2dCQ0FEYWlJQVFRTnlOZ0lFSUFnZ0FHb2lBQ0FBS0FJRVFRRnlOZ0lFREFFTElBZ2dBMEVEY2pZQ0JDQUlJQU5xSWdjZ0JFRUJjallDQkNBSElBUnFJQVEyQWdBQ1FDQUVRZjhCU3cwQUlBUkJlSEZCOU1jRWFpRUFBa0FDUUVFQUtBTE14d1FpQlVFQklBUkJBM1owSWdSeERRQkJBQ0FGSUFSeU5nTE14d1FnQUNFRURBRUxJQUFvQWdnaEJBc2dBQ0FITmdJSUlBUWdCellDRENBSElBQTJBZ3dnQnlBRU5nSUlEQUVMUVI4aEFBSkFJQVJCLy8vL0Iwc05BQ0FFUVNZZ0JFRUlkbWNpQUd0MlFRRnhJQUJCQVhSclFUNXFJUUFMSUFjZ0FEWUNIQ0FIUWdBM0FoQWdBRUVDZEVIOHlRUnFJUVVDUUFKQUFrQWdCa0VCSUFCMElnTnhEUUJCQUNBR0lBTnlOZ0xReHdRZ0JTQUhOZ0lBSUFjZ0JUWUNHQXdCQ3lBRVFRQkJHU0FBUVFGMmF5QUFRUjlHRzNRaEFDQUZLQUlBSVFNRFFDQURJZ1VvQWdSQmVIRWdCRVlOQWlBQVFSMTJJUU1nQUVFQmRDRUFJQVVnQTBFRWNXcEJFR29pQWlnQ0FDSUREUUFMSUFJZ0J6WUNBQ0FISUFVMkFoZ0xJQWNnQnpZQ0RDQUhJQWMyQWdnTUFRc2dCU2dDQ0NJQUlBYzJBZ3dnQlNBSE5nSUlJQWRCQURZQ0dDQUhJQVUyQWd3Z0J5QUFOZ0lJQ3lBSVFRaHFJUUFNQVFzQ1FDQUtSUTBBQWtBQ1FDQUhJQWNvQWh3aUJVRUNkRUg4eVFScUlnQW9BZ0JIRFFBZ0FDQUlOZ0lBSUFnTkFVRUFJQWxCZmlBRmQzRTJBdERIQkF3Q0N5QUtRUkJCRkNBS0tBSVFJQWRHRzJvZ0NEWUNBQ0FJUlEwQkN5QUlJQW8yQWhnQ1FDQUhLQUlRSWdCRkRRQWdDQ0FBTmdJUUlBQWdDRFlDR0FzZ0IwRVVhaWdDQUNJQVJRMEFJQWhCRkdvZ0FEWUNBQ0FBSUFnMkFoZ0xBa0FDUUNBRVFROUxEUUFnQnlBRUlBTnFJZ0JCQTNJMkFnUWdCeUFBYWlJQUlBQW9BZ1JCQVhJMkFnUU1BUXNnQnlBRFFRTnlOZ0lFSUFjZ0Eyb2lCU0FFUVFGeU5nSUVJQVVnQkdvZ0JEWUNBQUpBSUFaRkRRQWdCa0Y0Y1VIMHh3UnFJUU5CQUNnQzRNY0VJUUFDUUFKQVFRRWdCa0VEZG5RaUNDQUNjUTBBUVFBZ0NDQUNjallDek1jRUlBTWhDQXdCQ3lBREtBSUlJUWdMSUFNZ0FEWUNDQ0FJSUFBMkFnd2dBQ0FETmdJTUlBQWdDRFlDQ0F0QkFDQUZOZ0xneHdSQkFDQUVOZ0xVeHdRTElBZEJDR29oQUFzZ0FVRVFhaVFBSUFBTGpRZ0JCMzhnQUVGNElBQnJRUWR4YWlJRElBSkJBM0kyQWdRZ0FVRjRJQUZyUVFkeGFpSUVJQU1nQW1vaUJXc2hBZ0pBQWtBZ0JFRUFLQUxreHdSSERRQkJBQ0FGTmdMa3h3UkJBRUVBS0FMWXh3UWdBbW9pQWpZQzJNY0VJQVVnQWtFQmNqWUNCQXdCQ3dKQUlBUkJBQ2dDNE1jRVJ3MEFRUUFnQlRZQzRNY0VRUUJCQUNnQzFNY0VJQUpxSWdJMkF0VEhCQ0FGSUFKQkFYSTJBZ1FnQlNBQ2FpQUNOZ0lBREFFTEFrQWdCQ2dDQkNJQVFRTnhRUUZIRFFBZ0FFRjRjU0VHQWtBQ1FDQUFRZjhCU3cwQUlBUW9BZ2dpQVNBQVFRTjJJZ2RCQTNSQjlNY0VhaUlJUmhvQ1FDQUVLQUlNSWdBZ0FVY05BRUVBUVFBb0FzekhCRUYrSUFkM2NUWUN6TWNFREFJTElBQWdDRVlhSUFFZ0FEWUNEQ0FBSUFFMkFnZ01BUXNnQkNnQ0dDRUpBa0FDUUNBRUtBSU1JZ2dnQkVZTkFDQUVLQUlJSWdCQkFDZ0MzTWNFU1JvZ0FDQUlOZ0lNSUFnZ0FEWUNDQXdCQ3dKQUFrQWdCRUVVYWlJQktBSUFJZ0FOQUNBRUtBSVFJZ0JGRFFFZ0JFRVFhaUVCQ3dOQUlBRWhCeUFBSWdoQkZHb2lBU2dDQUNJQURRQWdDRUVRYWlFQklBZ29BaEFpQUEwQUN5QUhRUUEyQWdBTUFRdEJBQ0VJQ3lBSlJRMEFBa0FDUUNBRUlBUW9BaHdpQVVFQ2RFSDh5UVJxSWdBb0FnQkhEUUFnQUNBSU5nSUFJQWdOQVVFQVFRQW9BdERIQkVGK0lBRjNjVFlDME1jRURBSUxJQWxCRUVFVUlBa29BaEFnQkVZYmFpQUlOZ0lBSUFoRkRRRUxJQWdnQ1RZQ0dBSkFJQVFvQWhBaUFFVU5BQ0FJSUFBMkFoQWdBQ0FJTmdJWUN5QUVRUlJxS0FJQUlnQkZEUUFnQ0VFVWFpQUFOZ0lBSUFBZ0NEWUNHQXNnQmlBQ2FpRUNJQVFnQm1vaUJDZ0NCQ0VBQ3lBRUlBQkJmbkUyQWdRZ0JTQUNRUUZ5TmdJRUlBVWdBbW9nQWpZQ0FBSkFJQUpCL3dGTERRQWdBa0Y0Y1VIMHh3UnFJUUFDUUFKQVFRQW9Bc3pIQkNJQlFRRWdBa0VEZG5RaUFuRU5BRUVBSUFFZ0FuSTJBc3pIQkNBQUlRSU1BUXNnQUNnQ0NDRUNDeUFBSUFVMkFnZ2dBaUFGTmdJTUlBVWdBRFlDRENBRklBSTJBZ2dNQVF0Qkh5RUFBa0FnQWtILy8vOEhTdzBBSUFKQkppQUNRUWgyWnlJQWEzWkJBWEVnQUVFQmRHdEJQbW9oQUFzZ0JTQUFOZ0ljSUFWQ0FEY0NFQ0FBUVFKMFFmekpCR29oQVFKQUFrQUNRRUVBS0FMUXh3UWlDRUVCSUFCMElnUnhEUUJCQUNBSUlBUnlOZ0xReHdRZ0FTQUZOZ0lBSUFVZ0FUWUNHQXdCQ3lBQ1FRQkJHU0FBUVFGMmF5QUFRUjlHRzNRaEFDQUJLQUlBSVFnRFFDQUlJZ0VvQWdSQmVIRWdBa1lOQWlBQVFSMTJJUWdnQUVFQmRDRUFJQUVnQ0VFRWNXcEJFR29pQkNnQ0FDSUlEUUFMSUFRZ0JUWUNBQ0FGSUFFMkFoZ0xJQVVnQlRZQ0RDQUZJQVUyQWdnTUFRc2dBU2dDQ0NJQ0lBVTJBZ3dnQVNBRk5nSUlJQVZCQURZQ0dDQUZJQUUyQWd3Z0JTQUNOZ0lJQ3lBRFFRaHFDOXNNQVFkL0FrQWdBRVVOQUNBQVFYaHFJZ0VnQUVGOGFpZ0NBQ0lDUVhoeElnQnFJUU1DUUNBQ1FRRnhEUUFnQWtFRGNVVU5BU0FCSUFFb0FnQWlBbXNpQVVFQUtBTGN4d1FpQkVrTkFTQUNJQUJxSVFBQ1FBSkFBa0FnQVVFQUtBTGd4d1JHRFFBQ1FDQUNRZjhCU3cwQUlBRW9BZ2dpQkNBQ1FRTjJJZ1ZCQTNSQjlNY0VhaUlHUmhvQ1FDQUJLQUlNSWdJZ0JFY05BRUVBUVFBb0FzekhCRUYrSUFWM2NUWUN6TWNFREFVTElBSWdCa1lhSUFRZ0FqWUNEQ0FDSUFRMkFnZ01CQXNnQVNnQ0dDRUhBa0FnQVNnQ0RDSUdJQUZHRFFBZ0FTZ0NDQ0lDSUFSSkdpQUNJQVkyQWd3Z0JpQUNOZ0lJREFNTEFrQWdBVUVVYWlJRUtBSUFJZ0lOQUNBQktBSVFJZ0pGRFFJZ0FVRVFhaUVFQ3dOQUlBUWhCU0FDSWdaQkZHb2lCQ2dDQUNJQ0RRQWdCa0VRYWlFRUlBWW9BaEFpQWcwQUN5QUZRUUEyQWdBTUFnc2dBeWdDQkNJQ1FRTnhRUU5IRFFKQkFDQUFOZ0xVeHdRZ0F5QUNRWDV4TmdJRUlBRWdBRUVCY2pZQ0JDQURJQUEyQWdBUEMwRUFJUVlMSUFkRkRRQUNRQUpBSUFFZ0FTZ0NIQ0lFUVFKMFFmekpCR29pQWlnQ0FFY05BQ0FDSUFZMkFnQWdCZzBCUVFCQkFDZ0MwTWNFUVg0Z0JIZHhOZ0xReHdRTUFnc2dCMEVRUVJRZ0J5Z0NFQ0FCUmh0cUlBWTJBZ0FnQmtVTkFRc2dCaUFITmdJWUFrQWdBU2dDRUNJQ1JRMEFJQVlnQWpZQ0VDQUNJQVkyQWhnTElBRkJGR29vQWdBaUFrVU5BQ0FHUVJScUlBSTJBZ0FnQWlBR05nSVlDeUFCSUFOUERRQWdBeWdDQkNJQ1FRRnhSUTBBQWtBQ1FBSkFBa0FDUUNBQ1FRSnhEUUFDUUNBRFFRQW9BdVRIQkVjTkFFRUFJQUUyQXVUSEJFRUFRUUFvQXRqSEJDQUFhaUlBTmdMWXh3UWdBU0FBUVFGeU5nSUVJQUZCQUNnQzRNY0VSdzBHUVFCQkFEWUMxTWNFUVFCQkFEWUM0TWNFRHdzQ1FDQURRUUFvQXVESEJFY05BRUVBSUFFMkF1REhCRUVBUVFBb0F0VEhCQ0FBYWlJQU5nTFV4d1FnQVNBQVFRRnlOZ0lFSUFFZ0FHb2dBRFlDQUE4TElBSkJlSEVnQUdvaEFBSkFJQUpCL3dGTERRQWdBeWdDQ0NJRUlBSkJBM1lpQlVFRGRFSDB4d1JxSWdaR0dnSkFJQU1vQWd3aUFpQUVSdzBBUVFCQkFDZ0N6TWNFUVg0Z0JYZHhOZ0xNeHdRTUJRc2dBaUFHUmhvZ0JDQUNOZ0lNSUFJZ0JEWUNDQXdFQ3lBREtBSVlJUWNDUUNBREtBSU1JZ1lnQTBZTkFDQURLQUlJSWdKQkFDZ0MzTWNFU1JvZ0FpQUdOZ0lNSUFZZ0FqWUNDQXdEQ3dKQUlBTkJGR29pQkNnQ0FDSUNEUUFnQXlnQ0VDSUNSUTBDSUFOQkVHb2hCQXNEUUNBRUlRVWdBaUlHUVJScUlnUW9BZ0FpQWcwQUlBWkJFR29oQkNBR0tBSVFJZ0lOQUFzZ0JVRUFOZ0lBREFJTElBTWdBa0YrY1RZQ0JDQUJJQUJCQVhJMkFnUWdBU0FBYWlBQU5nSUFEQU1MUVFBaEJnc2dCMFVOQUFKQUFrQWdBeUFES0FJY0lnUkJBblJCL01rRWFpSUNLQUlBUncwQUlBSWdCallDQUNBR0RRRkJBRUVBS0FMUXh3UkJmaUFFZDNFMkF0REhCQXdDQ3lBSFFSQkJGQ0FIS0FJUUlBTkdHMm9nQmpZQ0FDQUdSUTBCQ3lBR0lBYzJBaGdDUUNBREtBSVFJZ0pGRFFBZ0JpQUNOZ0lRSUFJZ0JqWUNHQXNnQTBFVWFpZ0NBQ0lDUlEwQUlBWkJGR29nQWpZQ0FDQUNJQVkyQWhnTElBRWdBRUVCY2pZQ0JDQUJJQUJxSUFBMkFnQWdBVUVBS0FMZ3h3UkhEUUJCQUNBQU5nTFV4d1FQQ3dKQUlBQkIvd0ZMRFFBZ0FFRjRjVUgweHdScUlRSUNRQUpBUVFBb0FzekhCQ0lFUVFFZ0FFRURkblFpQUhFTkFFRUFJQVFnQUhJMkFzekhCQ0FDSVFBTUFRc2dBaWdDQ0NFQUN5QUNJQUUyQWdnZ0FDQUJOZ0lNSUFFZ0FqWUNEQ0FCSUFBMkFnZ1BDMEVmSVFJQ1FDQUFRZi8vL3dkTERRQWdBRUVtSUFCQkNIWm5JZ0pyZGtFQmNTQUNRUUYwYTBFK2FpRUNDeUFCSUFJMkFod2dBVUlBTndJUUlBSkJBblJCL01rRWFpRUVBa0FDUUFKQUFrQkJBQ2dDME1jRUlnWkJBU0FDZENJRGNRMEFRUUFnQmlBRGNqWUMwTWNFSUFRZ0FUWUNBQ0FCSUFRMkFoZ01BUXNnQUVFQVFSa2dBa0VCZG1zZ0FrRWZSaHQwSVFJZ0JDZ0NBQ0VHQTBBZ0JpSUVLQUlFUVhoeElBQkdEUUlnQWtFZGRpRUdJQUpCQVhRaEFpQUVJQVpCQkhGcVFSQnFJZ01vQWdBaUJnMEFDeUFESUFFMkFnQWdBU0FFTmdJWUN5QUJJQUUyQWd3Z0FTQUJOZ0lJREFFTElBUW9BZ2dpQUNBQk5nSU1JQVFnQVRZQ0NDQUJRUUEyQWhnZ0FTQUVOZ0lNSUFFZ0FEWUNDQXRCQUVFQUtBTHN4d1JCZjJvaUFVRi9JQUViTmdMc3h3UUxDMU1CQVg0Q1FBSkFJQU5Cd0FCeFJRMEFJQUVnQTBGQWFxMkdJUUpDQUNFQkRBRUxJQU5GRFFBZ0FVSEFBQ0FEYTYySUlBSWdBNjBpQklhRUlRSWdBU0FFaGlFQkN5QUFJQUUzQXdBZ0FDQUNOd01JQzQ0Q0FnSi9BMzRqQUVFUWF5SUNKQUFDUUFKQUlBRzlJZ1JDLy8vLy8vLy8vLy8vQUlNaUJVS0FnSUNBZ0lDQWVIeEMvLy8vLy8vLy8rLy9BRllOQUNBRlFqeUdJUVlnQlVJRWlFS0FnSUNBZ0lDQWdEeDhJUVVNQVFzQ1FDQUZRb0NBZ0lDQWdJRDQvd0JVRFFBZ0JFSThoaUVHSUFSQ0JJaENnSUNBZ0lDQXdQLy9BSVFoQlF3QkN3SkFJQVZRUlEwQVFnQWhCa0lBSVFVTUFRc2dBaUFGUWdBZ0JhZG5RU0JxSUFWQ0lJaW5aeUFGUW9DQWdJQVFWQnNpQTBFeGFoQ3pBU0FDUVFocUtRTUFRb0NBZ0lDQWdNQUFoVUdNK0FBZ0EydXRRakNHaENFRklBSXBBd0FoQmdzZ0FDQUdOd01BSUFBZ0JTQUVRb0NBZ0lDQWdJQ0FnSCtEaERjRENDQUNRUkJxSkFBTGlBRUJBMzhqQUVFUWF5SUNKQUJCQUNFREFrQWdBVUl3aUtkQi8vOEJjU0lFUWYvL0FFa05BQUpBSUFSQjRmOStha0ZmU3cwQUlBRkNQNGVuUWYvLy8vOEhjeUVEREFFTElBSWdBQ0FCUXYvLy8vLy8veitEUW9DQWdJQ0FnTUFBaEVIdmdBRWdCR3NRdHdFZ0FpZ0NBQ0lEUVFBZ0Eyc2dBVUovVlJzaEF3c2dBa0VRYWlRQUlBTUxjZ0lCZndKK0l3QkJFR3NpQWlRQUFrQUNRQ0FCRFFCQ0FDRURRZ0FoQkF3QkN5QUNJQUd0UWdBZ0FXY2lBVUhSQUdvUXN3RWdBa0VJYWlrREFFS0FnSUNBZ0lEQUFJVkJub0FCSUFGcnJVSXdobndoQkNBQ0tRTUFJUU1MSUFBZ0F6Y0RBQ0FBSUFRM0F3Z2dBa0VRYWlRQUMxTUJBWDRDUUFKQUlBTkJ3QUJ4UlEwQUlBSWdBMEZBYXEySUlRRkNBQ0VDREFFTElBTkZEUUFnQWtIQUFDQURhNjJHSUFFZ0E2MGlCSWlFSVFFZ0FpQUVpQ0VDQ3lBQUlBRTNBd0FnQUNBQ053TUlDNW9MQWdWL0QzNGpBRUhnQUdzaUJTUUFJQVJDLy8vLy8vLy9QNE1oQ2lBRUlBS0ZRb0NBZ0lDQWdJQ0FnSCtESVFzZ0FrTC8vLy8vLy84L2d5SU1RaUNJSVEwZ0JFSXdpS2RCLy84QmNTRUdBa0FDUUFKQUlBSkNNSWluUWYvL0FYRWlCMEdCZ0g1cVFZS0Fma2tOQUVFQUlRZ2dCa0dCZ0g1cVFZR0Fma3NOQVFzQ1FDQUJVQ0FDUXYvLy8vLy8vLy8vL3dDRElnNUNnSUNBZ0lDQXdQLy9BRlFnRGtLQWdJQ0FnSURBLy84QVVSc05BQ0FDUW9DQWdJQ0FnQ0NFSVFzTUFnc0NRQ0FEVUNBRVF2Ly8vLy8vLy8vLy93Q0RJZ0pDZ0lDQWdJQ0F3UC8vQUZRZ0FrS0FnSUNBZ0lEQS8vOEFVUnNOQUNBRVFvQ0FnSUNBZ0NDRUlRc2dBeUVCREFJTEFrQWdBU0FPUW9DQWdJQ0FnTUQvL3dDRmhFSUFVZzBBQWtBZ0F5QUNoRkJGRFFCQ2dJQ0FnSUNBNFAvL0FDRUxRZ0FoQVF3REN5QUxRb0NBZ0lDQWdNRC8vd0NFSVF0Q0FDRUJEQUlMQWtBZ0F5QUNRb0NBZ0lDQWdNRC8vd0NGaEVJQVVnMEFJQUVnRG9RaEFrSUFJUUVDUUNBQ1VFVU5BRUtBZ0lDQWdJRGcvLzhBSVFzTUF3c2dDMEtBZ0lDQWdJREEvLzhBaENFTERBSUxBa0FnQVNBT2hFSUFVZzBBUWdBaEFRd0NDd0pBSUFNZ0FvUkNBRklOQUVJQUlRRU1BZ3RCQUNFSUFrQWdEa0wvLy8vLy8vOC9WZzBBSUFWQjBBQnFJQUVnRENBQklBd2dERkFpQ0J0NUlBaEJCblN0ZktjaUNFRnhhaEN6QVVFUUlBaHJJUWdnQlVIWUFHb3BBd0FpREVJZ2lDRU5JQVVwQTFBaEFRc2dBa0wvLy8vLy8vOC9WZzBBSUFWQndBQnFJQU1nQ2lBRElBb2dDbEFpQ1J0NUlBbEJCblN0ZktjaUNVRnhhaEN6QVNBSUlBbHJRUkJxSVFnZ0JVSElBR29wQXdBaENpQUZLUU5BSVFNTElBTkNENFlpRGtLQWdQNy9ENE1pQWlBQlFpQ0lJZ1IrSWc4Z0RrSWdpQ0lPSUFGQy8vLy8vdytESWdGK2ZDSVFRaUNHSWhFZ0FpQUJmbndpRWlBUlZLMGdBaUFNUXYvLy8vOFBneUlNZmlJVElBNGdCSDU4SWhFZ0EwSXhpQ0FLUWcrR0loU0VRdi8vLy84UGd5SURJQUYrZkNJVklCQkNJSWdnRUNBUFZLMUNJSWFFZkNJUUlBSWdEVUtBZ0FTRUlncCtJaFlnRGlBTWZud2lEU0FVUWlDSVFvQ0FnSUFJaENJQ0lBRitmQ0lQSUFNZ0JINThJaFJDSUlaOEloZDhJUUVnQnlBR2FpQUlha0dCZ0g5cUlRWUNRQUpBSUFJZ0JINGlHQ0FPSUFwK2ZDSUVJQmhVclNBRUlBTWdESDU4SWc0Z0JGU3RmQ0FDSUFwK2ZDQU9JQkVnRTFTdElCVWdFVlN0Zkh3aUJDQU9WSzE4SUFNZ0NuNGlBeUFDSUF4K2ZDSUNJQU5VclVJZ2hpQUNRaUNJaEh3Z0JDQUNRaUNHZkNJQ0lBUlVyWHdnQWlBVVFpQ0lJQTBnRmxTdElBOGdEVlN0ZkNBVUlBOVVyWHhDSUlhRWZDSUVJQUpVclh3Z0JDQVFJQlZVclNBWElCQlVyWHg4SWdJZ0JGU3RmQ0lFUW9DQWdJQ0FnTUFBZzFBTkFDQUdRUUZxSVFZTUFRc2dFa0kvaUNFRElBUkNBWVlnQWtJL2lJUWhCQ0FDUWdHR0lBRkNQNGlFSVFJZ0VrSUJoaUVTSUFNZ0FVSUJob1FoQVFzQ1FDQUdRZi8vQVVnTkFDQUxRb0NBZ0lDQWdNRC8vd0NFSVF0Q0FDRUJEQUVMQWtBQ1FDQUdRUUJLRFFBQ1FFRUJJQVpySWdkQi93QkxEUUFnQlVFd2FpQVNJQUVnQmtIL0FHb2lCaEN6QVNBRlFTQnFJQUlnQkNBR0VMTUJJQVZCRUdvZ0VpQUJJQWNRdHdFZ0JTQUNJQVFnQnhDM0FTQUZLUU1nSUFVcEF4Q0VJQVVwQXpBZ0JVRXdha0VJYWlrREFJUkNBRkt0aENFU0lBVkJJR3BCQ0dvcEF3QWdCVUVRYWtFSWFpa0RBSVFoQVNBRlFRaHFLUU1BSVFRZ0JTa0RBQ0VDREFJTFFnQWhBUXdDQ3lBR3JVSXdoaUFFUXYvLy8vLy8veitEaENFRUN5QUVJQXVFSVFzQ1FDQVNVQ0FCUW45VklBRkNnSUNBZ0lDQWdJQ0FmMUViRFFBZ0N5QUNRZ0Y4SWdGUXJYd2hDd3dCQ3dKQUlCSWdBVUtBZ0lDQWdJQ0FnSUIvaFlSQ0FGRU5BQ0FDSVFFTUFRc2dDeUFDSUFKQ0FZTjhJZ0VnQWxTdGZDRUxDeUFBSUFFM0F3QWdBQ0FMTndNSUlBVkI0QUJxSkFBTHhBTUNBMzhCZmlNQVFTQnJJZ0lrQUFKQUFrQWdBVUwvLy8vLy8vLy8vLzhBZ3lJRlFvQ0FnSUNBZ01DL1FId2dCVUtBZ0lDQWdJREF3TDkvZkZvTkFDQUJRaG1JcHlFREFrQWdBRkFnQVVMLy8vOFBneUlGUW9DQWdBaFVJQVZDZ0lDQUNGRWJEUUFnQTBHQmdJQ0FCR29oQkF3Q0N5QURRWUNBZ0lBRWFpRUVJQUFnQlVLQWdJQUloWVJDQUZJTkFTQUVJQU5CQVhGcUlRUU1BUXNDUUNBQVVDQUZRb0NBZ0lDQWdNRC8vd0JVSUFWQ2dJQ0FnSUNBd1AvL0FGRWJEUUFnQVVJWmlLZEIvLy8vQVhGQmdJQ0EvZ2R5SVFRTUFRdEJnSUNBL0FjaEJDQUZRdi8vLy8vLy83Ky93QUJXRFFCQkFDRUVJQVZDTUlpbklnTkJrZjRBU1EwQUlBSkJFR29nQUNBQlF2Ly8vLy8vL3orRFFvQ0FnSUNBZ01BQWhDSUZJQU5CLzRGL2FoQ3pBU0FDSUFBZ0JVR0Ivd0FnQTJzUXR3RWdBa0VJYWlrREFDSUZRaG1JcHlFRUFrQWdBaWtEQUNBQ0tRTVFJQUpCRUdwQkNHb3BBd0NFUWdCU3JZUWlBRkFnQlVMLy8vOFBneUlGUW9DQWdBaFVJQVZDZ0lDQUNGRWJEUUFnQkVFQmFpRUVEQUVMSUFBZ0JVS0FnSUFJaFlSQ0FGSU5BQ0FFUVFGeElBUnFJUVFMSUFKQklHb2tBQ0FFSUFGQ0lJaW5RWUNBZ0lCNGNYSytDd1FBSXdBTEJnQWdBQ1FBQ3hJQkFuOGpBQ0FBYTBGd2NTSUJKQUFnQVFzRUFDTUFDd1lBSUFBa0FRc0VBQ01CQ3hJQVFZQ0FCQ1FEUVFCQkQycEJjSEVrQWdzSEFDTUFJd0pyQ3dRQUl3TUxCQUFqQWdzTkFDQUJJQUlnQXlBQUVRb0FDeVVCQVg0Z0FDQUJJQUt0SUFPdFFpQ0doQ0FFRU1RQklRVWdCVUlnaUtjUXZnRWdCYWNMRXdBZ0FDQUJweUFCUWlDSXB5QUNJQU1RQ0FzTHpEd0NBRUdBZ0FRTHNEd2dDYUFBU0ZSVVVIQnliM2g1QUVaVVVIQnliM2g1QUdWdWRnQjBhVzFsYjNWMEFHOXdkQUJ6YjNWdVpHWnZiblFBWkdWbVlYVnNkQUJ5YVdkb2RBQnNaV1owQUdOdmNIbGtjblZ0YzJWMEFDNXdZWFFBWkdseUFHTmxiblJsY2dCdFlXbHNZV1JrY2dCc2IyOXdBR0Z0Y0FCemRISnBjQUJyWldWd0FHMWhjQUFqWlhoMFpXNXphVzl1QUdGc2RHRnpjMmxuYmdCd1lXNEFZMjl0YlFCMFlXbHNBR052Y0hsaVlXNXJBSFJwYldsa2FYUjVMbU5tWndCMWJtUmxaZ0J1YjNSbEFIQnliMmRpWVhObEFITnZkWEpqWlFCeVlnQnlkMkVBUHo4L1B6OC9BRWRHTVZCQlZFTklNVEV3QUVsRUl6QXdNREF3TWdCSFJqRlFRVlJEU0RFd01BQkpSQ013TURBd01ESUFBUEFmQUFEV0lRQUEyU01BQVBzbEFBQTlLQUFBb1NvQUFDb3RBQURhTHdBQXNqSUFBTFkxQUFEb09BQUFTandBQU9BL0FBQ3NRd0FBc2tjQUFQVkxBQUI2VUFBQVExVUFBRlZhQUFDMFh3QUFaV1VBQUd4ckFBRFBjUUFBbEhnQUFMOS9BQUJZaHdBQVpJOEFBT3VYQUFEem9BQUFocW9BQUttMEFBQm52d0FBeWNvQUFOaldBQUNlNHdBQUovRUFBSDcvQUFDd0RnRUF5QjRCQU5ZdkFRRG5RUUVBQzFVQkFGTnBBUURQZmdFQWtwVUJBTEN0QVFBOXh3RUFUK0lCQVAzK0FRQmZIUUlBa0QwQ0FLdGZBZ0RPZ3dJQUZxb0NBS1hTQWdDZS9RSUFKQ3NEQUdCYkF3QjZqZ01BbnNRREFQcjlBd0MvT2dRQUlYc0VBRmUvQkFDY0J3VUFMRlFGQUVxbEJRQTcrd1VBU1ZZR0FNQzJCZ0QwSEFjQU80a0hBUFA3QndCOWRRZ0FRdllJQUs1K0NRQTNEd29BV0tnS0FKVktDd0IzOWdzQWthd01BSUJ0RFFEb09RNEFkeElQQU9iM0R3RDc2aEFBZyt3UkFGejlFZ0J1SGhRQXNWQVZBQ3FWRmdEdTdCY0FJMWtaQUFEYkdnRFBjeHdBN1NRZUFNM3ZId0QxMVNFQUJ0a2pBTGo2SlFEY1BDZ0FZcUVxQUZNcUxRRGIyUzhBUnJJeUFBQzJOUUNlNXpnQTJrazhBSm5mUHdEcXEwTUFETEpIQUhEMVN3QzVlVkFBeEVKVkFLZFVXZ0MzczE4QWkyUmxBQUJzYXdBOHozRUF0Wk40QURLL2Z3RFVWNGNBR1dTUEFOL3Fsd0J5ODZBQWg0V3FBRTZwdEFCdVo3OEFBQUFBQUFBQWtEOUx2elZCV29pUVAvRXV2WUkrRlpFLytjWXpjOU9ta1QvQ2JkMEtRVDJTUHozQ25aYXcySkkvNk9wT3cweDVrei9NQm5tcFFSK1VQNngzYmRtOHlwUS9pRmpKWisxN2xUK2FqMkw2QXpPV1Axa0lvOVV5OEpZL1JjQlY2cTJ6bHo5aWNPbmpxbjJZUC9LOUxEZGhUcGsvdmYySE1Rb21tajlVdUxnSTRRU2JQK2hBRStzaTY1cy9aZFZPRUEvWm5EOVM1T0RLNXM2ZFAyNDg3Sm50eko0L2xSTEpPMm5Ubno4bmVwWGdVSEdnUDRIMGROQncvYUEvSnhnNjVqcU9vVDlLSFhmaTFpT2lQekpVZzlodHZxSS9pU2ZDT1NwZW96L0RPVXJoTndPa1ArSFE3eC9FcmFRL2pkNjF5UDFkcFQ4K0Q2azlGUlNtUDk5bktIMDgwS1kvbXhlZkw2ZVNweitVUXJPMWlsdW9QMUNxN1RZZUs2ay83VG5lc0pvQnFqOW9uc0VHTzkrcVA3WTJyQkU4eEtzLytNcytzZHl3ckQ4eHFPbmNYYVd0UDNQSXdyVUNvcTQvYkJEMG1CQ25yejlPUjJPWloxcXdQOVVGS0VuRTViQS9FU2JrbnNSMXNUKzV6TVVqa0FxeVA0QXI2TEZQcExJL21NeUtmeTFEc3o5NWM2Z3FWZWV6UDRIQjhNVHprTFEvRStnbjREZEF0VC95emUrYVVmVzFQM2txL3ExeXNMWS9QamZEZWM1eHR6K1d0NFFVbWptNFAzdzE4VmdNQ0xrL0tIUXY5VjNkdVQvcU9tNTZ5Ym02UHdDKytHeUxuYnMvdVEvVVZPS0l2RDkzS2VyT0RueTlQMXBEeDU1VGQ3NC9jVm51d1BWNnZ6OWE4K1ErbmtQQVA0WUVuNzQ0enNBLytyWndiWEJkd1QrR1NuR2RiUEhCUDU2U3orOVZpc0kvOGFENVgxWW93ejgxZ0NOUG1jdkRQd2dwTUpCTGRNUS9OUGIvYzVzaXhUODgrU2ZXdU5iRlArZXNGU3JWa01ZL1o2R2lpQ05SeHo5QTNCdSsyQmZJUC8zRndGZ3I1Y2cvcWFDOXQxTzV5VCtYbzZVYWpKVEtQM0Q4Y0xFUWQ4cy9oQmtEclI5aHpEL0V4ajFRK1ZMTlA0SE5wUUhnVE00L0RPK2RYUmhQenorem5aNms5Q3pRUHhqNDRnTE90dEEvM1J0aElqNUYwVC94Sm1ZZWJOalJQN2pmZzErQWNOSS9qOVNvcHFRTjB6LzJCcGNZQkxEVFB4bEl2RW5MVjlRL0pvZHZTaWdGMVQvcWJaYXpTcmpWUDE3RXRyTmpjZFkvdnpGM0hLWXcxejlBRUpOd1J2YlhQL1VuUmZKNnd0Zy9SRVl0c251VjJUL3F5TFNlZ20vYVAyUlc5cFBMVU5zL3pDRXRiSlE1M0Q4UlBiQVFIU3JkUHp1amZvdW5JdDQvRGN4Z0dYZ2ozeitoWVZLZWFoYmdQeXIwUE9pRG4rQS9vdE40amkwdDRUOG1WTlYxanIvaFA3c1JsczdPVnVJL1ZKcDdIeGp6NGovYUh5cFJsWlRqUDFsVDhibHlPK1EvYjZYNEtkN241RCtSUTlQM0JwcmxQeUJHZncwZVV1WS8yS0RUOVZVUTV6K0poV0RxNHRUblAwd0l4dUg2bitnL0cvV0VudFZ4NlQ4SjZFMityRXJxUHl6YzBzbTdLdXMvL29nZlJVQVM3RDhMQzMzQWVRSHRQL1I2NWVtcCtPMC9najBNbnhUNDdqOEFBQUFBQUFEd1B3QUFBQUFBQVBBL2NWMzFudXdBOEQ5VUVwWkwyUUh3UDgvbzRnWEdBdkEvRmF2Y3piSUQ4RDltSTRTam53VHdQd29jMm9hTUJmQS9XRi9mZDNrRzhEK3h0NVIyWmdmd1A0UHYrb0pUQ1BBL1J0RVNuVUFKOEQ5L0o5M0VMUXJ3UDcrOFd2b2FDL0Evb0Z1TVBRZ004RC9Nem5LTzlRendQL1hnRHUzaURmQS8ybHhoV2RBTzhEOUhEV3ZUdlEvd1B4RzlMRnVyRVBBL0hEZW44SmdSOEQ5VlJ0dVRoaEx3UDdXMXlVUjBFL0EvUWxCekEySVU4RDhPNGRqUFR4WHdQelV6KzZrOUZ2QS80Qkhia1NzWDhEOUVTSG1IR1Jqd1A1K2gxb29IR2ZBL1ArbnptL1VaOEQ5NjZ0RzY0eHJ3UDdSd2NlZlJHL0EvWFVmVEljQWM4RC91T2ZocHJoM3dQKzhUNGIrY0h2QS84cUNPSTRzZjhEK1VyQUdWZVNEd1A0RUNPeFJvSWZBL2JXNDdvVllpOEQ4YXZBTThSU1B3UDFXM2xPUXpKUEEvOXl2dm1pSWw4RC9rNVJOZkVTYndQdzZ4QXpFQUovQS9jRm0vRU84bjhEOFRxMGYrM1Nqd1B3cHluZm5NS2ZBL2RYckJBcndxOEQrQWtMUVpxeXZ3UDJHQWR6NmFMUEEvWEJZTGNZa3Q4RCsvSG5DeGVDN3dQK1pscC85bkwvQS9Ocml4VzFjdzhEOGk0by9GUmpId1B5ZXdRajAyTXZBLzBlN0t3aVV6OEQrMGFpbFdGVFR3UDNId1h2Y0VOZkEvdDB4c3B2UTE4RDgvVEZKajVEYndQOHk3RVM3VU4vQS9NV2lyQnNRNDhEOUpIaUR0c3pud1AvNnFjT0dqT3ZBL1E5dWQ0NU03OEQ4WWZLanpnenp3UDRwYWtSRjBQZkEvc1VOWlBXUSs4RCt3QkFGM1ZEL3dQN1pxaWI1RVFQQS9BRVB6RXpWQjhEL1VXajkzSlVMd1A0Vi9idWdWUS9BL2NuNkJad1pFOEQ4SEpYbjA5a1R3UDdsQVZvL25SZkEvREo4Wk9OaEc4RCtORGNUdXlFZndQOWhaVnJPNVNQQS9rbEhSaGFwSjhEOXR3alZtbTByd1B5aDZoRlNNUy9BL2pFYStVSDFNOEQ5dTllTmFiazN3UDdGVTluSmZUdkEvUWpMMm1GQlA4RDhhWE9UTVFWRHdQeitnd1E0elVmQS93c3lPWGlSUzhEL0FyMHk4RlZQd1AySVgvQ2NIVlBBLzNOR2RvZmhVOEQ5d3JUSXA2bFh3UDJ0NHU3N2JWdkEvSlFFNVlzMVg4RDhDRnF3VHYxandQM1NGRmRPd1dmQS85eDEyb0tKYThEOFNyczU3bEZ2d1Axc0VJR1dHWFBBL2NlOXFYSGhkOEQ4QlByQmhhbDd3UDhLKzhIUmNYL0EvZWtBdGxrNWc4RC8za1diRlFHSHdQeGFDblFJell2QS92OS9TVFNWajhEL2xlUWVuRjJUd1A0a2ZQQTRLWmZBL3RaOXhnL3hsOEQrQ3lhZ0c3MmJ3UHhSczRwZmhaL0EvbWxZZk45Um84RDlQV0dEa3htbndQM3hBcHArNWF2QS9jOTd4YUt4cjhEK1ZBVVJBbjJ6d1AwMTVuU1dTYmZBL0VoWC9HSVZ1OEQ5b3BHa2FlRy93UDk3MjNTbHJjUEEvRU54Y1IxNXg4RCtsSStkeVVYTHdQMUdkZmF4RWMvQS8weGdoOURkMDhELzJaZEpKSzNYd1A1TlVrcTBlZHZBL2pMUmhIeEozOEQvUlZVR2ZCWGp3UDEwSU1pMzVlUEEvT1p3MHlleDU4RDkyNFVsejRIcndQemFvY2l2VWUvQS9vOEN2OGNkODhELzIrZ0hHdTMzd1AzRW5hcWl2ZnZBL1pSYnBtS04vOEQ4c21IK1hsNER3UHpCOUxxU0xnZkEvNHBYMnZuK0M4RC9Gc3RqbmM0UHdQMktrMVI1b2hQQS9VanZ1WTF5RjhEODZTQ08zVUlid1A4aWJkUmhGaC9BL3VRYm1oem1JOEQvV1dYVUZMb253UC9KbEpKRWlpdkEvN2Z2ektoZUw4RCswN09UU0M0endQejhKK0lnQWpmQS9reUl1VGZXTjhEL0FDWWdmNm83d1ArS1BCZ0Rmai9BL0k0YXE3dE9ROEQrNHZYVHJ5Skh3UCtBSFp2YTlrdkEvNlRWL0Q3T1Q4RDhzR2NFMnFKVHdQdzJETEd5ZGxmQS9BRVhDcjVLVzhEOS9NSU1CaUpmd1B4WVhjR0Y5bVBBL1djcUp6M0taOEQvcUc5RkxhSnJ3UDNmZFJ0WmRtL0EvdWVEcmJsT2M4RDkzOThBVlNaM3dQNFB6eHNvK252QS91NmIralRTZjhEOEo0MmhmS3FEd1AyTjZCajhnb2ZBL3pUN1lMQmFpOEQ5VkF0OG9ES1B3UHhXWEd6TUNwUEEvTmMrT1MvaWs4RC9wZkRseTdxWHdQMjV5SEtma3B2QS9FWUk0NnRxbjhEOG9mbzQ3MGFqd1B4azVINXZIcWZBL1U0WHJDTDZxOEQ5Uk5mU0V0S3Z3UDV3Yk9nK3JyUEEveUFxK3A2R3Q4RDkyMVlCT21LN3dQMUpPZ3dPUHIvQS9Ga2pHeG9XdzhEK0dsVXFZZkxId1AzUUpFWGh6c3ZBL3ZIWWFabXF6OEQ5SnNHZGlZYlR3UHcrSitXeFl0ZkEvRXRUUWhVKzI4RDlmWk82c1JyZndQeEVOVStJOXVQQS9UcUgvSlRXNThEOUk5UFIzTExyd1B6L1pNOWdqdS9BL2ZTTzlSaHU4OEQ5YnBwSERFcjN3UHpzMXNrNEt2dkEvanFNZjZBRy84RC9PeE5xUCtiL3dQNFZzNUVYeHdQQS9SMjQ5Q3VuQjhEKzBuZWJjNE1Md1Azck80TDNZdy9BL1VOUXNyZERFOEQvOWdzdXF5TVh3UDFPdXZiYkF4dkEvTGlvRTBiakg4RDk1eXAvNXNNandQeXBqa1RDcHlmQS9ROGpaZGFISzhEL1V6WG5KbWN2d1AvZEhjaXVTelBBLzFBckVtNHJOOEQrZTZtOGFnODd3UDVTN2RxZDd6L0EvQTFMWlFuVFE4RDlFZ3Bqc2JOSHdQN29ndGFSbDB2QS8xZ0V3YTE3VDhEOFcrZ2xBVjlUd1B3TGVReU5RMWZBL01vTGVGRW5XOEQ5RnU5b1VRdGZ3UCt4ZE9TTTcyUEEvM3o3N1B6VFo4RC9tTWlGckxkcndQOVVPcktRbTIvQS9pYWVjN0IvYzhEL3cwZk5DR2Qzd1B3QmpzcWNTM3ZBL3Z5L1pHZ3pmOEQ4OURXbWNCZUR3UDViUVlpei80UEEvOVU3SHl2amg4RCtOWFpkMzh1THdQNkxSMHpMczQvQS9nWUI5L09YazhEK0ZQNVhVMytYd1B4WGtHN3ZaNXZBL28wTVNzTlBuOEQrd00zbXp6ZWp3UDhhSlVjWEg2ZkEvZnh1YzVjSHE4RDkrdmxrVXZPdndQM1JJaTFHMjdQQS9INDh4bmJEdDhEOUlhRTMzcXU3d1A4V3AzMStsNy9BL2R5bnAxcC93OEQ5UHZXcGNtdkh3UDBVN1pmQ1U4dkEvQUFBQUFBQUE4RDlqZWRtU2ovUHdQOERXeDhPYTlmRS9GYmN4Q3Y0Rzh6K0xjbzM1b2lqMFAxN3M4QWlCVy9VL3pUdC9acDZnOWord3oyalhFUG4zUHp4dVBhWCtaZmsvcmROYW1aL28rajhwd1U0SFBvTDhQME1URU9jM05QNC9BQUFBQUFBQUFFQmplZG1Tai9NQVFNRFd4OE9hOVFGQUZiY3hDdjRHQTBDTGNvMzVvaWdFUUY3czhBaUJXd1ZBelR0L1pwNmdCa0N3ejJqWEVQa0hRRDF1UGFYK1pRbEFyZE5hbVovb0NrQXB3VTRIUG9JTVFFUVRFT2MzTkE1QUFBQUFBQUFBRUVCamVkbVNqL01RUUwvV3g4T2E5UkZBRmJjeEN2NEdFMENMY28zNW9pZ1VRRjNzOEFpQld4VkF6VHQvWnA2Z0ZrQ3h6MmpYRVBrWFFEeHVQYVgrWlJsQXJkTmFtWi9vR2tBcXdVNEhQb0ljUUVNVEVPYzNOQjVBQUFBQUFBQUFJRUJqZWRtU2ovTWdRTC9XeDhPYTlTRkFGYmN4Q3Y0R0kwQ0xjbzM1b2lna1FGM3M4QWlCV3lWQXpUdC9acDZnSmtDeHoyalhFUGtuUUR4dVBhWCtaU2xBcmROYW1aL29La0Fxd1U0SFBvSXNRRU1URU9jM05DNUFBQUFBQUFBQU1FQmllZG1Tai9Nd1FNSFd4OE9hOVRGQUZiY3hDdjRHTTBDS2NvMzVvaWcwUUYvczhBaUJXelZBelR0L1pwNmdOa0N2ejJqWEVQazNRRDV1UGFYK1pUbEFyZE5hbVovb09rQW93VTRIUG9JOFFFVVRFT2MzTkQ1QUFBQUFBQUFBUUVCaWVkbVNqL05BUU1IV3g4T2E5VUZBRmJjeEN2NEdRMENLY28zNW9paEVRRi9zOEFpQlcwVkF6VHQvWnA2Z1JrQ3Z6MmpYRVBsSFFENXVQYVgrWlVsQXJkTmFtWi9vU2tBb3dVNEhQb0pNUUVVVEVPYzNORTVBQUFBQUFBQUFVRUJpZWRtU2ovTlFRTUhXeDhPYTlWRkFGYmN4Q3Y0R1UwQ0tjbzM1b2loVVFGL3M4QWlCVzFWQXpUdC9acDZnVmtDdnoyalhFUGxYUUQ1dVBhWCtaVmxBcmROYW1aL29Xa0Fvd1U0SFBvSmNRRVVURU9jM05GNUFBQUFBQUFBQVlFQmllZG1Tai9OZ1FNSFd4OE9hOVdGQUZiY3hDdjRHWTBDS2NvMzVvaWhrUUYvczhBaUJXMlZBelR0L1pwNmdaa0N2ejJqWEVQbG5RRDV1UGFYK1pXbEFyZE5hbVovb2FrQW93VTRIUG9Kc1FFVVRFT2MzTkc1QUFBQUFBQUFBY0VCbGVkbVNqL053UUw3V3g4T2E5WEZBRmJjeEN2NEdjMENOY28zNW9paDBRRnpzOEFpQlczVkF6VHQvWnA2Z2RrQ3p6MmpYRVBsM1FEcHVQYVgrWlhsQXJkTmFtWi9vZWtBdHdVNEhQb0o4UUVBVEVPYzNOSDVBQUFBQUFBQUFnRUJsZWRtU2ovT0FRTDdXeDhPYTlZRkFGYmN4Q3Y0R2cwQ05jbzM1b2lpRVFGenM4QWlCVzRWQXpUdC9acDZnaGtDenoyalhFUG1IUURwdVBhWCtaWWxBcmROYW1aL29pa0F0d1U0SFBvS01RRUFURU9jM05JNUFBQUFBQUFBQWtFQmxlZG1Tai9PUVFMN1d4OE9hOVpGQUZiY3hDdjRHazBDTmNvMzVvaWlVUUZ6czhBaUJXNVZBelR0L1pwNmdsa0N6ejJqWEVQbVhRQU1BQUFBRUFBQUFCQUFBQUFZQUFBQ0QrYUlBUkU1dUFQd3BGUURSVnljQTNUVDFBR0xid0FBOG1aVUFRWkJEQUdOUi9nQzczcXNBdDJIRkFEcHVKQURTVFVJQVNRYmdBQW5xTGdBY2t0RUE2eDMrQUNteEhBRG9QcWNBOVRXQ0FFUzdMZ0NjNllRQXRDWndBRUYrWHdEV2tUa0FVNE01QUp6ME9RQ0xYNFFBS1BtOUFQZ2ZPd0RlLzVjQUQ1Z0ZBQkV2N3dBS1dvc0FiUjl0QU05K05nQUp5eWNBUmsrM0FKNW1Qd0F0Nmw4QXVpZDFBT1hyeHdBOWUvRUE5emtIQUpKU2lnRDdhK29BSDdGZkFBaGRqUUF3QTFZQWUveEdBUENyYXdBZ3ZNOEFOdlNhQU9PcEhRQmVZWkVBQ0J2bUFJV1paUUNnRkY4QWpVQm9BSURZL3dBbmMwMEFCZ1l4QU1wV0ZRREpxSE1BZStKZ0FHdU13QUFaeEVjQXpXZkRBQW5vM0FCWmd5b0FpM2JFQUtZY2xnQkVyOTBBR1ZmUkFLVStCUUFGQi84QU0zNC9BTUl5NkFDWVQ5NEF1MzB5QUNZOXd3QWVhKzhBbi9oZUFEVWZPZ0IvOHNvQThZY2RBSHlRSVFCcUpId0ExVzc2QURBdGR3QVZPME1BdFJUR0FNTVpuUUN0eE1JQUxFMUJBQXdBWFFDR2ZVWUE0M0V0QUp2R21nQXpZZ0FBdE5KOEFMU25sd0EzVmRVQTF6NzJBS01RR0FCTmR2d0FaSjBxQUhEWHF3QmpmUGdBZXJCWEFCY1Y1d0RBU1ZZQU85YlpBS2VFT0FBa0k4c0Exb3AzQUZwVUl3QUFIN2tBOFFvYkFCbk8zd0NmTWY4QVpoNXFBSmxYWVFDcyswY0Fmbi9ZQUNKbHR3QXk2SWtBNXI5Z0FPL0V6UUJzTmdrQVhUL1VBQmJlMXdCWU85NEEzcHVTQU5JaUtBQW9odWdBNGxoTkFNYktNZ0FJNHhZQTRIM0xBQmZBVUFEekhhY0FHT0JiQUM0VE5BQ0RFbUlBZzBnQkFQV09Xd0N0c0g4QUh1bnlBRWhLUXdBUVo5TUFxdDNZQUs1ZlFnQnFZYzRBQ2lpa0FOT1p0QUFHcHZJQVhIZC9BS1BDZ3dCaFBJZ0Fpbk40QUsrTVdnQnYxNzBBTGFaakFQUy95d0NOZ2U4QUpzRm5BRlhLUlFESzJUWUFLS2pTQU1KaGpRQVN5WGNBQkNZVUFCSkdtd0RFV2NRQXlNVkVBRTJ5a1FBQUYvTUExRU90QUNsSjVRRDkxUkFBQUw3OEFCNlV6QUJ3enU0QUV6NzFBT3p4Z0FDejU4TUF4L2dvQUpNRmxBREJjVDRBTGdtekFBdEY4d0NJRXB3QXF5QjdBQzYxbndCSGtzSUFlekl2QUF4VmJRQnlwNUFBYStjZkFESExsZ0I1RmtvQVFYbmlBUFRmaVFEb2xKY0E0dWFFQUpreGx3Q0k3V3NBWDE4MkFMdjlEZ0JJbXJRQVo2UnNBSEZ5UWdDTlhUSUFueFc0QUx6bENRQ05NU1VBOTNRNUFEQUZIQUFOREFFQVN3aG9BQ3p1V0FCSHFwQUFkT2NDQUwzV0pBRDNmYVlBYmtoeUFKOFc3d0NPbEtZQXRKSDJBTkZUVVFEUEN2SUFJSmd6QVBWTGZnQ3lZMmdBM1Q1ZkFFQmRBd0NGaVg4QVZWSXBBRGRrd0FCdDJCQUFNa2d5QUZ0TWRRQk9jZFFBUlZSdUFBc0p3UUFxOVdrQUZHYlZBQ2NIblFCZEJGQUF0RHZiQU9wMnhRQ0grUmNBU1d0OUFCMG51Z0NXYVNrQXhzeXNBSzBVVkFDUTRtb0FpTm1KQUN4eVVBQUVwTDRBZHdlVUFQTXdjQUFBL0NjQTZuR29BR2JDU1FCazREMEFsOTJEQUtNL2x3QkRsUDBBRFlhTUFERkIzZ0NTT1owQTNYQ01BQmUzNXdBSTN6c0FGVGNyQUZ5QW9BQmFnSk1BRUJHU0FBL28yQUJzZ0s4QTIvOUxBRGlRRHdCWkdIWUFZcVVWQUdITHV3REhpYmtBRUVDOUFOTHlCQUJKZFNjQTY3YjJBTnNpdXdBS0ZLb0FpU1l2QUdTRGRnQUpPek1BRHBRYUFGRTZxZ0FkbzhJQXIrMnVBRndtRWdCdHdrMEFMWHFjQU1CV2x3QURQNE1BQ2ZEMkFDdEFqQUJ0TVprQU9iUUhBQXdnRlFEWXcxc0E5WkxFQU1hdFN3Qk95cVVBcHpmTkFPYXBOZ0Nya3BRQTNVSm9BQmxqM2dCMmpPOEFhSXRTQVB6Yk53Q3VvYXNBM3hVeEFBQ3VvUUFNKzlvQVpFMW1BTzBGdHdBcFpUQUFWMWEvQUVmL09nQnErYmtBZGI3ekFDaVQzd0NyZ0RBQVpvejJBQVRMRlFENklnWUEyZVFkQUQyenBBQlhHNDhBTnMwSkFFNUM2UUFUdnFRQU15TzFBUENxR2dCUFphZ0Ewc0dsQUFzL0R3QmJlTTBBSS9sMkFIdUxCQUNKRjNJQXhxWlRBRzl1NGdEdjZ3QUFtMHBZQU1UYXR3Q3Facm9BZHMvUEFORUNIUUN4OFMwQWpKbkJBTU90ZHdDR1NOb0E5MTJnQU1hQTlBQ3M4QzhBM2V5YUFEOWN2QURRM20wQWtNY2ZBQ3JidGdDakpUb0FBSythQUsxVGt3QzJWd1FBS1MyMEFFdUFmZ0RhQjZjQWRxb09BSHRab1FBV0Vpb0EzTGN0QVBybC9RQ0oyLzRBaWI3OUFPUjJiQUFHcWZ3QVBvQndBSVZ1RlFEOWgvOEFLRDRIQUdGbk13QXFHSVlBVGIzcUFMUG5yd0NQYlc0QWxXYzVBREcvV3dDRTEwZ0FNTjhXQU1jdFF3QWxZVFVBeVhET0FEREx1QUMvYlAwQXBBQ2lBQVZzNUFCYTNhQUFJVzlIQUdJUzBnQzVYSVFBY0dGSkFHdFc0QUNaVWdFQVVGVTNBQjdWdHdBejhjUUFFMjVmQUYwdzVBQ0ZMcWtBSGJMREFLRXlOZ0FJdDZRQTZySFVBQmIzSVFDUGFlUUFKLzkzQUF3RGdBQ05RQzBBVDgyZ0FDQ2xtUUN6b3RNQUwxMEtBTFQ1UWdBUjJzc0FmYjdRQUp2YndRQ3JGNzBBeXFLQkFBaHFYQUF1VlJjQUp3QlZBSDhVOEFEaEI0WUFGQXRrQUpaQmpRQ0h2dDRBMnYwcUFHc2x0Z0I3aVRRQUJmUCtBTG0vbmdCb2FrOEFTaXFvQUUvRVdnQXQrTHdBMTFxWUFQVEhsUUFOVFkwQUlEcW1BS1JYWHdBVVA3RUFnRGlWQU13Z0FRQngzWVlBeWQ2MkFMOWc5UUJOWlJFQUFRZHJBSXl3ckFDeXdOQUFVVlZJQUI3N0RnQ1Zjc01Bb3dZN0FNQkFOUUFHM0hzQTRFWE1BRTRwK2dEV3lzZ0E2UE5CQUh4azNnQ2JaTmdBMmI0eEFLU1h3d0IzV05RQWFlUEZBUERhRXdDNk9qd0FSaGhHQUZWMVh3RFN2ZlVBYnBMR0FLd3VYUUFPUk8wQUhENUNBR0hFaHdBcC9la0E1OWJ6QUNKOHlnQnZrVFVBQ09ERkFQL1hqUUJ1YXVJQXNQM0dBSk1Jd1FCOFhYUUFhNjJ5QU0xdW5RQStjbnNBeGhGcUFQZlBxUUFwYzk4QXRjbTZBTGNBVVFEaXNnMEFkTG9rQU9WOVlBQjAySW9BRFJVc0FJRVlEQUIrWnBRQUFTa1dBSjk2ZGdEOS9iNEFWa1h2QU5sK05nRHMyUk1BaTdxNUFNU1gvQUF4cUNjQThXN0RBSlRGTmdEWXFGWUF0S2kxQU0vTURnQVNpUzBBYjFjMEFDeFdpUUNaenVNQTFpQzVBR3RlcWdBK0twd0FFVi9NQVAwTFNnRGg5UHNBamp0dEFPS0dMQURwMUlRQS9MU3BBTy91MFFBdU5ja0FMemxoQURnaFJBQWIyY2dBZ2Z3S0FQdEthZ0F2SE5nQVU3U0VBRTZaakFCVUlzd0FLbFhjQU1ERzFnQUxHWllBR25DNEFHbVZaQUFtV21BQVAxTHVBSDhSRHdEMHRSRUEvTXYxQURTOExRQTB2TzRBNkYzTUFOMWVZQUJuanBzQWtqUHZBTWtYdUFCaFdKc0E0VmU4QUZHRHhnRFlQaEFBM1hGSUFDMGMzUUN2R0tFQUlTeEdBRm56MXdEWmVwZ0FubFRBQUUrRytnQldCdndBNVhtdUFJa2lOZ0E0clNJQVo1UGNBRlhvcWdDQ0pqZ0F5dWViQUZFTnBBQ1pNN0VBcWRjT0FHa0ZTQUJsc3ZBQWY0aW5BSWhNbHdENTBUWUFJWkt6QUh1Q1NnQ1l6eUVBUUovY0FOeEhWUURoZERvQVordENBUDZkM3dCZTFGOEFlMmVrQUxxc2VnQlY5cUlBSzRnakFFRzZWUUJaYmdnQUlTcUdBRGxIZ3dDSjQrWUE1WjdVQUVuN1FBRC9WdWtBSEEvS0FNVlppZ0NVK2lzQTA4SEZBQS9GendEYldxNEFSOFdHQUlWRFlnQWhoanNBTEhtVUFCQmhod0FxVEhzQWdDd2FBRU8vRWdDSUpwQUFlRHlKQUtqRTVBRGwyM3NBeERyQ0FDYjA2Z0QzWjRvQURaSy9BR1dqS3dBOWs3RUF2WHdMQUtSUjNBQW4zV01BYWVIZEFKcVVHUUNvS1pVQWFNNG9BQW50dEFCRW55QUFUcGpLQUhDQ1l3QitmQ01BRDdreUFLZjFqZ0FVVnVjQUlmRUlBTFdkS2dCdmZrMEFwUmxSQUxYNXF3Q0MzOVlBbHQxaEFCWTJBZ0RFT3A4QWc2S2hBSEx0YlFBNWpYb0FncmlwQUdzeVhBQkdKMXNBQURUdEFOSUFkd0Q4OUZVQUFWbE5BT0J4Z0FBQUFBQUFBQUFBQUFBQUFFRDdJZmsvQUFBQUFDMUVkRDRBQUFDQW1FYjRQQUFBQUdCUnpIZzdBQUFBZ0lNYjhEa0FBQUJBSUNWNk9BQUFBSUFpZ3VNMkFBQUFBQjN6YVRVQVFiQzhCQXNNVUFBQkFBQUFBQURBSlFFQSIsdUEoXyl8fChfPWVJKF8pKTtmdW5jdGlvbiBtQShBKXtpZihBPT1fJiZyQSlyZXR1cm4gbmV3IFVpbnQ4QXJyYXkockEpO3ZhciBJPXdJKEEpO2lmKEkpcmV0dXJuIEk7aWYoUUEpcmV0dXJuIFFBKEEpO3Rocm93InN5bmMgZmV0Y2hpbmcgb2YgdGhlIHdhc20gZmFpbGVkOiB5b3UgY2FuIHByZWxvYWQgaXQgdG8gTW9kdWxlWyd3YXNtQmluYXJ5J10gbWFudWFsbHksIG9yIGVtY2MucHkgd2lsbCBkbyB0aGF0IGZvciB5b3Ugd2hlbiBnZW5lcmF0aW5nIEhUTUwgKGJ1dCBub3QgSlMpIn1mdW5jdGlvbiBIZyhBKXtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKT0+bUEoQSkpfWZ1bmN0aW9uIEdJKEEsSSl7dmFyIGcsQj1tQShBKTtnPW5ldyBXZWJBc3NlbWJseS5Nb2R1bGUoQik7dmFyIEU9bmV3IFdlYkFzc2VtYmx5Lkluc3RhbmNlKGcsSSk7cmV0dXJuW0UsZ119ZnVuY3Rpb24gVUkoKXt2YXIgQT17ZW52OlZBLHdhc2lfc25hcHNob3RfcHJldmlldzE6VkF9O2Z1bmN0aW9uIEkoQixFKXtyZXR1cm4gcD1CLmV4cG9ydHMsSUE9cC5tZW1vcnksdyhJQSwibWVtb3J5IG5vdCBmb3VuZCBpbiB3YXNtIGV4cG9ydHMiKSxOQSgpLGNJKHAuX193YXNtX2NhbGxfY3RvcnMpLGlBKCJ3YXNtLWluc3RhbnRpYXRlIikscH1pZihuQSgid2FzbS1pbnN0YW50aWF0ZSIpLG8uaW5zdGFudGlhdGVXYXNtKXRyeXtyZXR1cm4gby5pbnN0YW50aWF0ZVdhc20oQSxJKX1jYXRjaChCKXtOKGBNb2R1bGUuaW5zdGFudGlhdGVXYXNtIGNhbGxiYWNrIGZhaWxlZCB3aXRoIGVycm9yOiAke0J9YCksRyhCKX12YXIgZz1HSShfLEEpO3JldHVybiBJKGdbMF0pfXZhciBzLGY7ZnVuY3Rpb24gVChBLEksZz0hMCl7T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvLEEpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkobyxBLHtjb25maWd1cmFibGU6ITAsZ2V0KCl7bGV0IEI9Zz8iICh0aGUgaW5pdGlhbCB2YWx1ZSBjYW4gYmUgcHJvdmlkZWQgb24gTW9kdWxlLCBidXQgYWZ0ZXIgc3RhcnR1cCB0aGUgdmFsdWUgaXMgb25seSBsb29rZWQgZm9yIG9uIGEgbG9jYWwgdmFyaWFibGUgb2YgdGhhdCBuYW1lKSI6IiI7SyhgXGBNb2R1bGUuJHtBfVxgIGhhcyBiZWVuIHJlcGxhY2VkIGJ5IFxgJHtJfVxgYCtCKX19KX1mdW5jdGlvbiBNSShBKXtPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG8sQSkmJksoYFxgTW9kdWxlLiR7QX1cYCB3YXMgc3VwcGxpZWQgYnV0IFxgJHtBfVxgIG5vdCBpbmNsdWRlZCBpbiBJTkNPTUlOR19NT0RVTEVfSlNfQVBJYCl9ZnVuY3Rpb24gYkEoQSl7cmV0dXJuIEE9PT0iRlNfY3JlYXRlUGF0aCJ8fEE9PT0iRlNfY3JlYXRlRGF0YUZpbGUifHxBPT09IkZTX2NyZWF0ZVByZWxvYWRlZEZpbGUifHxBPT09IkZTX3VubGluayJ8fEE9PT0iYWRkUnVuRGVwZW5kZW5jeSJ8fEE9PT0iRlNfY3JlYXRlTGF6eUZpbGUifHxBPT09IkZTX2NyZWF0ZURldmljZSJ8fEE9PT0icmVtb3ZlUnVuRGVwZW5kZW5jeSJ9ZnVuY3Rpb24gcEEoQSxJKXt0eXBlb2YgZ2xvYmFsVGhpczwidSImJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShnbG9iYWxUaGlzLEEse2NvbmZpZ3VyYWJsZTohMCxnZXQoKXtiKCJgIitBKyJgIGlzIG5vdCBsb25nZXIgZGVmaW5lZCBieSBlbXNjcmlwdGVuLiAiK0kpfX0pfXBBKCJidWZmZXIiLCJQbGVhc2UgdXNlIEhFQVA4LmJ1ZmZlciBvciB3YXNtTWVtb3J5LmJ1ZmZlciIpLHBBKCJhc20iLCJQbGVhc2UgdXNlIHdhc21FeHBvcnRzIGluc3RlYWQiKTtmdW5jdGlvbiBZSShBKXt0eXBlb2YgZ2xvYmFsVGhpczwidSImJiFPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGdsb2JhbFRoaXMsQSkmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShnbG9iYWxUaGlzLEEse2NvbmZpZ3VyYWJsZTohMCxnZXQoKXt2YXIgST0iYCIrQSsiYCBpcyBhIGxpYnJhcnkgc3ltYm9sIGFuZCBub3QgaW5jbHVkZWQgYnkgZGVmYXVsdDsgYWRkIGl0IHRvIHlvdXIgbGlicmFyeS5qcyBfX2RlcHMgb3IgdG8gREVGQVVMVF9MSUJSQVJZX0ZVTkNTX1RPX0lOQ0xVREUgb24gdGhlIGNvbW1hbmQgbGluZSIsZz1BO2cuc3RhcnRzV2l0aCgiXyIpfHwoZz0iJCIrQSksSSs9IiAoZS5nLiAtc0RFRkFVTFRfTElCUkFSWV9GVU5DU19UT19JTkNMVURFPSciK2crIicpIixiQShBKSYmKEkrPSIuIEFsdGVybmF0aXZlbHksIGZvcmNpbmcgZmlsZXN5c3RlbSBzdXBwb3J0ICgtc0ZPUkNFX0ZJTEVTWVNURU0pIGNhbiBleHBvcnQgdGhpcyBmb3IgeW91IiksYihJKX19KSx2QShBKX1mdW5jdGlvbiB2QShBKXtPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG8sQSl8fE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLEEse2NvbmZpZ3VyYWJsZTohMCxnZXQoKXt2YXIgST0iJyIrQSsiJyB3YXMgbm90IGV4cG9ydGVkLiBhZGQgaXQgdG8gRVhQT1JURURfUlVOVElNRV9NRVRIT0RTIChzZWUgdGhlIEVtc2NyaXB0ZW4gRkFRKSI7YkEoQSkmJihJKz0iLiBBbHRlcm5hdGl2ZWx5LCBmb3JjaW5nIGZpbGVzeXN0ZW0gc3VwcG9ydCAoLXNGT1JDRV9GSUxFU1lTVEVNKSBjYW4gZXhwb3J0IHRoaXMgZm9yIHlvdSIpLEsoSSl9fSl9ZnVuY3Rpb24gS2coQSl7Y29uc29sZS53YXJuLmFwcGx5KGNvbnNvbGUsYXJndW1lbnRzKX1mdW5jdGlvbiBISShBKXt0aGlzLm5hbWU9IkV4aXRTdGF0dXMiLHRoaXMubWVzc2FnZT1gUHJvZ3JhbSB0ZXJtaW5hdGVkIHdpdGggZXhpdCgke0F9KWAsdGhpcy5zdGF0dXM9QX12YXIgY0E9QT0+e2Zvcig7QS5sZW5ndGg+MDspQS5zaGlmdCgpKG8pfTtmdW5jdGlvbiBkZyhBLEk9Imk4Iil7c3dpdGNoKEkuZW5kc1dpdGgoIioiKSYmKEk9IioiKSxJKXtjYXNlImkxIjpyZXR1cm4gTFtBPj4wXTtjYXNlImk4IjpyZXR1cm4gTFtBPj4wXTtjYXNlImkxNiI6cmV0dXJuIFZbQT4+MV07Y2FzZSJpMzIiOnJldHVybiBuW0E+PjJdO2Nhc2UiaTY0IjpLKCJ0byBkbyBnZXRWYWx1ZShpNjQpIHVzZSBXQVNNX0JJR0lOVCIpO2Nhc2UiZmxvYXQiOnJldHVybiB0QVtBPj4yXTtjYXNlImRvdWJsZSI6cmV0dXJuIEZBW0E+PjNdO2Nhc2UiKiI6cmV0dXJuIGtbQT4+Ml07ZGVmYXVsdDpLKGBpbnZhbGlkIHR5cGUgZm9yIGdldFZhbHVlOiAke0l9YCl9fXZhciBrZz1vLm5vRXhpdFJ1bnRpbWV8fCEwLENBPUE9Pih3KHR5cGVvZiBBPT0ibnVtYmVyIiksQT4+Pj0wLCIweCIrQS50b1N0cmluZygxNikucGFkU3RhcnQoOCwiMCIpKTtmdW5jdGlvbiBOZyhBLEksZz0iaTgiKXtzd2l0Y2goZy5lbmRzV2l0aCgiKiIpJiYoZz0iKiIpLGcpe2Nhc2UiaTEiOkxbQT4+MF09STticmVhaztjYXNlImk4IjpMW0E+PjBdPUk7YnJlYWs7Y2FzZSJpMTYiOlZbQT4+MV09STticmVhaztjYXNlImkzMiI6bltBPj4yXT1JO2JyZWFrO2Nhc2UiaTY0IjpLKCJ0byBkbyBzZXRWYWx1ZShpNjQpIHVzZSBXQVNNX0JJR0lOVCIpO2Nhc2UiZmxvYXQiOnRBW0E+PjJdPUk7YnJlYWs7Y2FzZSJkb3VibGUiOkZBW0E+PjNdPUk7YnJlYWs7Y2FzZSIqIjprW0E+PjJdPUk7YnJlYWs7ZGVmYXVsdDpLKGBpbnZhbGlkIHR5cGUgZm9yIHNldFZhbHVlOiAke2d9YCl9fXZhciBiPUE9PntiLnNob3dufHwoYi5zaG93bj17fSksYi5zaG93bltBXXx8KGIuc2hvd25bQV09MSxOKEEpKX0sS0k9QT0+KG5bQWcoKT4+Ml09QSxBKSxVPXtpc0FiczpBPT5BLmNoYXJBdCgwKT09PSIvIixzcGxpdFBhdGg6QT0+e3ZhciBJPS9eKFwvP3wpKFtcc1xTXSo/KSgoPzpcLnsxLDJ9fFteXC9dKz98KShcLlteLlwvXSp8KSkoPzpbXC9dKikkLztyZXR1cm4gSS5leGVjKEEpLnNsaWNlKDEpfSxub3JtYWxpemVBcnJheTooQSxJKT0+e2Zvcih2YXIgZz0wLEI9QS5sZW5ndGgtMTtCPj0wO0ItLSl7dmFyIEU9QVtCXTtFPT09Ii4iP0Euc3BsaWNlKEIsMSk6RT09PSIuLiI/KEEuc3BsaWNlKEIsMSksZysrKTpnJiYoQS5zcGxpY2UoQiwxKSxnLS0pfWlmKEkpZm9yKDtnO2ctLSlBLnVuc2hpZnQoIi4uIik7cmV0dXJuIEF9LG5vcm1hbGl6ZTpBPT57dmFyIEk9VS5pc0FicyhBKSxnPUEuc3Vic3RyKC0xKT09PSIvIjtyZXR1cm4gQT1VLm5vcm1hbGl6ZUFycmF5KEEuc3BsaXQoIi8iKS5maWx0ZXIoQj0+ISFCKSwhSSkuam9pbigiLyIpLCFBJiYhSSYmKEE9Ii4iKSxBJiZnJiYoQSs9Ii8iKSwoST8iLyI6IiIpK0F9LGRpcm5hbWU6QT0+e3ZhciBJPVUuc3BsaXRQYXRoKEEpLGc9SVswXSxCPUlbMV07cmV0dXJuIWcmJiFCPyIuIjooQiYmKEI9Qi5zdWJzdHIoMCxCLmxlbmd0aC0xKSksZytCKX0sYmFzZW5hbWU6QT0+e2lmKEE9PT0iLyIpcmV0dXJuIi8iO0E9VS5ub3JtYWxpemUoQSksQT1BLnJlcGxhY2UoL1wvJC8sIiIpO3ZhciBJPUEubGFzdEluZGV4T2YoIi8iKTtyZXR1cm4gST09PS0xP0E6QS5zdWJzdHIoSSsxKX0sam9pbjpmdW5jdGlvbigpe3ZhciBBPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7cmV0dXJuIFUubm9ybWFsaXplKEEuam9pbigiLyIpKX0sam9pbjI6KEEsSSk9PlUubm9ybWFsaXplKEErIi8iK0kpfSxkST0oKT0+e2lmKHR5cGVvZiBjcnlwdG89PSJvYmplY3QiJiZ0eXBlb2YgY3J5cHRvLmdldFJhbmRvbVZhbHVlcz09ImZ1bmN0aW9uIilyZXR1cm4gQT0+Y3J5cHRvLmdldFJhbmRvbVZhbHVlcyhBKTtLKCJubyBjcnlwdG9ncmFwaGljIHN1cHBvcnQgZm91bmQgZm9yIHJhbmRvbURldmljZS4gY29uc2lkZXIgcG9seWZpbGxpbmcgaXQgaWYgeW91IHdhbnQgdG8gdXNlIHNvbWV0aGluZyBpbnNlY3VyZSBsaWtlIE1hdGgucmFuZG9tKCksIGUuZy4gcHV0IHRoaXMgaW4gYSAtLXByZS1qczogdmFyIGNyeXB0byA9IHsgZ2V0UmFuZG9tVmFsdWVzOiAoYXJyYXkpID0+IHsgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykgYXJyYXlbaV0gPSAoTWF0aC5yYW5kb20oKSoyNTYpfDAgfSB9OyIpfSxUQT1BPT4oVEE9ZEkoKSkoQSksUD17cmVzb2x2ZTpmdW5jdGlvbigpe2Zvcih2YXIgQT0iIixJPSExLGc9YXJndW1lbnRzLmxlbmd0aC0xO2c+PS0xJiYhSTtnLS0pe3ZhciBCPWc+PTA/YXJndW1lbnRzW2ddOkMuY3dkKCk7aWYodHlwZW9mIEIhPSJzdHJpbmciKXRocm93IG5ldyBUeXBlRXJyb3IoIkFyZ3VtZW50cyB0byBwYXRoLnJlc29sdmUgbXVzdCBiZSBzdHJpbmdzIik7aWYoIUIpcmV0dXJuIiI7QT1CKyIvIitBLEk9VS5pc0FicyhCKX1yZXR1cm4gQT1VLm5vcm1hbGl6ZUFycmF5KEEuc3BsaXQoIi8iKS5maWx0ZXIoRT0+ISFFKSwhSSkuam9pbigiLyIpLChJPyIvIjoiIikrQXx8Ii4ifSxyZWxhdGl2ZTooQSxJKT0+e0E9UC5yZXNvbHZlKEEpLnN1YnN0cigxKSxJPVAucmVzb2x2ZShJKS5zdWJzdHIoMSk7ZnVuY3Rpb24gZyhGKXtmb3IodmFyIGE9MDthPEYubGVuZ3RoJiZGW2FdPT09IiI7YSsrKTtmb3IodmFyIE09Ri5sZW5ndGgtMTtNPj0wJiZGW01dPT09IiI7TS0tKTtyZXR1cm4gYT5NP1tdOkYuc2xpY2UoYSxNLWErMSl9Zm9yKHZhciBCPWcoQS5zcGxpdCgiLyIpKSxFPWcoSS5zcGxpdCgiLyIpKSxRPU1hdGgubWluKEIubGVuZ3RoLEUubGVuZ3RoKSxoPVEsaT0wO2k8UTtpKyspaWYoQltpXSE9PUVbaV0pe2g9aTticmVha31mb3IodmFyIGU9W10saT1oO2k8Qi5sZW5ndGg7aSsrKWUucHVzaCgiLi4iKTtyZXR1cm4gZT1lLmNvbmNhdChFLnNsaWNlKGgpKSxlLmpvaW4oIi8iKX19LFBBPXR5cGVvZiBUZXh0RGVjb2RlcjwidSI/bmV3IFRleHREZWNvZGVyKCJ1dGY4Iik6dm9pZCAwLHo9KEEsSSxnKT0+e2Zvcih2YXIgQj1JK2csRT1JO0FbRV0mJiEoRT49Qik7KSsrRTtpZihFLUk+MTYmJkEuYnVmZmVyJiZQQSlyZXR1cm4gUEEuZGVjb2RlKEEuc3ViYXJyYXkoSSxFKSk7Zm9yKHZhciBRPSIiO0k8RTspe3ZhciBoPUFbSSsrXTtpZighKGgmMTI4KSl7USs9U3RyaW5nLmZyb21DaGFyQ29kZShoKTtjb250aW51ZX12YXIgaT1BW0krK10mNjM7aWYoKGgmMjI0KT09MTkyKXtRKz1TdHJpbmcuZnJvbUNoYXJDb2RlKChoJjMxKTw8NnxpKTtjb250aW51ZX12YXIgZT1BW0krK10mNjM7aWYoKGgmMjQwKT09MjI0P2g9KGgmMTUpPDwxMnxpPDw2fGU6KChoJjI0OCkhPTI0MCYmYigiSW52YWxpZCBVVEYtOCBsZWFkaW5nIGJ5dGUgIitDQShoKSsiIGVuY291bnRlcmVkIHdoZW4gZGVzZXJpYWxpemluZyBhIFVURi04IHN0cmluZyBpbiB3YXNtIG1lbW9yeSB0byBhIEpTIHN0cmluZyEiKSxoPShoJjcpPDwxOHxpPDwxMnxlPDw2fEFbSSsrXSY2MyksaDw2NTUzNilRKz1TdHJpbmcuZnJvbUNoYXJDb2RlKGgpO2Vsc2V7dmFyIEY9aC02NTUzNjtRKz1TdHJpbmcuZnJvbUNoYXJDb2RlKDU1Mjk2fEY+PjEwLDU2MzIwfEYmMTAyMyl9fXJldHVybiBRfSx5QT1bXSxxQT1BPT57Zm9yKHZhciBJPTAsZz0wO2c8QS5sZW5ndGg7KytnKXt2YXIgQj1BLmNoYXJDb2RlQXQoZyk7Qjw9MTI3P0krKzpCPD0yMDQ3P0krPTI6Qj49NTUyOTYmJkI8PTU3MzQzPyhJKz00LCsrZyk6SSs9M31yZXR1cm4gSX0seEE9KEEsSSxnLEIpPT57aWYodyh0eXBlb2YgQT09InN0cmluZyIpLCEoQj4wKSlyZXR1cm4gMDtmb3IodmFyIEU9ZyxRPWcrQi0xLGg9MDtoPEEubGVuZ3RoOysraCl7dmFyIGk9QS5jaGFyQ29kZUF0KGgpO2lmKGk+PTU1Mjk2JiZpPD01NzM0Myl7dmFyIGU9QS5jaGFyQ29kZUF0KCsraCk7aT02NTUzNisoKGkmMTAyMyk8PDEwKXxlJjEwMjN9aWYoaTw9MTI3KXtpZihnPj1RKWJyZWFrO0lbZysrXT1pfWVsc2UgaWYoaTw9MjA0Nyl7aWYoZysxPj1RKWJyZWFrO0lbZysrXT0xOTJ8aT4+NixJW2crK109MTI4fGkmNjN9ZWxzZSBpZihpPD02NTUzNSl7aWYoZysyPj1RKWJyZWFrO0lbZysrXT0yMjR8aT4+MTIsSVtnKytdPTEyOHxpPj42JjYzLElbZysrXT0xMjh8aSY2M31lbHNle2lmKGcrMz49USlicmVhaztpPjExMTQxMTEmJmIoIkludmFsaWQgVW5pY29kZSBjb2RlIHBvaW50ICIrQ0EoaSkrIiBlbmNvdW50ZXJlZCB3aGVuIHNlcmlhbGl6aW5nIGEgSlMgc3RyaW5nIHRvIGEgVVRGLTggc3RyaW5nIGluIHdhc20gbWVtb3J5ISAoVmFsaWQgdW5pY29kZSBjb2RlIHBvaW50cyBzaG91bGQgYmUgaW4gcmFuZ2UgMC0weDEwRkZGRikuIiksSVtnKytdPTI0MHxpPj4xOCxJW2crK109MTI4fGk+PjEyJjYzLElbZysrXT0xMjh8aT4+NiY2MyxJW2crK109MTI4fGkmNjN9fXJldHVybiBJW2ddPTAsZy1FfTtmdW5jdGlvbiBHQShBLEksZyl7dmFyIEI9Zz4wP2c6cUEoQSkrMSxFPW5ldyBBcnJheShCKSxRPXhBKEEsRSwwLEUubGVuZ3RoKTtyZXR1cm4gSSYmKEUubGVuZ3RoPVEpLEV9dmFyIGtJPSgpPT57aWYoIXlBLmxlbmd0aCl7dmFyIEE9bnVsbDtpZih0eXBlb2Ygd2luZG93PCJ1IiYmdHlwZW9mIHdpbmRvdy5wcm9tcHQ9PSJmdW5jdGlvbiI/KEE9d2luZG93LnByb21wdCgiSW5wdXQ6ICIpLEEhPT1udWxsJiYoQSs9YApgKSk6dHlwZW9mIHJlYWRsaW5lPT0iZnVuY3Rpb24iJiYoQT1yZWFkbGluZSgpLEEhPT1udWxsJiYoQSs9YApgKSksIUEpcmV0dXJuIG51bGw7eUE9R0EoQSwhMCl9cmV0dXJuIHlBLnNoaWZ0KCl9LHE9e3R0eXM6W10saW5pdCgpe30sc2h1dGRvd24oKXt9LHJlZ2lzdGVyKEEsSSl7cS50dHlzW0FdPXtpbnB1dDpbXSxvdXRwdXQ6W10sb3BzOkl9LEMucmVnaXN0ZXJEZXZpY2UoQSxxLnN0cmVhbV9vcHMpfSxzdHJlYW1fb3BzOntvcGVuKEEpe3ZhciBJPXEudHR5c1tBLm5vZGUucmRldl07aWYoIUkpdGhyb3cgbmV3IEMuRXJybm9FcnJvcig0Myk7QS50dHk9SSxBLnNlZWthYmxlPSExfSxjbG9zZShBKXtBLnR0eS5vcHMuZnN5bmMoQS50dHkpfSxmc3luYyhBKXtBLnR0eS5vcHMuZnN5bmMoQS50dHkpfSxyZWFkKEEsSSxnLEIsRSl7aWYoIUEudHR5fHwhQS50dHkub3BzLmdldF9jaGFyKXRocm93IG5ldyBDLkVycm5vRXJyb3IoNjApO2Zvcih2YXIgUT0wLGg9MDtoPEI7aCsrKXt2YXIgaTt0cnl7aT1BLnR0eS5vcHMuZ2V0X2NoYXIoQS50dHkpfWNhdGNoe3Rocm93IG5ldyBDLkVycm5vRXJyb3IoMjkpfWlmKGk9PT12b2lkIDAmJlE9PT0wKXRocm93IG5ldyBDLkVycm5vRXJyb3IoNik7aWYoaT09bnVsbClicmVhaztRKyssSVtnK2hdPWl9cmV0dXJuIFEmJihBLm5vZGUudGltZXN0YW1wPURhdGUubm93KCkpLFF9LHdyaXRlKEEsSSxnLEIsRSl7aWYoIUEudHR5fHwhQS50dHkub3BzLnB1dF9jaGFyKXRocm93IG5ldyBDLkVycm5vRXJyb3IoNjApO3RyeXtmb3IodmFyIFE9MDtRPEI7USsrKUEudHR5Lm9wcy5wdXRfY2hhcihBLnR0eSxJW2crUV0pfWNhdGNoe3Rocm93IG5ldyBDLkVycm5vRXJyb3IoMjkpfXJldHVybiBCJiYoQS5ub2RlLnRpbWVzdGFtcD1EYXRlLm5vdygpKSxRfX0sZGVmYXVsdF90dHlfb3BzOntnZXRfY2hhcihBKXtyZXR1cm4ga0koKX0scHV0X2NoYXIoQSxJKXtJPT09bnVsbHx8ST09PTEwPyhaKHooQS5vdXRwdXQsMCkpLEEub3V0cHV0PVtdKTpJIT0wJiZBLm91dHB1dC5wdXNoKEkpfSxmc3luYyhBKXtBLm91dHB1dCYmQS5vdXRwdXQubGVuZ3RoPjAmJihaKHooQS5vdXRwdXQsMCkpLEEub3V0cHV0PVtdKX0saW9jdGxfdGNnZXRzKEEpe3JldHVybntjX2lmbGFnOjI1ODU2LGNfb2ZsYWc6NSxjX2NmbGFnOjE5MSxjX2xmbGFnOjM1Mzg3LGNfY2M6WzMsMjgsMTI3LDIxLDQsMCwxLDAsMTcsMTksMjYsMCwxOCwxNSwyMywyMiwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXX19LGlvY3RsX3Rjc2V0cyhBLEksZyl7cmV0dXJuIDB9LGlvY3RsX3Rpb2Nnd2luc3ooQSl7cmV0dXJuWzI0LDgwXX19LGRlZmF1bHRfdHR5MV9vcHM6e3B1dF9jaGFyKEEsSSl7ST09PW51bGx8fEk9PT0xMD8oTih6KEEub3V0cHV0LDApKSxBLm91dHB1dD1bXSk6SSE9MCYmQS5vdXRwdXQucHVzaChJKX0sZnN5bmMoQSl7QS5vdXRwdXQmJkEub3V0cHV0Lmxlbmd0aD4wJiYoTih6KEEub3V0cHV0LDApKSxBLm91dHB1dD1bXSl9fX0sZmc9KEEsSSk9PihYLmZpbGwoMCxBLEErSSksQSksbGc9KEEsSSk9Pih3KEksImFsaWdubWVudCBhcmd1bWVudCBpcyByZXF1aXJlZCIpLE1hdGguY2VpbChBL0kpKkkpLE9BPUE9PntLKCJpbnRlcm5hbCBlcnJvcjogbW1hcEFsbG9jIGNhbGxlZCBidXQgYGVtc2NyaXB0ZW5fYnVpbHRpbl9tZW1hbGlnbmAgbmF0aXZlIHN5bWJvbCBub3QgZXhwb3J0ZWQiKX0sdD17b3BzX3RhYmxlOm51bGwsbW91bnQoQSl7cmV0dXJuIHQuY3JlYXRlTm9kZShudWxsLCIvIiwxNjg5NSwwKX0sY3JlYXRlTm9kZShBLEksZyxCKXtpZihDLmlzQmxrZGV2KGcpfHxDLmlzRklGTyhnKSl0aHJvdyBuZXcgQy5FcnJub0Vycm9yKDYzKTt0Lm9wc190YWJsZXx8KHQub3BzX3RhYmxlPXtkaXI6e25vZGU6e2dldGF0dHI6dC5ub2RlX29wcy5nZXRhdHRyLHNldGF0dHI6dC5ub2RlX29wcy5zZXRhdHRyLGxvb2t1cDp0Lm5vZGVfb3BzLmxvb2t1cCxta25vZDp0Lm5vZGVfb3BzLm1rbm9kLHJlbmFtZTp0Lm5vZGVfb3BzLnJlbmFtZSx1bmxpbms6dC5ub2RlX29wcy51bmxpbmsscm1kaXI6dC5ub2RlX29wcy5ybWRpcixyZWFkZGlyOnQubm9kZV9vcHMucmVhZGRpcixzeW1saW5rOnQubm9kZV9vcHMuc3ltbGlua30sc3RyZWFtOntsbHNlZWs6dC5zdHJlYW1fb3BzLmxsc2Vla319LGZpbGU6e25vZGU6e2dldGF0dHI6dC5ub2RlX29wcy5nZXRhdHRyLHNldGF0dHI6dC5ub2RlX29wcy5zZXRhdHRyfSxzdHJlYW06e2xsc2Vlazp0LnN0cmVhbV9vcHMubGxzZWVrLHJlYWQ6dC5zdHJlYW1fb3BzLnJlYWQsd3JpdGU6dC5zdHJlYW1fb3BzLndyaXRlLGFsbG9jYXRlOnQuc3RyZWFtX29wcy5hbGxvY2F0ZSxtbWFwOnQuc3RyZWFtX29wcy5tbWFwLG1zeW5jOnQuc3RyZWFtX29wcy5tc3luY319LGxpbms6e25vZGU6e2dldGF0dHI6dC5ub2RlX29wcy5nZXRhdHRyLHNldGF0dHI6dC5ub2RlX29wcy5zZXRhdHRyLHJlYWRsaW5rOnQubm9kZV9vcHMucmVhZGxpbmt9LHN0cmVhbTp7fX0sY2hyZGV2Ontub2RlOntnZXRhdHRyOnQubm9kZV9vcHMuZ2V0YXR0cixzZXRhdHRyOnQubm9kZV9vcHMuc2V0YXR0cn0sc3RyZWFtOkMuY2hyZGV2X3N0cmVhbV9vcHN9fSk7dmFyIEU9Qy5jcmVhdGVOb2RlKEEsSSxnLEIpO3JldHVybiBDLmlzRGlyKEUubW9kZSk/KEUubm9kZV9vcHM9dC5vcHNfdGFibGUuZGlyLm5vZGUsRS5zdHJlYW1fb3BzPXQub3BzX3RhYmxlLmRpci5zdHJlYW0sRS5jb250ZW50cz17fSk6Qy5pc0ZpbGUoRS5tb2RlKT8oRS5ub2RlX29wcz10Lm9wc190YWJsZS5maWxlLm5vZGUsRS5zdHJlYW1fb3BzPXQub3BzX3RhYmxlLmZpbGUuc3RyZWFtLEUudXNlZEJ5dGVzPTAsRS5jb250ZW50cz1udWxsKTpDLmlzTGluayhFLm1vZGUpPyhFLm5vZGVfb3BzPXQub3BzX3RhYmxlLmxpbmsubm9kZSxFLnN0cmVhbV9vcHM9dC5vcHNfdGFibGUubGluay5zdHJlYW0pOkMuaXNDaHJkZXYoRS5tb2RlKSYmKEUubm9kZV9vcHM9dC5vcHNfdGFibGUuY2hyZGV2Lm5vZGUsRS5zdHJlYW1fb3BzPXQub3BzX3RhYmxlLmNocmRldi5zdHJlYW0pLEUudGltZXN0YW1wPURhdGUubm93KCksQSYmKEEuY29udGVudHNbSV09RSxBLnRpbWVzdGFtcD1FLnRpbWVzdGFtcCksRX0sZ2V0RmlsZURhdGFBc1R5cGVkQXJyYXkoQSl7cmV0dXJuIEEuY29udGVudHM/QS5jb250ZW50cy5zdWJhcnJheT9BLmNvbnRlbnRzLnN1YmFycmF5KDAsQS51c2VkQnl0ZXMpOm5ldyBVaW50OEFycmF5KEEuY29udGVudHMpOm5ldyBVaW50OEFycmF5KDApfSxleHBhbmRGaWxlU3RvcmFnZShBLEkpe3ZhciBnPUEuY29udGVudHM/QS5jb250ZW50cy5sZW5ndGg6MDtpZighKGc+PUkpKXt2YXIgQj0xMDI0KjEwMjQ7ST1NYXRoLm1heChJLGcqKGc8Qj8yOjEuMTI1KT4+PjApLGchPTAmJihJPU1hdGgubWF4KEksMjU2KSk7dmFyIEU9QS5jb250ZW50cztBLmNvbnRlbnRzPW5ldyBVaW50OEFycmF5KEkpLEEudXNlZEJ5dGVzPjAmJkEuY29udGVudHMuc2V0KEUuc3ViYXJyYXkoMCxBLnVzZWRCeXRlcyksMCl9fSxyZXNpemVGaWxlU3RvcmFnZShBLEkpe2lmKEEudXNlZEJ5dGVzIT1JKWlmKEk9PTApQS5jb250ZW50cz1udWxsLEEudXNlZEJ5dGVzPTA7ZWxzZXt2YXIgZz1BLmNvbnRlbnRzO0EuY29udGVudHM9bmV3IFVpbnQ4QXJyYXkoSSksZyYmQS5jb250ZW50cy5zZXQoZy5zdWJhcnJheSgwLE1hdGgubWluKEksQS51c2VkQnl0ZXMpKSksQS51c2VkQnl0ZXM9SX19LG5vZGVfb3BzOntnZXRhdHRyKEEpe3ZhciBJPXt9O3JldHVybiBJLmRldj1DLmlzQ2hyZGV2KEEubW9kZSk/QS5pZDoxLEkuaW5vPUEuaWQsSS5tb2RlPUEubW9kZSxJLm5saW5rPTEsSS51aWQ9MCxJLmdpZD0wLEkucmRldj1BLnJkZXYsQy5pc0RpcihBLm1vZGUpP0kuc2l6ZT00MDk2OkMuaXNGaWxlKEEubW9kZSk/SS5zaXplPUEudXNlZEJ5dGVzOkMuaXNMaW5rKEEubW9kZSk/SS5zaXplPUEubGluay5sZW5ndGg6SS5zaXplPTAsSS5hdGltZT1uZXcgRGF0ZShBLnRpbWVzdGFtcCksSS5tdGltZT1uZXcgRGF0ZShBLnRpbWVzdGFtcCksSS5jdGltZT1uZXcgRGF0ZShBLnRpbWVzdGFtcCksSS5ibGtzaXplPTQwOTYsSS5ibG9ja3M9TWF0aC5jZWlsKEkuc2l6ZS9JLmJsa3NpemUpLEl9LHNldGF0dHIoQSxJKXtJLm1vZGUhPT12b2lkIDAmJihBLm1vZGU9SS5tb2RlKSxJLnRpbWVzdGFtcCE9PXZvaWQgMCYmKEEudGltZXN0YW1wPUkudGltZXN0YW1wKSxJLnNpemUhPT12b2lkIDAmJnQucmVzaXplRmlsZVN0b3JhZ2UoQSxJLnNpemUpfSxsb29rdXAoQSxJKXt0aHJvdyBDLmdlbmVyaWNFcnJvcnNbNDRdfSxta25vZChBLEksZyxCKXtyZXR1cm4gdC5jcmVhdGVOb2RlKEEsSSxnLEIpfSxyZW5hbWUoQSxJLGcpe2lmKEMuaXNEaXIoQS5tb2RlKSl7dmFyIEI7dHJ5e0I9Qy5sb29rdXBOb2RlKEksZyl9Y2F0Y2h7fWlmKEIpZm9yKHZhciBFIGluIEIuY29udGVudHMpdGhyb3cgbmV3IEMuRXJybm9FcnJvcig1NSl9ZGVsZXRlIEEucGFyZW50LmNvbnRlbnRzW0EubmFtZV0sQS5wYXJlbnQudGltZXN0YW1wPURhdGUubm93KCksQS5uYW1lPWcsSS5jb250ZW50c1tnXT1BLEkudGltZXN0YW1wPUEucGFyZW50LnRpbWVzdGFtcCxBLnBhcmVudD1JfSx1bmxpbmsoQSxJKXtkZWxldGUgQS5jb250ZW50c1tJXSxBLnRpbWVzdGFtcD1EYXRlLm5vdygpfSxybWRpcihBLEkpe3ZhciBnPUMubG9va3VwTm9kZShBLEkpO2Zvcih2YXIgQiBpbiBnLmNvbnRlbnRzKXRocm93IG5ldyBDLkVycm5vRXJyb3IoNTUpO2RlbGV0ZSBBLmNvbnRlbnRzW0ldLEEudGltZXN0YW1wPURhdGUubm93KCl9LHJlYWRkaXIoQSl7dmFyIEk9WyIuIiwiLi4iXTtmb3IodmFyIGcgaW4gQS5jb250ZW50cylBLmNvbnRlbnRzLmhhc093blByb3BlcnR5KGcpJiZJLnB1c2goZyk7cmV0dXJuIEl9LHN5bWxpbmsoQSxJLGcpe3ZhciBCPXQuY3JlYXRlTm9kZShBLEksNDE0NzEsMCk7cmV0dXJuIEIubGluaz1nLEJ9LHJlYWRsaW5rKEEpe2lmKCFDLmlzTGluayhBLm1vZGUpKXRocm93IG5ldyBDLkVycm5vRXJyb3IoMjgpO3JldHVybiBBLmxpbmt9fSxzdHJlYW1fb3BzOntyZWFkKEEsSSxnLEIsRSl7dmFyIFE9QS5ub2RlLmNvbnRlbnRzO2lmKEU+PUEubm9kZS51c2VkQnl0ZXMpcmV0dXJuIDA7dmFyIGg9TWF0aC5taW4oQS5ub2RlLnVzZWRCeXRlcy1FLEIpO2lmKHcoaD49MCksaD44JiZRLnN1YmFycmF5KUkuc2V0KFEuc3ViYXJyYXkoRSxFK2gpLGcpO2Vsc2UgZm9yKHZhciBpPTA7aTxoO2krKylJW2craV09UVtFK2ldO3JldHVybiBofSx3cml0ZShBLEksZyxCLEUsUSl7aWYodyghKEkgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpLEkuYnVmZmVyPT09TC5idWZmZXImJihRPSExKSwhQilyZXR1cm4gMDt2YXIgaD1BLm5vZGU7aWYoaC50aW1lc3RhbXA9RGF0ZS5ub3coKSxJLnN1YmFycmF5JiYoIWguY29udGVudHN8fGguY29udGVudHMuc3ViYXJyYXkpKXtpZihRKXJldHVybiB3KEU9PT0wLCJjYW5Pd24gbXVzdCBpbXBseSBubyB3ZWlyZCBwb3NpdGlvbiBpbnNpZGUgdGhlIGZpbGUiKSxoLmNvbnRlbnRzPUkuc3ViYXJyYXkoZyxnK0IpLGgudXNlZEJ5dGVzPUIsQjtpZihoLnVzZWRCeXRlcz09PTAmJkU9PT0wKXJldHVybiBoLmNvbnRlbnRzPUkuc2xpY2UoZyxnK0IpLGgudXNlZEJ5dGVzPUIsQjtpZihFK0I8PWgudXNlZEJ5dGVzKXJldHVybiBoLmNvbnRlbnRzLnNldChJLnN1YmFycmF5KGcsZytCKSxFKSxCfWlmKHQuZXhwYW5kRmlsZVN0b3JhZ2UoaCxFK0IpLGguY29udGVudHMuc3ViYXJyYXkmJkkuc3ViYXJyYXkpaC5jb250ZW50cy5zZXQoSS5zdWJhcnJheShnLGcrQiksRSk7ZWxzZSBmb3IodmFyIGk9MDtpPEI7aSsrKWguY29udGVudHNbRStpXT1JW2craV07cmV0dXJuIGgudXNlZEJ5dGVzPU1hdGgubWF4KGgudXNlZEJ5dGVzLEUrQiksQn0sbGxzZWVrKEEsSSxnKXt2YXIgQj1JO2lmKGc9PT0xP0IrPUEucG9zaXRpb246Zz09PTImJkMuaXNGaWxlKEEubm9kZS5tb2RlKSYmKEIrPUEubm9kZS51c2VkQnl0ZXMpLEI8MCl0aHJvdyBuZXcgQy5FcnJub0Vycm9yKDI4KTtyZXR1cm4gQn0sYWxsb2NhdGUoQSxJLGcpe3QuZXhwYW5kRmlsZVN0b3JhZ2UoQS5ub2RlLEkrZyksQS5ub2RlLnVzZWRCeXRlcz1NYXRoLm1heChBLm5vZGUudXNlZEJ5dGVzLEkrZyl9LG1tYXAoQSxJLGcsQixFKXtpZighQy5pc0ZpbGUoQS5ub2RlLm1vZGUpKXRocm93IG5ldyBDLkVycm5vRXJyb3IoNDMpO3ZhciBRLGgsaT1BLm5vZGUuY29udGVudHM7aWYoIShFJjIpJiZpLmJ1ZmZlcj09PUwuYnVmZmVyKWg9ITEsUT1pLmJ5dGVPZmZzZXQ7ZWxzZXtpZigoZz4wfHxnK0k8aS5sZW5ndGgpJiYoaS5zdWJhcnJheT9pPWkuc3ViYXJyYXkoZyxnK0kpOmk9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoaSxnLGcrSSkpLGg9ITAsUT1PQShJKSwhUSl0aHJvdyBuZXcgQy5FcnJub0Vycm9yKDQ4KTtMLnNldChpLFEpfXJldHVybntwdHI6USxhbGxvY2F0ZWQ6aH19LG1zeW5jKEEsSSxnLEIsRSl7cmV0dXJuIHQuc3RyZWFtX29wcy53cml0ZShBLEksMCxCLGcsITEpLDB9fX0sTkk9KEEsSSxnLEIpPT57dmFyIEU9Qj8iIjpMQShgYWwgJHtBfWApO2tBKEEsUT0+e3coUSxgTG9hZGluZyBkYXRhIGZpbGUgIiR7QX0iIGZhaWxlZCAobm8gYXJyYXlCdWZmZXIpLmApLEkobmV3IFVpbnQ4QXJyYXkoUSkpLEUmJmlBKEUpfSxRPT57aWYoZylnKCk7ZWxzZSB0aHJvd2BMb2FkaW5nIGRhdGEgZmlsZSAiJHtBfSIgZmFpbGVkLmB9KSxFJiZuQShFKX0sZkk9KEEsSSxnLEIsRSxRKT0+Qy5jcmVhdGVEYXRhRmlsZShBLEksZyxCLEUsUSksbEk9by5wcmVsb2FkUGx1Z2luc3x8W10sUkk9KEEsSSxnLEIpPT57dHlwZW9mIEJyb3dzZXI8InUiJiZCcm93c2VyLmluaXQoKTt2YXIgRT0hMTtyZXR1cm4gbEkuZm9yRWFjaChRPT57RXx8US5jYW5IYW5kbGUoSSkmJihRLmhhbmRsZShBLEksZyxCKSxFPSEwKX0pLEV9LExJPShBLEksZyxCLEUsUSxoLGksZSxGKT0+e3ZhciBhPUk/UC5yZXNvbHZlKFUuam9pbjIoQSxJKSk6QSxNPUxBKGBjcCAke2F9YCk7ZnVuY3Rpb24gYyhyKXtmdW5jdGlvbiB5KFIpe0YmJkYoKSxpfHxmSShBLEksUixCLEUsZSksUSYmUSgpLGlBKE0pfVJJKHIsYSx5LCgpPT57aCYmaCgpLGlBKE0pfSl8fHkocil9bkEoTSksdHlwZW9mIGc9PSJzdHJpbmciP05JKGcscj0+YyhyKSxoKTpjKGcpfSxKST1BPT57dmFyIEk9e3I6MCwicisiOjIsdzo1NzcsIncrIjo1NzgsYToxMDg5LCJhKyI6MTA5MH0sZz1JW0FdO2lmKHR5cGVvZiBnPiJ1Iil0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gZmlsZSBvcGVuIG1vZGU6ICR7QX1gKTtyZXR1cm4gZ30sVUE9KEEsSSk9Pnt2YXIgZz0wO3JldHVybiBBJiYoZ3w9MzY1KSxJJiYoZ3w9MTQ2KSxnfSx1ST17MDoiU3VjY2VzcyIsMToiQXJnIGxpc3QgdG9vIGxvbmciLDI6IlBlcm1pc3Npb24gZGVuaWVkIiwzOiJBZGRyZXNzIGFscmVhZHkgaW4gdXNlIiw0OiJBZGRyZXNzIG5vdCBhdmFpbGFibGUiLDU6IkFkZHJlc3MgZmFtaWx5IG5vdCBzdXBwb3J0ZWQgYnkgcHJvdG9jb2wgZmFtaWx5Iiw2OiJObyBtb3JlIHByb2Nlc3NlcyIsNzoiU29ja2V0IGFscmVhZHkgY29ubmVjdGVkIiw4OiJCYWQgZmlsZSBudW1iZXIiLDk6IlRyeWluZyB0byByZWFkIHVucmVhZGFibGUgbWVzc2FnZSIsMTA6Ik1vdW50IGRldmljZSBidXN5IiwxMToiT3BlcmF0aW9uIGNhbmNlbGVkIiwxMjoiTm8gY2hpbGRyZW4iLDEzOiJDb25uZWN0aW9uIGFib3J0ZWQiLDE0OiJDb25uZWN0aW9uIHJlZnVzZWQiLDE1OiJDb25uZWN0aW9uIHJlc2V0IGJ5IHBlZXIiLDE2OiJGaWxlIGxvY2tpbmcgZGVhZGxvY2sgZXJyb3IiLDE3OiJEZXN0aW5hdGlvbiBhZGRyZXNzIHJlcXVpcmVkIiwxODoiTWF0aCBhcmcgb3V0IG9mIGRvbWFpbiBvZiBmdW5jIiwxOToiUXVvdGEgZXhjZWVkZWQiLDIwOiJGaWxlIGV4aXN0cyIsMjE6IkJhZCBhZGRyZXNzIiwyMjoiRmlsZSB0b28gbGFyZ2UiLDIzOiJIb3N0IGlzIHVucmVhY2hhYmxlIiwyNDoiSWRlbnRpZmllciByZW1vdmVkIiwyNToiSWxsZWdhbCBieXRlIHNlcXVlbmNlIiwyNjoiQ29ubmVjdGlvbiBhbHJlYWR5IGluIHByb2dyZXNzIiwyNzoiSW50ZXJydXB0ZWQgc3lzdGVtIGNhbGwiLDI4OiJJbnZhbGlkIGFyZ3VtZW50IiwyOToiSS9PIGVycm9yIiwzMDoiU29ja2V0IGlzIGFscmVhZHkgY29ubmVjdGVkIiwzMToiSXMgYSBkaXJlY3RvcnkiLDMyOiJUb28gbWFueSBzeW1ib2xpYyBsaW5rcyIsMzM6IlRvbyBtYW55IG9wZW4gZmlsZXMiLDM0OiJUb28gbWFueSBsaW5rcyIsMzU6Ik1lc3NhZ2UgdG9vIGxvbmciLDM2OiJNdWx0aWhvcCBhdHRlbXB0ZWQiLDM3OiJGaWxlIG9yIHBhdGggbmFtZSB0b28gbG9uZyIsMzg6Ik5ldHdvcmsgaW50ZXJmYWNlIGlzIG5vdCBjb25maWd1cmVkIiwzOToiQ29ubmVjdGlvbiByZXNldCBieSBuZXR3b3JrIiw0MDoiTmV0d29yayBpcyB1bnJlYWNoYWJsZSIsNDE6IlRvbyBtYW55IG9wZW4gZmlsZXMgaW4gc3lzdGVtIiw0MjoiTm8gYnVmZmVyIHNwYWNlIGF2YWlsYWJsZSIsNDM6Ik5vIHN1Y2ggZGV2aWNlIiw0NDoiTm8gc3VjaCBmaWxlIG9yIGRpcmVjdG9yeSIsNDU6IkV4ZWMgZm9ybWF0IGVycm9yIiw0NjoiTm8gcmVjb3JkIGxvY2tzIGF2YWlsYWJsZSIsNDc6IlRoZSBsaW5rIGhhcyBiZWVuIHNldmVyZWQiLDQ4OiJOb3QgZW5vdWdoIGNvcmUiLDQ5OiJObyBtZXNzYWdlIG9mIGRlc2lyZWQgdHlwZSIsNTA6IlByb3RvY29sIG5vdCBhdmFpbGFibGUiLDUxOiJObyBzcGFjZSBsZWZ0IG9uIGRldmljZSIsNTI6IkZ1bmN0aW9uIG5vdCBpbXBsZW1lbnRlZCIsNTM6IlNvY2tldCBpcyBub3QgY29ubmVjdGVkIiw1NDoiTm90IGEgZGlyZWN0b3J5Iiw1NToiRGlyZWN0b3J5IG5vdCBlbXB0eSIsNTY6IlN0YXRlIG5vdCByZWNvdmVyYWJsZSIsNTc6IlNvY2tldCBvcGVyYXRpb24gb24gbm9uLXNvY2tldCIsNTk6Ik5vdCBhIHR5cGV3cml0ZXIiLDYwOiJObyBzdWNoIGRldmljZSBvciBhZGRyZXNzIiw2MToiVmFsdWUgdG9vIGxhcmdlIGZvciBkZWZpbmVkIGRhdGEgdHlwZSIsNjI6IlByZXZpb3VzIG93bmVyIGRpZWQiLDYzOiJOb3Qgc3VwZXItdXNlciIsNjQ6IkJyb2tlbiBwaXBlIiw2NToiUHJvdG9jb2wgZXJyb3IiLDY2OiJVbmtub3duIHByb3RvY29sIiw2NzoiUHJvdG9jb2wgd3JvbmcgdHlwZSBmb3Igc29ja2V0Iiw2ODoiTWF0aCByZXN1bHQgbm90IHJlcHJlc2VudGFibGUiLDY5OiJSZWFkIG9ubHkgZmlsZSBzeXN0ZW0iLDcwOiJJbGxlZ2FsIHNlZWsiLDcxOiJObyBzdWNoIHByb2Nlc3MiLDcyOiJTdGFsZSBmaWxlIGhhbmRsZSIsNzM6IkNvbm5lY3Rpb24gdGltZWQgb3V0Iiw3NDoiVGV4dCBmaWxlIGJ1c3kiLDc1OiJDcm9zcy1kZXZpY2UgbGluayIsMTAwOiJEZXZpY2Ugbm90IGEgc3RyZWFtIiwxMDE6IkJhZCBmb250IGZpbGUgZm10IiwxMDI6IkludmFsaWQgc2xvdCIsMTAzOiJJbnZhbGlkIHJlcXVlc3QgY29kZSIsMTA0OiJObyBhbm9kZSIsMTA1OiJCbG9jayBkZXZpY2UgcmVxdWlyZWQiLDEwNjoiQ2hhbm5lbCBudW1iZXIgb3V0IG9mIHJhbmdlIiwxMDc6IkxldmVsIDMgaGFsdGVkIiwxMDg6IkxldmVsIDMgcmVzZXQiLDEwOToiTGluayBudW1iZXIgb3V0IG9mIHJhbmdlIiwxMTA6IlByb3RvY29sIGRyaXZlciBub3QgYXR0YWNoZWQiLDExMToiTm8gQ1NJIHN0cnVjdHVyZSBhdmFpbGFibGUiLDExMjoiTGV2ZWwgMiBoYWx0ZWQiLDExMzoiSW52YWxpZCBleGNoYW5nZSIsMTE0OiJJbnZhbGlkIHJlcXVlc3QgZGVzY3JpcHRvciIsMTE1OiJFeGNoYW5nZSBmdWxsIiwxMTY6Ik5vIGRhdGEgKGZvciBubyBkZWxheSBpbykiLDExNzoiVGltZXIgZXhwaXJlZCIsMTE4OiJPdXQgb2Ygc3RyZWFtcyByZXNvdXJjZXMiLDExOToiTWFjaGluZSBpcyBub3Qgb24gdGhlIG5ldHdvcmsiLDEyMDoiUGFja2FnZSBub3QgaW5zdGFsbGVkIiwxMjE6IlRoZSBvYmplY3QgaXMgcmVtb3RlIiwxMjI6IkFkdmVydGlzZSBlcnJvciIsMTIzOiJTcm1vdW50IGVycm9yIiwxMjQ6IkNvbW11bmljYXRpb24gZXJyb3Igb24gc2VuZCIsMTI1OiJDcm9zcyBtb3VudCBwb2ludCAobm90IHJlYWxseSBlcnJvcikiLDEyNjoiR2l2ZW4gbG9nLiBuYW1lIG5vdCB1bmlxdWUiLDEyNzoiZi5kLiBpbnZhbGlkIGZvciB0aGlzIG9wZXJhdGlvbiIsMTI4OiJSZW1vdGUgYWRkcmVzcyBjaGFuZ2VkIiwxMjk6IkNhbiAgIGFjY2VzcyBhIG5lZWRlZCBzaGFyZWQgbGliIiwxMzA6IkFjY2Vzc2luZyBhIGNvcnJ1cHRlZCBzaGFyZWQgbGliIiwxMzE6Ii5saWIgc2VjdGlvbiBpbiBhLm91dCBjb3JydXB0ZWQiLDEzMjoiQXR0ZW1wdGluZyB0byBsaW5rIGluIHRvbyBtYW55IGxpYnMiLDEzMzoiQXR0ZW1wdGluZyB0byBleGVjIGEgc2hhcmVkIGxpYnJhcnkiLDEzNToiU3RyZWFtcyBwaXBlIGVycm9yIiwxMzY6IlRvbyBtYW55IHVzZXJzIiwxMzc6IlNvY2tldCB0eXBlIG5vdCBzdXBwb3J0ZWQiLDEzODoiTm90IHN1cHBvcnRlZCIsMTM5OiJQcm90b2NvbCBmYW1pbHkgbm90IHN1cHBvcnRlZCIsMTQwOiJDYW4ndCBzZW5kIGFmdGVyIHNvY2tldCBzaHV0ZG93biIsMTQxOiJUb28gbWFueSByZWZlcmVuY2VzIiwxNDI6Ikhvc3QgaXMgZG93biIsMTQ4OiJObyBtZWRpdW0gKGluIHRhcGUgZHJpdmUpIiwxNTY6IkxldmVsIDIgbm90IHN5bmNocm9uaXplZCJ9LFdBPXtFUEVSTTo2MyxFTk9FTlQ6NDQsRVNSQ0g6NzEsRUlOVFI6MjcsRUlPOjI5LEVOWElPOjYwLEUyQklHOjEsRU5PRVhFQzo0NSxFQkFERjo4LEVDSElMRDoxMixFQUdBSU46NixFV09VTERCTE9DSzo2LEVOT01FTTo0OCxFQUNDRVM6MixFRkFVTFQ6MjEsRU5PVEJMSzoxMDUsRUJVU1k6MTAsRUVYSVNUOjIwLEVYREVWOjc1LEVOT0RFVjo0MyxFTk9URElSOjU0LEVJU0RJUjozMSxFSU5WQUw6MjgsRU5GSUxFOjQxLEVNRklMRTozMyxFTk9UVFk6NTksRVRYVEJTWTo3NCxFRkJJRzoyMixFTk9TUEM6NTEsRVNQSVBFOjcwLEVST0ZTOjY5LEVNTElOSzozNCxFUElQRTo2NCxFRE9NOjE4LEVSQU5HRTo2OCxFTk9NU0c6NDksRUlEUk06MjQsRUNIUk5HOjEwNixFTDJOU1lOQzoxNTYsRUwzSExUOjEwNyxFTDNSU1Q6MTA4LEVMTlJORzoxMDksRVVOQVRDSDoxMTAsRU5PQ1NJOjExMSxFTDJITFQ6MTEyLEVERUFETEs6MTYsRU5PTENLOjQ2LEVCQURFOjExMyxFQkFEUjoxMTQsRVhGVUxMOjExNSxFTk9BTk86MTA0LEVCQURSUUM6MTAzLEVCQURTTFQ6MTAyLEVERUFETE9DSzoxNixFQkZPTlQ6MTAxLEVOT1NUUjoxMDAsRU5PREFUQToxMTYsRVRJTUU6MTE3LEVOT1NSOjExOCxFTk9ORVQ6MTE5LEVOT1BLRzoxMjAsRVJFTU9URToxMjEsRU5PTElOSzo0NyxFQURWOjEyMixFU1JNTlQ6MTIzLEVDT01NOjEyNCxFUFJPVE86NjUsRU1VTFRJSE9QOjM2LEVET1RET1Q6MTI1LEVCQURNU0c6OSxFTk9UVU5JUToxMjYsRUJBREZEOjEyNyxFUkVNQ0hHOjEyOCxFTElCQUNDOjEyOSxFTElCQkFEOjEzMCxFTElCU0NOOjEzMSxFTElCTUFYOjEzMixFTElCRVhFQzoxMzMsRU5PU1lTOjUyLEVOT1RFTVBUWTo1NSxFTkFNRVRPT0xPTkc6MzcsRUxPT1A6MzIsRU9QTk9UU1VQUDoxMzgsRVBGTk9TVVBQT1JUOjEzOSxFQ09OTlJFU0VUOjE1LEVOT0JVRlM6NDIsRUFGTk9TVVBQT1JUOjUsRVBST1RPVFlQRTo2NyxFTk9UU09DSzo1NyxFTk9QUk9UT09QVDo1MCxFU0hVVERPV046MTQwLEVDT05OUkVGVVNFRDoxNCxFQUREUklOVVNFOjMsRUNPTk5BQk9SVEVEOjEzLEVORVRVTlJFQUNIOjQwLEVORVRET1dOOjM4LEVUSU1FRE9VVDo3MyxFSE9TVERPV046MTQyLEVIT1NUVU5SRUFDSDoyMyxFSU5QUk9HUkVTUzoyNixFQUxSRUFEWTo3LEVERVNUQUREUlJFUToxNyxFTVNHU0laRTozNSxFUFJPVE9OT1NVUFBPUlQ6NjYsRVNPQ0tUTk9TVVBQT1JUOjEzNyxFQUREUk5PVEFWQUlMOjQsRU5FVFJFU0VUOjM5LEVJU0NPTk46MzAsRU5PVENPTk46NTMsRVRPT01BTllSRUZTOjE0MSxFVVNFUlM6MTM2LEVEUVVPVDoxOSxFU1RBTEU6NzIsRU5PVFNVUDoxMzgsRU5PTUVESVVNOjE0OCxFSUxTRVE6MjUsRU9WRVJGTE9XOjYxLEVDQU5DRUxFRDoxMSxFTk9UUkVDT1ZFUkFCTEU6NTYsRU9XTkVSREVBRDo2MixFU1RSUElQRToxMzV9LG1JPUE9PihiKCJ3YXJuaW5nOiBidWlsZCB3aXRoIC1zREVNQU5HTEVfU1VQUE9SVCB0byBsaW5rIGluIGxpYmN4eGFiaSBkZW1hbmdsaW5nIiksQSksYkk9QT0+e3ZhciBJPS9cYl9aW1x3XGRfXSsvZztyZXR1cm4gQS5yZXBsYWNlKEksZnVuY3Rpb24oZyl7dmFyIEI9bUkoZyk7cmV0dXJuIGc9PT1CP2c6QisiIFsiK2crIl0ifSl9LEM9e3Jvb3Q6bnVsbCxtb3VudHM6W10sZGV2aWNlczp7fSxzdHJlYW1zOltdLG5leHRJbm9kZToxLG5hbWVUYWJsZTpudWxsLGN1cnJlbnRQYXRoOiIvIixpbml0aWFsaXplZDohMSxpZ25vcmVQZXJtaXNzaW9uczohMCxFcnJub0Vycm9yOm51bGwsZ2VuZXJpY0Vycm9yczp7fSxmaWxlc3lzdGVtczpudWxsLHN5bmNGU1JlcXVlc3RzOjAsbG9va3VwUGF0aChBLEk9e30pe2lmKEE9UC5yZXNvbHZlKEEpLCFBKXJldHVybntwYXRoOiIiLG5vZGU6bnVsbH07dmFyIGc9e2ZvbGxvd19tb3VudDohMCxyZWN1cnNlX2NvdW50OjB9O2lmKEk9T2JqZWN0LmFzc2lnbihnLEkpLEkucmVjdXJzZV9jb3VudD44KXRocm93IG5ldyBDLkVycm5vRXJyb3IoMzIpO2Zvcih2YXIgQj1BLnNwbGl0KCIvIikuZmlsdGVyKE09PiEhTSksRT1DLnJvb3QsUT0iLyIsaD0wO2g8Qi5sZW5ndGg7aCsrKXt2YXIgaT1oPT09Qi5sZW5ndGgtMTtpZihpJiZJLnBhcmVudClicmVhaztpZihFPUMubG9va3VwTm9kZShFLEJbaF0pLFE9VS5qb2luMihRLEJbaF0pLEMuaXNNb3VudHBvaW50KEUpJiYoIWl8fGkmJkkuZm9sbG93X21vdW50KSYmKEU9RS5tb3VudGVkLnJvb3QpLCFpfHxJLmZvbGxvdylmb3IodmFyIGU9MDtDLmlzTGluayhFLm1vZGUpOyl7dmFyIEY9Qy5yZWFkbGluayhRKTtRPVAucmVzb2x2ZShVLmRpcm5hbWUoUSksRik7dmFyIGE9Qy5sb29rdXBQYXRoKFEse3JlY3Vyc2VfY291bnQ6SS5yZWN1cnNlX2NvdW50KzF9KTtpZihFPWEubm9kZSxlKys+NDApdGhyb3cgbmV3IEMuRXJybm9FcnJvcigzMil9fXJldHVybntwYXRoOlEsbm9kZTpFfX0sZ2V0UGF0aChBKXtmb3IodmFyIEk7Oyl7aWYoQy5pc1Jvb3QoQSkpe3ZhciBnPUEubW91bnQubW91bnRwb2ludDtyZXR1cm4gST9nW2cubGVuZ3RoLTFdIT09Ii8iP2Ake2d9LyR7SX1gOmcrSTpnfUk9ST9gJHtBLm5hbWV9LyR7SX1gOkEubmFtZSxBPUEucGFyZW50fX0saGFzaE5hbWUoQSxJKXtmb3IodmFyIGc9MCxCPTA7QjxJLmxlbmd0aDtCKyspZz0oZzw8NSktZytJLmNoYXJDb2RlQXQoQil8MDtyZXR1cm4oQStnPj4+MCklQy5uYW1lVGFibGUubGVuZ3RofSxoYXNoQWRkTm9kZShBKXt2YXIgST1DLmhhc2hOYW1lKEEucGFyZW50LmlkLEEubmFtZSk7QS5uYW1lX25leHQ9Qy5uYW1lVGFibGVbSV0sQy5uYW1lVGFibGVbSV09QX0saGFzaFJlbW92ZU5vZGUoQSl7dmFyIEk9Qy5oYXNoTmFtZShBLnBhcmVudC5pZCxBLm5hbWUpO2lmKEMubmFtZVRhYmxlW0ldPT09QSlDLm5hbWVUYWJsZVtJXT1BLm5hbWVfbmV4dDtlbHNlIGZvcih2YXIgZz1DLm5hbWVUYWJsZVtJXTtnOyl7aWYoZy5uYW1lX25leHQ9PT1BKXtnLm5hbWVfbmV4dD1BLm5hbWVfbmV4dDticmVha31nPWcubmFtZV9uZXh0fX0sbG9va3VwTm9kZShBLEkpe3ZhciBnPUMubWF5TG9va3VwKEEpO2lmKGcpdGhyb3cgbmV3IEMuRXJybm9FcnJvcihnLEEpO2Zvcih2YXIgQj1DLmhhc2hOYW1lKEEuaWQsSSksRT1DLm5hbWVUYWJsZVtCXTtFO0U9RS5uYW1lX25leHQpe3ZhciBRPUUubmFtZTtpZihFLnBhcmVudC5pZD09PUEuaWQmJlE9PT1JKXJldHVybiBFfXJldHVybiBDLmxvb2t1cChBLEkpfSxjcmVhdGVOb2RlKEEsSSxnLEIpe3codHlwZW9mIEE9PSJvYmplY3QiKTt2YXIgRT1uZXcgQy5GU05vZGUoQSxJLGcsQik7cmV0dXJuIEMuaGFzaEFkZE5vZGUoRSksRX0sZGVzdHJveU5vZGUoQSl7Qy5oYXNoUmVtb3ZlTm9kZShBKX0saXNSb290KEEpe3JldHVybiBBPT09QS5wYXJlbnR9LGlzTW91bnRwb2ludChBKXtyZXR1cm4hIUEubW91bnRlZH0saXNGaWxlKEEpe3JldHVybihBJjYxNDQwKT09PTMyNzY4fSxpc0RpcihBKXtyZXR1cm4oQSY2MTQ0MCk9PT0xNjM4NH0saXNMaW5rKEEpe3JldHVybihBJjYxNDQwKT09PTQwOTYwfSxpc0NocmRldihBKXtyZXR1cm4oQSY2MTQ0MCk9PT04MTkyfSxpc0Jsa2RldihBKXtyZXR1cm4oQSY2MTQ0MCk9PT0yNDU3Nn0saXNGSUZPKEEpe3JldHVybihBJjYxNDQwKT09PTQwOTZ9LGlzU29ja2V0KEEpe3JldHVybihBJjQ5MTUyKT09PTQ5MTUyfSxmbGFnc1RvUGVybWlzc2lvblN0cmluZyhBKXt2YXIgST1bInIiLCJ3IiwicnciXVtBJjNdO3JldHVybiBBJjUxMiYmKEkrPSJ3IiksSX0sbm9kZVBlcm1pc3Npb25zKEEsSSl7cmV0dXJuIEMuaWdub3JlUGVybWlzc2lvbnM/MDpJLmluY2x1ZGVzKCJyIikmJiEoQS5tb2RlJjI5Mil8fEkuaW5jbHVkZXMoInciKSYmIShBLm1vZGUmMTQ2KXx8SS5pbmNsdWRlcygieCIpJiYhKEEubW9kZSY3Myk/MjowfSxtYXlMb29rdXAoQSl7dmFyIEk9Qy5ub2RlUGVybWlzc2lvbnMoQSwieCIpO3JldHVybiBJfHwoQS5ub2RlX29wcy5sb29rdXA/MDoyKX0sbWF5Q3JlYXRlKEEsSSl7dHJ5e3ZhciBnPUMubG9va3VwTm9kZShBLEkpO3JldHVybiAyMH1jYXRjaHt9cmV0dXJuIEMubm9kZVBlcm1pc3Npb25zKEEsInd4Iil9LG1heURlbGV0ZShBLEksZyl7dmFyIEI7dHJ5e0I9Qy5sb29rdXBOb2RlKEEsSSl9Y2F0Y2goUSl7cmV0dXJuIFEuZXJybm99dmFyIEU9Qy5ub2RlUGVybWlzc2lvbnMoQSwid3giKTtpZihFKXJldHVybiBFO2lmKGcpe2lmKCFDLmlzRGlyKEIubW9kZSkpcmV0dXJuIDU0O2lmKEMuaXNSb290KEIpfHxDLmdldFBhdGgoQik9PT1DLmN3ZCgpKXJldHVybiAxMH1lbHNlIGlmKEMuaXNEaXIoQi5tb2RlKSlyZXR1cm4gMzE7cmV0dXJuIDB9LG1heU9wZW4oQSxJKXtyZXR1cm4gQT9DLmlzTGluayhBLm1vZGUpPzMyOkMuaXNEaXIoQS5tb2RlKSYmKEMuZmxhZ3NUb1Blcm1pc3Npb25TdHJpbmcoSSkhPT0iciJ8fEkmNTEyKT8zMTpDLm5vZGVQZXJtaXNzaW9ucyhBLEMuZmxhZ3NUb1Blcm1pc3Npb25TdHJpbmcoSSkpOjQ0fSxNQVhfT1BFTl9GRFM6NDA5NixuZXh0ZmQoKXtmb3IodmFyIEE9MDtBPD1DLk1BWF9PUEVOX0ZEUztBKyspaWYoIUMuc3RyZWFtc1tBXSlyZXR1cm4gQTt0aHJvdyBuZXcgQy5FcnJub0Vycm9yKDMzKX0sZ2V0U3RyZWFtQ2hlY2tlZChBKXt2YXIgST1DLmdldFN0cmVhbShBKTtpZighSSl0aHJvdyBuZXcgQy5FcnJub0Vycm9yKDgpO3JldHVybiBJfSxnZXRTdHJlYW06QT0+Qy5zdHJlYW1zW0FdLGNyZWF0ZVN0cmVhbShBLEk9LTEpe3JldHVybiBDLkZTU3RyZWFtfHwoQy5GU1N0cmVhbT1mdW5jdGlvbigpe3RoaXMuc2hhcmVkPXt9fSxDLkZTU3RyZWFtLnByb3RvdHlwZT17fSxPYmplY3QuZGVmaW5lUHJvcGVydGllcyhDLkZTU3RyZWFtLnByb3RvdHlwZSx7b2JqZWN0OntnZXQoKXtyZXR1cm4gdGhpcy5ub2RlfSxzZXQoZyl7dGhpcy5ub2RlPWd9fSxpc1JlYWQ6e2dldCgpe3JldHVybih0aGlzLmZsYWdzJjIwOTcxNTUpIT09MX19LGlzV3JpdGU6e2dldCgpe3JldHVybih0aGlzLmZsYWdzJjIwOTcxNTUpIT09MH19LGlzQXBwZW5kOntnZXQoKXtyZXR1cm4gdGhpcy5mbGFncyYxMDI0fX0sZmxhZ3M6e2dldCgpe3JldHVybiB0aGlzLnNoYXJlZC5mbGFnc30sc2V0KGcpe3RoaXMuc2hhcmVkLmZsYWdzPWd9fSxwb3NpdGlvbjp7Z2V0KCl7cmV0dXJuIHRoaXMuc2hhcmVkLnBvc2l0aW9ufSxzZXQoZyl7dGhpcy5zaGFyZWQucG9zaXRpb249Z319fSkpLEE9T2JqZWN0LmFzc2lnbihuZXcgQy5GU1N0cmVhbSxBKSxJPT0tMSYmKEk9Qy5uZXh0ZmQoKSksQS5mZD1JLEMuc3RyZWFtc1tJXT1BLEF9LGNsb3NlU3RyZWFtKEEpe0Muc3RyZWFtc1tBXT1udWxsfSxjaHJkZXZfc3RyZWFtX29wczp7b3BlbihBKXt2YXIgST1DLmdldERldmljZShBLm5vZGUucmRldik7QS5zdHJlYW1fb3BzPUkuc3RyZWFtX29wcyxBLnN0cmVhbV9vcHMub3BlbiYmQS5zdHJlYW1fb3BzLm9wZW4oQSl9LGxsc2Vlaygpe3Rocm93IG5ldyBDLkVycm5vRXJyb3IoNzApfX0sbWFqb3I6QT0+QT4+OCxtaW5vcjpBPT5BJjI1NSxtYWtlZGV2OihBLEkpPT5BPDw4fEkscmVnaXN0ZXJEZXZpY2UoQSxJKXtDLmRldmljZXNbQV09e3N0cmVhbV9vcHM6SX19LGdldERldmljZTpBPT5DLmRldmljZXNbQV0sZ2V0TW91bnRzKEEpe2Zvcih2YXIgST1bXSxnPVtBXTtnLmxlbmd0aDspe3ZhciBCPWcucG9wKCk7SS5wdXNoKEIpLGcucHVzaC5hcHBseShnLEIubW91bnRzKX1yZXR1cm4gSX0sc3luY2ZzKEEsSSl7dHlwZW9mIEE9PSJmdW5jdGlvbiImJihJPUEsQT0hMSksQy5zeW5jRlNSZXF1ZXN0cysrLEMuc3luY0ZTUmVxdWVzdHM+MSYmTihgd2FybmluZzogJHtDLnN5bmNGU1JlcXVlc3RzfSBGUy5zeW5jZnMgb3BlcmF0aW9ucyBpbiBmbGlnaHQgYXQgb25jZSwgcHJvYmFibHkganVzdCBkb2luZyBleHRyYSB3b3JrYCk7dmFyIGc9Qy5nZXRNb3VudHMoQy5yb290Lm1vdW50KSxCPTA7ZnVuY3Rpb24gRShoKXtyZXR1cm4gdyhDLnN5bmNGU1JlcXVlc3RzPjApLEMuc3luY0ZTUmVxdWVzdHMtLSxJKGgpfWZ1bmN0aW9uIFEoaCl7aWYoaClyZXR1cm4gUS5lcnJvcmVkP3ZvaWQgMDooUS5lcnJvcmVkPSEwLEUoaCkpOysrQj49Zy5sZW5ndGgmJkUobnVsbCl9Zy5mb3JFYWNoKGg9PntpZighaC50eXBlLnN5bmNmcylyZXR1cm4gUShudWxsKTtoLnR5cGUuc3luY2ZzKGgsQSxRKX0pfSxtb3VudChBLEksZyl7aWYodHlwZW9mIEE9PSJzdHJpbmciKXRocm93IEE7dmFyIEI9Zz09PSIvIixFPSFnLFE7aWYoQiYmQy5yb290KXRocm93IG5ldyBDLkVycm5vRXJyb3IoMTApO2lmKCFCJiYhRSl7dmFyIGg9Qy5sb29rdXBQYXRoKGcse2ZvbGxvd19tb3VudDohMX0pO2lmKGc9aC5wYXRoLFE9aC5ub2RlLEMuaXNNb3VudHBvaW50KFEpKXRocm93IG5ldyBDLkVycm5vRXJyb3IoMTApO2lmKCFDLmlzRGlyKFEubW9kZSkpdGhyb3cgbmV3IEMuRXJybm9FcnJvcig1NCl9dmFyIGk9e3R5cGU6QSxvcHRzOkksbW91bnRwb2ludDpnLG1vdW50czpbXX0sZT1BLm1vdW50KGkpO3JldHVybiBlLm1vdW50PWksaS5yb290PWUsQj9DLnJvb3Q9ZTpRJiYoUS5tb3VudGVkPWksUS5tb3VudCYmUS5tb3VudC5tb3VudHMucHVzaChpKSksZX0sdW5tb3VudChBKXt2YXIgST1DLmxvb2t1cFBhdGgoQSx7Zm9sbG93X21vdW50OiExfSk7aWYoIUMuaXNNb3VudHBvaW50KEkubm9kZSkpdGhyb3cgbmV3IEMuRXJybm9FcnJvcigyOCk7dmFyIGc9SS5ub2RlLEI9Zy5tb3VudGVkLEU9Qy5nZXRNb3VudHMoQik7T2JqZWN0LmtleXMoQy5uYW1lVGFibGUpLmZvckVhY2goaD0+e2Zvcih2YXIgaT1DLm5hbWVUYWJsZVtoXTtpOyl7dmFyIGU9aS5uYW1lX25leHQ7RS5pbmNsdWRlcyhpLm1vdW50KSYmQy5kZXN0cm95Tm9kZShpKSxpPWV9fSksZy5tb3VudGVkPW51bGw7dmFyIFE9Zy5tb3VudC5tb3VudHMuaW5kZXhPZihCKTt3KFEhPT0tMSksZy5tb3VudC5tb3VudHMuc3BsaWNlKFEsMSl9LGxvb2t1cChBLEkpe3JldHVybiBBLm5vZGVfb3BzLmxvb2t1cChBLEkpfSxta25vZChBLEksZyl7dmFyIEI9Qy5sb29rdXBQYXRoKEEse3BhcmVudDohMH0pLEU9Qi5ub2RlLFE9VS5iYXNlbmFtZShBKTtpZighUXx8UT09PSIuInx8UT09PSIuLiIpdGhyb3cgbmV3IEMuRXJybm9FcnJvcigyOCk7dmFyIGg9Qy5tYXlDcmVhdGUoRSxRKTtpZihoKXRocm93IG5ldyBDLkVycm5vRXJyb3IoaCk7aWYoIUUubm9kZV9vcHMubWtub2QpdGhyb3cgbmV3IEMuRXJybm9FcnJvcig2Myk7cmV0dXJuIEUubm9kZV9vcHMubWtub2QoRSxRLEksZyl9LGNyZWF0ZShBLEkpe3JldHVybiBJPUkhPT12b2lkIDA/STo0MzgsSSY9NDA5NSxJfD0zMjc2OCxDLm1rbm9kKEEsSSwwKX0sbWtkaXIoQSxJKXtyZXR1cm4gST1JIT09dm9pZCAwP0k6NTExLEkmPTEwMjMsSXw9MTYzODQsQy5ta25vZChBLEksMCl9LG1rZGlyVHJlZShBLEkpe2Zvcih2YXIgZz1BLnNwbGl0KCIvIiksQj0iIixFPTA7RTxnLmxlbmd0aDsrK0UpaWYoZ1tFXSl7Qis9Ii8iK2dbRV07dHJ5e0MubWtkaXIoQixJKX1jYXRjaChRKXtpZihRLmVycm5vIT0yMCl0aHJvdyBRfX19LG1rZGV2KEEsSSxnKXtyZXR1cm4gdHlwZW9mIGc+InUiJiYoZz1JLEk9NDM4KSxJfD04MTkyLEMubWtub2QoQSxJLGcpfSxzeW1saW5rKEEsSSl7aWYoIVAucmVzb2x2ZShBKSl0aHJvdyBuZXcgQy5FcnJub0Vycm9yKDQ0KTt2YXIgZz1DLmxvb2t1cFBhdGgoSSx7cGFyZW50OiEwfSksQj1nLm5vZGU7aWYoIUIpdGhyb3cgbmV3IEMuRXJybm9FcnJvcig0NCk7dmFyIEU9VS5iYXNlbmFtZShJKSxRPUMubWF5Q3JlYXRlKEIsRSk7aWYoUSl0aHJvdyBuZXcgQy5FcnJub0Vycm9yKFEpO2lmKCFCLm5vZGVfb3BzLnN5bWxpbmspdGhyb3cgbmV3IEMuRXJybm9FcnJvcig2Myk7cmV0dXJuIEIubm9kZV9vcHMuc3ltbGluayhCLEUsQSl9LHJlbmFtZShBLEkpe3ZhciBnPVUuZGlybmFtZShBKSxCPVUuZGlybmFtZShJKSxFPVUuYmFzZW5hbWUoQSksUT1VLmJhc2VuYW1lKEkpLGgsaSxlO2lmKGg9Qy5sb29rdXBQYXRoKEEse3BhcmVudDohMH0pLGk9aC5ub2RlLGg9Qy5sb29rdXBQYXRoKEkse3BhcmVudDohMH0pLGU9aC5ub2RlLCFpfHwhZSl0aHJvdyBuZXcgQy5FcnJub0Vycm9yKDQ0KTtpZihpLm1vdW50IT09ZS5tb3VudCl0aHJvdyBuZXcgQy5FcnJub0Vycm9yKDc1KTt2YXIgRj1DLmxvb2t1cE5vZGUoaSxFKSxhPVAucmVsYXRpdmUoQSxCKTtpZihhLmNoYXJBdCgwKSE9PSIuIil0aHJvdyBuZXcgQy5FcnJub0Vycm9yKDI4KTtpZihhPVAucmVsYXRpdmUoSSxnKSxhLmNoYXJBdCgwKSE9PSIuIil0aHJvdyBuZXcgQy5FcnJub0Vycm9yKDU1KTt2YXIgTTt0cnl7TT1DLmxvb2t1cE5vZGUoZSxRKX1jYXRjaHt9aWYoRiE9PU0pe3ZhciBjPUMuaXNEaXIoRi5tb2RlKSxyPUMubWF5RGVsZXRlKGksRSxjKTtpZihyKXRocm93IG5ldyBDLkVycm5vRXJyb3Iocik7aWYocj1NP0MubWF5RGVsZXRlKGUsUSxjKTpDLm1heUNyZWF0ZShlLFEpLHIpdGhyb3cgbmV3IEMuRXJybm9FcnJvcihyKTtpZighaS5ub2RlX29wcy5yZW5hbWUpdGhyb3cgbmV3IEMuRXJybm9FcnJvcig2Myk7aWYoQy5pc01vdW50cG9pbnQoRil8fE0mJkMuaXNNb3VudHBvaW50KE0pKXRocm93IG5ldyBDLkVycm5vRXJyb3IoMTApO2lmKGUhPT1pJiYocj1DLm5vZGVQZXJtaXNzaW9ucyhpLCJ3IikscikpdGhyb3cgbmV3IEMuRXJybm9FcnJvcihyKTtDLmhhc2hSZW1vdmVOb2RlKEYpO3RyeXtpLm5vZGVfb3BzLnJlbmFtZShGLGUsUSl9Y2F0Y2goeSl7dGhyb3cgeX1maW5hbGx5e0MuaGFzaEFkZE5vZGUoRil9fX0scm1kaXIoQSl7dmFyIEk9Qy5sb29rdXBQYXRoKEEse3BhcmVudDohMH0pLGc9SS5ub2RlLEI9VS5iYXNlbmFtZShBKSxFPUMubG9va3VwTm9kZShnLEIpLFE9Qy5tYXlEZWxldGUoZyxCLCEwKTtpZihRKXRocm93IG5ldyBDLkVycm5vRXJyb3IoUSk7aWYoIWcubm9kZV9vcHMucm1kaXIpdGhyb3cgbmV3IEMuRXJybm9FcnJvcig2Myk7aWYoQy5pc01vdW50cG9pbnQoRSkpdGhyb3cgbmV3IEMuRXJybm9FcnJvcigxMCk7Zy5ub2RlX29wcy5ybWRpcihnLEIpLEMuZGVzdHJveU5vZGUoRSl9LHJlYWRkaXIoQSl7dmFyIEk9Qy5sb29rdXBQYXRoKEEse2ZvbGxvdzohMH0pLGc9SS5ub2RlO2lmKCFnLm5vZGVfb3BzLnJlYWRkaXIpdGhyb3cgbmV3IEMuRXJybm9FcnJvcig1NCk7cmV0dXJuIGcubm9kZV9vcHMucmVhZGRpcihnKX0sdW5saW5rKEEpe3ZhciBJPUMubG9va3VwUGF0aChBLHtwYXJlbnQ6ITB9KSxnPUkubm9kZTtpZighZyl0aHJvdyBuZXcgQy5FcnJub0Vycm9yKDQ0KTt2YXIgQj1VLmJhc2VuYW1lKEEpLEU9Qy5sb29rdXBOb2RlKGcsQiksUT1DLm1heURlbGV0ZShnLEIsITEpO2lmKFEpdGhyb3cgbmV3IEMuRXJybm9FcnJvcihRKTtpZighZy5ub2RlX29wcy51bmxpbmspdGhyb3cgbmV3IEMuRXJybm9FcnJvcig2Myk7aWYoQy5pc01vdW50cG9pbnQoRSkpdGhyb3cgbmV3IEMuRXJybm9FcnJvcigxMCk7Zy5ub2RlX29wcy51bmxpbmsoZyxCKSxDLmRlc3Ryb3lOb2RlKEUpfSxyZWFkbGluayhBKXt2YXIgST1DLmxvb2t1cFBhdGgoQSksZz1JLm5vZGU7aWYoIWcpdGhyb3cgbmV3IEMuRXJybm9FcnJvcig0NCk7aWYoIWcubm9kZV9vcHMucmVhZGxpbmspdGhyb3cgbmV3IEMuRXJybm9FcnJvcigyOCk7cmV0dXJuIFAucmVzb2x2ZShDLmdldFBhdGgoZy5wYXJlbnQpLGcubm9kZV9vcHMucmVhZGxpbmsoZykpfSxzdGF0KEEsSSl7dmFyIGc9Qy5sb29rdXBQYXRoKEEse2ZvbGxvdzohSX0pLEI9Zy5ub2RlO2lmKCFCKXRocm93IG5ldyBDLkVycm5vRXJyb3IoNDQpO2lmKCFCLm5vZGVfb3BzLmdldGF0dHIpdGhyb3cgbmV3IEMuRXJybm9FcnJvcig2Myk7cmV0dXJuIEIubm9kZV9vcHMuZ2V0YXR0cihCKX0sbHN0YXQoQSl7cmV0dXJuIEMuc3RhdChBLCEwKX0sY2htb2QoQSxJLGcpe3ZhciBCO2lmKHR5cGVvZiBBPT0ic3RyaW5nIil7dmFyIEU9Qy5sb29rdXBQYXRoKEEse2ZvbGxvdzohZ30pO0I9RS5ub2RlfWVsc2UgQj1BO2lmKCFCLm5vZGVfb3BzLnNldGF0dHIpdGhyb3cgbmV3IEMuRXJybm9FcnJvcig2Myk7Qi5ub2RlX29wcy5zZXRhdHRyKEIse21vZGU6SSY0MDk1fEIubW9kZSYtNDA5Nix0aW1lc3RhbXA6RGF0ZS5ub3coKX0pfSxsY2htb2QoQSxJKXtDLmNobW9kKEEsSSwhMCl9LGZjaG1vZChBLEkpe3ZhciBnPUMuZ2V0U3RyZWFtQ2hlY2tlZChBKTtDLmNobW9kKGcubm9kZSxJKX0sY2hvd24oQSxJLGcsQil7dmFyIEU7aWYodHlwZW9mIEE9PSJzdHJpbmciKXt2YXIgUT1DLmxvb2t1cFBhdGgoQSx7Zm9sbG93OiFCfSk7RT1RLm5vZGV9ZWxzZSBFPUE7aWYoIUUubm9kZV9vcHMuc2V0YXR0cil0aHJvdyBuZXcgQy5FcnJub0Vycm9yKDYzKTtFLm5vZGVfb3BzLnNldGF0dHIoRSx7dGltZXN0YW1wOkRhdGUubm93KCl9KX0sbGNob3duKEEsSSxnKXtDLmNob3duKEEsSSxnLCEwKX0sZmNob3duKEEsSSxnKXt2YXIgQj1DLmdldFN0cmVhbUNoZWNrZWQoQSk7Qy5jaG93bihCLm5vZGUsSSxnKX0sdHJ1bmNhdGUoQSxJKXtpZihJPDApdGhyb3cgbmV3IEMuRXJybm9FcnJvcigyOCk7dmFyIGc7aWYodHlwZW9mIEE9PSJzdHJpbmciKXt2YXIgQj1DLmxvb2t1cFBhdGgoQSx7Zm9sbG93OiEwfSk7Zz1CLm5vZGV9ZWxzZSBnPUE7aWYoIWcubm9kZV9vcHMuc2V0YXR0cil0aHJvdyBuZXcgQy5FcnJub0Vycm9yKDYzKTtpZihDLmlzRGlyKGcubW9kZSkpdGhyb3cgbmV3IEMuRXJybm9FcnJvcigzMSk7aWYoIUMuaXNGaWxlKGcubW9kZSkpdGhyb3cgbmV3IEMuRXJybm9FcnJvcigyOCk7dmFyIEU9Qy5ub2RlUGVybWlzc2lvbnMoZywidyIpO2lmKEUpdGhyb3cgbmV3IEMuRXJybm9FcnJvcihFKTtnLm5vZGVfb3BzLnNldGF0dHIoZyx7c2l6ZTpJLHRpbWVzdGFtcDpEYXRlLm5vdygpfSl9LGZ0cnVuY2F0ZShBLEkpe3ZhciBnPUMuZ2V0U3RyZWFtQ2hlY2tlZChBKTtpZighKGcuZmxhZ3MmMjA5NzE1NSkpdGhyb3cgbmV3IEMuRXJybm9FcnJvcigyOCk7Qy50cnVuY2F0ZShnLm5vZGUsSSl9LHV0aW1lKEEsSSxnKXt2YXIgQj1DLmxvb2t1cFBhdGgoQSx7Zm9sbG93OiEwfSksRT1CLm5vZGU7RS5ub2RlX29wcy5zZXRhdHRyKEUse3RpbWVzdGFtcDpNYXRoLm1heChJLGcpfSl9LG9wZW4oQSxJLGcpe2lmKEE9PT0iIil0aHJvdyBuZXcgQy5FcnJub0Vycm9yKDQ0KTtJPXR5cGVvZiBJPT0ic3RyaW5nIj9KSShJKTpJLGc9dHlwZW9mIGc+InUiPzQzODpnLEkmNjQ/Zz1nJjQwOTV8MzI3Njg6Zz0wO3ZhciBCO2lmKHR5cGVvZiBBPT0ib2JqZWN0IilCPUE7ZWxzZXtBPVUubm9ybWFsaXplKEEpO3RyeXt2YXIgRT1DLmxvb2t1cFBhdGgoQSx7Zm9sbG93OiEoSSYxMzEwNzIpfSk7Qj1FLm5vZGV9Y2F0Y2h7fX12YXIgUT0hMTtpZihJJjY0KWlmKEIpe2lmKEkmMTI4KXRocm93IG5ldyBDLkVycm5vRXJyb3IoMjApfWVsc2UgQj1DLm1rbm9kKEEsZywwKSxRPSEwO2lmKCFCKXRocm93IG5ldyBDLkVycm5vRXJyb3IoNDQpO2lmKEMuaXNDaHJkZXYoQi5tb2RlKSYmKEkmPS01MTMpLEkmNjU1MzYmJiFDLmlzRGlyKEIubW9kZSkpdGhyb3cgbmV3IEMuRXJybm9FcnJvcig1NCk7aWYoIVEpe3ZhciBoPUMubWF5T3BlbihCLEkpO2lmKGgpdGhyb3cgbmV3IEMuRXJybm9FcnJvcihoKX1JJjUxMiYmIVEmJkMudHJ1bmNhdGUoQiwwKSxJJj0tMTMxNzEzO3ZhciBpPUMuY3JlYXRlU3RyZWFtKHtub2RlOkIscGF0aDpDLmdldFBhdGgoQiksZmxhZ3M6SSxzZWVrYWJsZTohMCxwb3NpdGlvbjowLHN0cmVhbV9vcHM6Qi5zdHJlYW1fb3BzLHVuZ290dGVuOltdLGVycm9yOiExfSk7cmV0dXJuIGkuc3RyZWFtX29wcy5vcGVuJiZpLnN0cmVhbV9vcHMub3BlbihpKSxvLmxvZ1JlYWRGaWxlcyYmIShJJjEpJiYoQy5yZWFkRmlsZXN8fChDLnJlYWRGaWxlcz17fSksQSBpbiBDLnJlYWRGaWxlc3x8KEMucmVhZEZpbGVzW0FdPTEpKSxpfSxjbG9zZShBKXtpZihDLmlzQ2xvc2VkKEEpKXRocm93IG5ldyBDLkVycm5vRXJyb3IoOCk7QS5nZXRkZW50cyYmKEEuZ2V0ZGVudHM9bnVsbCk7dHJ5e0Euc3RyZWFtX29wcy5jbG9zZSYmQS5zdHJlYW1fb3BzLmNsb3NlKEEpfWNhdGNoKEkpe3Rocm93IEl9ZmluYWxseXtDLmNsb3NlU3RyZWFtKEEuZmQpfUEuZmQ9bnVsbH0saXNDbG9zZWQoQSl7cmV0dXJuIEEuZmQ9PT1udWxsfSxsbHNlZWsoQSxJLGcpe2lmKEMuaXNDbG9zZWQoQSkpdGhyb3cgbmV3IEMuRXJybm9FcnJvcig4KTtpZighQS5zZWVrYWJsZXx8IUEuc3RyZWFtX29wcy5sbHNlZWspdGhyb3cgbmV3IEMuRXJybm9FcnJvcig3MCk7aWYoZyE9MCYmZyE9MSYmZyE9Mil0aHJvdyBuZXcgQy5FcnJub0Vycm9yKDI4KTtyZXR1cm4gQS5wb3NpdGlvbj1BLnN0cmVhbV9vcHMubGxzZWVrKEEsSSxnKSxBLnVuZ290dGVuPVtdLEEucG9zaXRpb259LHJlYWQoQSxJLGcsQixFKXtpZih3KGc+PTApLEI8MHx8RTwwKXRocm93IG5ldyBDLkVycm5vRXJyb3IoMjgpO2lmKEMuaXNDbG9zZWQoQSkpdGhyb3cgbmV3IEMuRXJybm9FcnJvcig4KTtpZigoQS5mbGFncyYyMDk3MTU1KT09PTEpdGhyb3cgbmV3IEMuRXJybm9FcnJvcig4KTtpZihDLmlzRGlyKEEubm9kZS5tb2RlKSl0aHJvdyBuZXcgQy5FcnJub0Vycm9yKDMxKTtpZighQS5zdHJlYW1fb3BzLnJlYWQpdGhyb3cgbmV3IEMuRXJybm9FcnJvcigyOCk7dmFyIFE9dHlwZW9mIEU8InUiO2lmKCFRKUU9QS5wb3NpdGlvbjtlbHNlIGlmKCFBLnNlZWthYmxlKXRocm93IG5ldyBDLkVycm5vRXJyb3IoNzApO3ZhciBoPUEuc3RyZWFtX29wcy5yZWFkKEEsSSxnLEIsRSk7cmV0dXJuIFF8fChBLnBvc2l0aW9uKz1oKSxofSx3cml0ZShBLEksZyxCLEUsUSl7aWYodyhnPj0wKSxCPDB8fEU8MCl0aHJvdyBuZXcgQy5FcnJub0Vycm9yKDI4KTtpZihDLmlzQ2xvc2VkKEEpKXRocm93IG5ldyBDLkVycm5vRXJyb3IoOCk7aWYoIShBLmZsYWdzJjIwOTcxNTUpKXRocm93IG5ldyBDLkVycm5vRXJyb3IoOCk7aWYoQy5pc0RpcihBLm5vZGUubW9kZSkpdGhyb3cgbmV3IEMuRXJybm9FcnJvcigzMSk7aWYoIUEuc3RyZWFtX29wcy53cml0ZSl0aHJvdyBuZXcgQy5FcnJub0Vycm9yKDI4KTtBLnNlZWthYmxlJiZBLmZsYWdzJjEwMjQmJkMubGxzZWVrKEEsMCwyKTt2YXIgaD10eXBlb2YgRTwidSI7aWYoIWgpRT1BLnBvc2l0aW9uO2Vsc2UgaWYoIUEuc2Vla2FibGUpdGhyb3cgbmV3IEMuRXJybm9FcnJvcig3MCk7dmFyIGk9QS5zdHJlYW1fb3BzLndyaXRlKEEsSSxnLEIsRSxRKTtyZXR1cm4gaHx8KEEucG9zaXRpb24rPWkpLGl9LGFsbG9jYXRlKEEsSSxnKXtpZihDLmlzQ2xvc2VkKEEpKXRocm93IG5ldyBDLkVycm5vRXJyb3IoOCk7aWYoSTwwfHxnPD0wKXRocm93IG5ldyBDLkVycm5vRXJyb3IoMjgpO2lmKCEoQS5mbGFncyYyMDk3MTU1KSl0aHJvdyBuZXcgQy5FcnJub0Vycm9yKDgpO2lmKCFDLmlzRmlsZShBLm5vZGUubW9kZSkmJiFDLmlzRGlyKEEubm9kZS5tb2RlKSl0aHJvdyBuZXcgQy5FcnJub0Vycm9yKDQzKTtpZighQS5zdHJlYW1fb3BzLmFsbG9jYXRlKXRocm93IG5ldyBDLkVycm5vRXJyb3IoMTM4KTtBLnN0cmVhbV9vcHMuYWxsb2NhdGUoQSxJLGcpfSxtbWFwKEEsSSxnLEIsRSl7aWYoQiYyJiYhKEUmMikmJihBLmZsYWdzJjIwOTcxNTUpIT09Mil0aHJvdyBuZXcgQy5FcnJub0Vycm9yKDIpO2lmKChBLmZsYWdzJjIwOTcxNTUpPT09MSl0aHJvdyBuZXcgQy5FcnJub0Vycm9yKDIpO2lmKCFBLnN0cmVhbV9vcHMubW1hcCl0aHJvdyBuZXcgQy5FcnJub0Vycm9yKDQzKTtyZXR1cm4gQS5zdHJlYW1fb3BzLm1tYXAoQSxJLGcsQixFKX0sbXN5bmMoQSxJLGcsQixFKXtyZXR1cm4gdyhnPj0wKSxBLnN0cmVhbV9vcHMubXN5bmM/QS5zdHJlYW1fb3BzLm1zeW5jKEEsSSxnLEIsRSk6MH0sbXVubWFwOkE9PjAsaW9jdGwoQSxJLGcpe2lmKCFBLnN0cmVhbV9vcHMuaW9jdGwpdGhyb3cgbmV3IEMuRXJybm9FcnJvcig1OSk7cmV0dXJuIEEuc3RyZWFtX29wcy5pb2N0bChBLEksZyl9LHJlYWRGaWxlKEEsST17fSl7aWYoSS5mbGFncz1JLmZsYWdzfHwwLEkuZW5jb2Rpbmc9SS5lbmNvZGluZ3x8ImJpbmFyeSIsSS5lbmNvZGluZyE9PSJ1dGY4IiYmSS5lbmNvZGluZyE9PSJiaW5hcnkiKXRocm93IG5ldyBFcnJvcihgSW52YWxpZCBlbmNvZGluZyB0eXBlICIke0kuZW5jb2Rpbmd9ImApO3ZhciBnLEI9Qy5vcGVuKEEsSS5mbGFncyksRT1DLnN0YXQoQSksUT1FLnNpemUsaD1uZXcgVWludDhBcnJheShRKTtyZXR1cm4gQy5yZWFkKEIsaCwwLFEsMCksSS5lbmNvZGluZz09PSJ1dGY4Ij9nPXooaCwwKTpJLmVuY29kaW5nPT09ImJpbmFyeSImJihnPWgpLEMuY2xvc2UoQiksZ30sd3JpdGVGaWxlKEEsSSxnPXt9KXtnLmZsYWdzPWcuZmxhZ3N8fDU3Nzt2YXIgQj1DLm9wZW4oQSxnLmZsYWdzLGcubW9kZSk7aWYodHlwZW9mIEk9PSJzdHJpbmciKXt2YXIgRT1uZXcgVWludDhBcnJheShxQShJKSsxKSxRPXhBKEksRSwwLEUubGVuZ3RoKTtDLndyaXRlKEIsRSwwLFEsdm9pZCAwLGcuY2FuT3duKX1lbHNlIGlmKEFycmF5QnVmZmVyLmlzVmlldyhJKSlDLndyaXRlKEIsSSwwLEkuYnl0ZUxlbmd0aCx2b2lkIDAsZy5jYW5Pd24pO2Vsc2UgdGhyb3cgbmV3IEVycm9yKCJVbnN1cHBvcnRlZCBkYXRhIHR5cGUiKTtDLmNsb3NlKEIpfSxjd2Q6KCk9PkMuY3VycmVudFBhdGgsY2hkaXIoQSl7dmFyIEk9Qy5sb29rdXBQYXRoKEEse2ZvbGxvdzohMH0pO2lmKEkubm9kZT09PW51bGwpdGhyb3cgbmV3IEMuRXJybm9FcnJvcig0NCk7aWYoIUMuaXNEaXIoSS5ub2RlLm1vZGUpKXRocm93IG5ldyBDLkVycm5vRXJyb3IoNTQpO3ZhciBnPUMubm9kZVBlcm1pc3Npb25zKEkubm9kZSwieCIpO2lmKGcpdGhyb3cgbmV3IEMuRXJybm9FcnJvcihnKTtDLmN1cnJlbnRQYXRoPUkucGF0aH0sY3JlYXRlRGVmYXVsdERpcmVjdG9yaWVzKCl7Qy5ta2RpcigiL3RtcCIpLEMubWtkaXIoIi9ob21lIiksQy5ta2RpcigiL2hvbWUvd2ViX3VzZXIiKX0sY3JlYXRlRGVmYXVsdERldmljZXMoKXtDLm1rZGlyKCIvZGV2IiksQy5yZWdpc3RlckRldmljZShDLm1ha2VkZXYoMSwzKSx7cmVhZDooKT0+MCx3cml0ZTooQixFLFEsaCxpKT0+aH0pLEMubWtkZXYoIi9kZXYvbnVsbCIsQy5tYWtlZGV2KDEsMykpLHEucmVnaXN0ZXIoQy5tYWtlZGV2KDUsMCkscS5kZWZhdWx0X3R0eV9vcHMpLHEucmVnaXN0ZXIoQy5tYWtlZGV2KDYsMCkscS5kZWZhdWx0X3R0eTFfb3BzKSxDLm1rZGV2KCIvZGV2L3R0eSIsQy5tYWtlZGV2KDUsMCkpLEMubWtkZXYoIi9kZXYvdHR5MSIsQy5tYWtlZGV2KDYsMCkpO3ZhciBBPW5ldyBVaW50OEFycmF5KDEwMjQpLEk9MCxnPSgpPT4oST09PTAmJihJPVRBKEEpLmJ5dGVMZW5ndGgpLEFbLS1JXSk7Qy5jcmVhdGVEZXZpY2UoIi9kZXYiLCJyYW5kb20iLGcpLEMuY3JlYXRlRGV2aWNlKCIvZGV2IiwidXJhbmRvbSIsZyksQy5ta2RpcigiL2Rldi9zaG0iKSxDLm1rZGlyKCIvZGV2L3NobS90bXAiKX0sY3JlYXRlU3BlY2lhbERpcmVjdG9yaWVzKCl7Qy5ta2RpcigiL3Byb2MiKTt2YXIgQT1DLm1rZGlyKCIvcHJvYy9zZWxmIik7Qy5ta2RpcigiL3Byb2Mvc2VsZi9mZCIpLEMubW91bnQoe21vdW50KCl7dmFyIEk9Qy5jcmVhdGVOb2RlKEEsImZkIiwxNjg5NSw3Myk7cmV0dXJuIEkubm9kZV9vcHM9e2xvb2t1cChnLEIpe3ZhciBFPStCLFE9Qy5nZXRTdHJlYW1DaGVja2VkKEUpLGg9e3BhcmVudDpudWxsLG1vdW50Onttb3VudHBvaW50OiJmYWtlIn0sbm9kZV9vcHM6e3JlYWRsaW5rOigpPT5RLnBhdGh9fTtyZXR1cm4gaC5wYXJlbnQ9aCxofX0sSX19LHt9LCIvcHJvYy9zZWxmL2ZkIil9LGNyZWF0ZVN0YW5kYXJkU3RyZWFtcygpe28uc3RkaW4/Qy5jcmVhdGVEZXZpY2UoIi9kZXYiLCJzdGRpbiIsby5zdGRpbik6Qy5zeW1saW5rKCIvZGV2L3R0eSIsIi9kZXYvc3RkaW4iKSxvLnN0ZG91dD9DLmNyZWF0ZURldmljZSgiL2RldiIsInN0ZG91dCIsbnVsbCxvLnN0ZG91dCk6Qy5zeW1saW5rKCIvZGV2L3R0eSIsIi9kZXYvc3Rkb3V0Iiksby5zdGRlcnI/Qy5jcmVhdGVEZXZpY2UoIi9kZXYiLCJzdGRlcnIiLG51bGwsby5zdGRlcnIpOkMuc3ltbGluaygiL2Rldi90dHkxIiwiL2Rldi9zdGRlcnIiKTt2YXIgQT1DLm9wZW4oIi9kZXYvc3RkaW4iLDApLEk9Qy5vcGVuKCIvZGV2L3N0ZG91dCIsMSksZz1DLm9wZW4oIi9kZXYvc3RkZXJyIiwxKTt3KEEuZmQ9PT0wLGBpbnZhbGlkIGhhbmRsZSBmb3Igc3RkaW4gKCR7QS5mZH0pYCksdyhJLmZkPT09MSxgaW52YWxpZCBoYW5kbGUgZm9yIHN0ZG91dCAoJHtJLmZkfSlgKSx3KGcuZmQ9PT0yLGBpbnZhbGlkIGhhbmRsZSBmb3Igc3RkZXJyICgke2cuZmR9KWApfSxlbnN1cmVFcnJub0Vycm9yKCl7Qy5FcnJub0Vycm9yfHwoQy5FcnJub0Vycm9yPWZ1bmN0aW9uKEksZyl7dGhpcy5uYW1lPSJFcnJub0Vycm9yIix0aGlzLm5vZGU9Zyx0aGlzLnNldEVycm5vPWZ1bmN0aW9uKEIpe3RoaXMuZXJybm89Qjtmb3IodmFyIEUgaW4gV0EpaWYoV0FbRV09PT1CKXt0aGlzLmNvZGU9RTticmVha319LHRoaXMuc2V0RXJybm8oSSksdGhpcy5tZXNzYWdlPXVJW0ldLHRoaXMuc3RhY2smJihPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywic3RhY2siLHt2YWx1ZTpuZXcgRXJyb3IoKS5zdGFjayx3cml0YWJsZTohMH0pLHRoaXMuc3RhY2s9YkkodGhpcy5zdGFjaykpfSxDLkVycm5vRXJyb3IucHJvdG90eXBlPW5ldyBFcnJvcixDLkVycm5vRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yPUMuRXJybm9FcnJvcixbNDRdLmZvckVhY2goQT0+e0MuZ2VuZXJpY0Vycm9yc1tBXT1uZXcgQy5FcnJub0Vycm9yKEEpLEMuZ2VuZXJpY0Vycm9yc1tBXS5zdGFjaz0iPGdlbmVyaWMgZXJyb3IsIG5vIHN0YWNrPiJ9KSl9LHN0YXRpY0luaXQoKXtDLmVuc3VyZUVycm5vRXJyb3IoKSxDLm5hbWVUYWJsZT1uZXcgQXJyYXkoNDA5NiksQy5tb3VudCh0LHt9LCIvIiksQy5jcmVhdGVEZWZhdWx0RGlyZWN0b3JpZXMoKSxDLmNyZWF0ZURlZmF1bHREZXZpY2VzKCksQy5jcmVhdGVTcGVjaWFsRGlyZWN0b3JpZXMoKSxDLmZpbGVzeXN0ZW1zPXtNRU1GUzp0fX0saW5pdChBLEksZyl7dyghQy5pbml0LmluaXRpYWxpemVkLCJGUy5pbml0IHdhcyBwcmV2aW91c2x5IGNhbGxlZC4gSWYgeW91IHdhbnQgdG8gaW5pdGlhbGl6ZSBsYXRlciB3aXRoIGN1c3RvbSBwYXJhbWV0ZXJzLCByZW1vdmUgYW55IGVhcmxpZXIgY2FsbHMgKG5vdGUgdGhhdCBvbmUgaXMgYXV0b21hdGljYWxseSBhZGRlZCB0byB0aGUgZ2VuZXJhdGVkIGNvZGUpIiksQy5pbml0LmluaXRpYWxpemVkPSEwLEMuZW5zdXJlRXJybm9FcnJvcigpLG8uc3RkaW49QXx8by5zdGRpbixvLnN0ZG91dD1JfHxvLnN0ZG91dCxvLnN0ZGVycj1nfHxvLnN0ZGVycixDLmNyZWF0ZVN0YW5kYXJkU3RyZWFtcygpfSxxdWl0KCl7Qy5pbml0LmluaXRpYWxpemVkPSExLGpBKDApO2Zvcih2YXIgQT0wO0E8Qy5zdHJlYW1zLmxlbmd0aDtBKyspe3ZhciBJPUMuc3RyZWFtc1tBXTtJJiZDLmNsb3NlKEkpfX0sZmluZE9iamVjdChBLEkpe3ZhciBnPUMuYW5hbHl6ZVBhdGgoQSxJKTtyZXR1cm4gZy5leGlzdHM/Zy5vYmplY3Q6bnVsbH0sYW5hbHl6ZVBhdGgoQSxJKXt0cnl7dmFyIGc9Qy5sb29rdXBQYXRoKEEse2ZvbGxvdzohSX0pO0E9Zy5wYXRofWNhdGNoe312YXIgQj17aXNSb290OiExLGV4aXN0czohMSxlcnJvcjowLG5hbWU6bnVsbCxwYXRoOm51bGwsb2JqZWN0Om51bGwscGFyZW50RXhpc3RzOiExLHBhcmVudFBhdGg6bnVsbCxwYXJlbnRPYmplY3Q6bnVsbH07dHJ5e3ZhciBnPUMubG9va3VwUGF0aChBLHtwYXJlbnQ6ITB9KTtCLnBhcmVudEV4aXN0cz0hMCxCLnBhcmVudFBhdGg9Zy5wYXRoLEIucGFyZW50T2JqZWN0PWcubm9kZSxCLm5hbWU9VS5iYXNlbmFtZShBKSxnPUMubG9va3VwUGF0aChBLHtmb2xsb3c6IUl9KSxCLmV4aXN0cz0hMCxCLnBhdGg9Zy5wYXRoLEIub2JqZWN0PWcubm9kZSxCLm5hbWU9Zy5ub2RlLm5hbWUsQi5pc1Jvb3Q9Zy5wYXRoPT09Ii8ifWNhdGNoKEUpe0IuZXJyb3I9RS5lcnJub31yZXR1cm4gQn0sY3JlYXRlUGF0aChBLEksZyxCKXtBPXR5cGVvZiBBPT0ic3RyaW5nIj9BOkMuZ2V0UGF0aChBKTtmb3IodmFyIEU9SS5zcGxpdCgiLyIpLnJldmVyc2UoKTtFLmxlbmd0aDspe3ZhciBRPUUucG9wKCk7aWYoUSl7dmFyIGg9VS5qb2luMihBLFEpO3RyeXtDLm1rZGlyKGgpfWNhdGNoe31BPWh9fXJldHVybiBofSxjcmVhdGVGaWxlKEEsSSxnLEIsRSl7dmFyIFE9VS5qb2luMih0eXBlb2YgQT09InN0cmluZyI/QTpDLmdldFBhdGgoQSksSSksaD1VQShCLEUpO3JldHVybiBDLmNyZWF0ZShRLGgpfSxjcmVhdGVEYXRhRmlsZShBLEksZyxCLEUsUSl7dmFyIGg9STtBJiYoQT10eXBlb2YgQT09InN0cmluZyI/QTpDLmdldFBhdGgoQSksaD1JP1Uuam9pbjIoQSxJKTpBKTt2YXIgaT1VQShCLEUpLGU9Qy5jcmVhdGUoaCxpKTtpZihnKXtpZih0eXBlb2YgZz09InN0cmluZyIpe2Zvcih2YXIgRj1uZXcgQXJyYXkoZy5sZW5ndGgpLGE9MCxNPWcubGVuZ3RoO2E8TTsrK2EpRlthXT1nLmNoYXJDb2RlQXQoYSk7Zz1GfUMuY2htb2QoZSxpfDE0Nik7dmFyIGM9Qy5vcGVuKGUsNTc3KTtDLndyaXRlKGMsZywwLGcubGVuZ3RoLDAsUSksQy5jbG9zZShjKSxDLmNobW9kKGUsaSl9cmV0dXJuIGV9LGNyZWF0ZURldmljZShBLEksZyxCKXt2YXIgRT1VLmpvaW4yKHR5cGVvZiBBPT0ic3RyaW5nIj9BOkMuZ2V0UGF0aChBKSxJKSxRPVVBKCEhZywhIUIpO0MuY3JlYXRlRGV2aWNlLm1ham9yfHwoQy5jcmVhdGVEZXZpY2UubWFqb3I9NjQpO3ZhciBoPUMubWFrZWRldihDLmNyZWF0ZURldmljZS5tYWpvcisrLDApO3JldHVybiBDLnJlZ2lzdGVyRGV2aWNlKGgse29wZW4oaSl7aS5zZWVrYWJsZT0hMX0sY2xvc2UoaSl7QiYmQi5idWZmZXImJkIuYnVmZmVyLmxlbmd0aCYmQigxMCl9LHJlYWQoaSxlLEYsYSxNKXtmb3IodmFyIGM9MCxyPTA7cjxhO3IrKyl7dmFyIHk7dHJ5e3k9ZygpfWNhdGNoe3Rocm93IG5ldyBDLkVycm5vRXJyb3IoMjkpfWlmKHk9PT12b2lkIDAmJmM9PT0wKXRocm93IG5ldyBDLkVycm5vRXJyb3IoNik7aWYoeT09bnVsbClicmVhaztjKyssZVtGK3JdPXl9cmV0dXJuIGMmJihpLm5vZGUudGltZXN0YW1wPURhdGUubm93KCkpLGN9LHdyaXRlKGksZSxGLGEsTSl7Zm9yKHZhciBjPTA7YzxhO2MrKyl0cnl7QihlW0YrY10pfWNhdGNoe3Rocm93IG5ldyBDLkVycm5vRXJyb3IoMjkpfXJldHVybiBhJiYoaS5ub2RlLnRpbWVzdGFtcD1EYXRlLm5vdygpKSxjfX0pLEMubWtkZXYoRSxRLGgpfSxmb3JjZUxvYWRGaWxlKEEpe2lmKEEuaXNEZXZpY2V8fEEuaXNGb2xkZXJ8fEEubGlua3x8QS5jb250ZW50cylyZXR1cm4hMDtpZih0eXBlb2YgWE1MSHR0cFJlcXVlc3Q8InUiKXRocm93IG5ldyBFcnJvcigiTGF6eSBsb2FkaW5nIHNob3VsZCBoYXZlIGJlZW4gcGVyZm9ybWVkIChjb250ZW50cyBzZXQpIGluIGNyZWF0ZUxhenlGaWxlLCBidXQgaXQgd2FzIG5vdC4gTGF6eSBsb2FkaW5nIG9ubHkgd29ya3MgaW4gd2ViIHdvcmtlcnMuIFVzZSAtLWVtYmVkLWZpbGUgb3IgLS1wcmVsb2FkLWZpbGUgaW4gZW1jYyBvbiB0aGUgbWFpbiB0aHJlYWQuIik7aWYoREEpdHJ5e0EuY29udGVudHM9R0EoREEoQS51cmwpLCEwKSxBLnVzZWRCeXRlcz1BLmNvbnRlbnRzLmxlbmd0aH1jYXRjaHt0aHJvdyBuZXcgQy5FcnJub0Vycm9yKDI5KX1lbHNlIHRocm93IG5ldyBFcnJvcigiQ2Fubm90IGxvYWQgd2l0aG91dCByZWFkKCkgb3IgWE1MSHR0cFJlcXVlc3QuIil9LGNyZWF0ZUxhenlGaWxlKEEsSSxnLEIsRSl7ZnVuY3Rpb24gUSgpe3RoaXMubGVuZ3RoS25vd249ITEsdGhpcy5jaHVua3M9W119aWYoUS5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKHIpe2lmKCEocj50aGlzLmxlbmd0aC0xfHxyPDApKXt2YXIgeT1yJXRoaXMuY2h1bmtTaXplLFI9ci90aGlzLmNodW5rU2l6ZXwwO3JldHVybiB0aGlzLmdldHRlcihSKVt5XX19LFEucHJvdG90eXBlLnNldERhdGFHZXR0ZXI9ZnVuY3Rpb24ocil7dGhpcy5nZXR0ZXI9cn0sUS5wcm90b3R5cGUuY2FjaGVMZW5ndGg9ZnVuY3Rpb24oKXt2YXIgcj1uZXcgWE1MSHR0cFJlcXVlc3Q7aWYoci5vcGVuKCJIRUFEIixnLCExKSxyLnNlbmQobnVsbCksIShyLnN0YXR1cz49MjAwJiZyLnN0YXR1czwzMDB8fHIuc3RhdHVzPT09MzA0KSl0aHJvdyBuZXcgRXJyb3IoIkNvdWxkbid0IGxvYWQgIitnKyIuIFN0YXR1czogIityLnN0YXR1cyk7dmFyIHk9TnVtYmVyKHIuZ2V0UmVzcG9uc2VIZWFkZXIoIkNvbnRlbnQtbGVuZ3RoIikpLFIseD0oUj1yLmdldFJlc3BvbnNlSGVhZGVyKCJBY2NlcHQtUmFuZ2VzIikpJiZSPT09ImJ5dGVzIix1PShSPXIuZ2V0UmVzcG9uc2VIZWFkZXIoIkNvbnRlbnQtRW5jb2RpbmciKSkmJlI9PT0iZ3ppcCIsSj0xMDI0KjEwMjQ7eHx8KEo9eSk7dmFyIG09KHYsJCk9PntpZih2PiQpdGhyb3cgbmV3IEVycm9yKCJpbnZhbGlkIHJhbmdlICgiK3YrIiwgIiskKyIpIG9yIG5vIGJ5dGVzIHJlcXVlc3RlZCEiKTtpZigkPnktMSl0aHJvdyBuZXcgRXJyb3IoIm9ubHkgIit5KyIgYnl0ZXMgYXZhaWxhYmxlISBwcm9ncmFtbWVyIGVycm9yISIpO3ZhciBsPW5ldyBYTUxIdHRwUmVxdWVzdDtpZihsLm9wZW4oIkdFVCIsZywhMSkseSE9PUomJmwuc2V0UmVxdWVzdEhlYWRlcigiUmFuZ2UiLCJieXRlcz0iK3YrIi0iKyQpLGwucmVzcG9uc2VUeXBlPSJhcnJheWJ1ZmZlciIsbC5vdmVycmlkZU1pbWVUeXBlJiZsLm92ZXJyaWRlTWltZVR5cGUoInRleHQvcGxhaW47IGNoYXJzZXQ9eC11c2VyLWRlZmluZWQiKSxsLnNlbmQobnVsbCksIShsLnN0YXR1cz49MjAwJiZsLnN0YXR1czwzMDB8fGwuc3RhdHVzPT09MzA0KSl0aHJvdyBuZXcgRXJyb3IoIkNvdWxkbid0IGxvYWQgIitnKyIuIFN0YXR1czogIitsLnN0YXR1cyk7cmV0dXJuIGwucmVzcG9uc2UhPT12b2lkIDA/bmV3IFVpbnQ4QXJyYXkobC5yZXNwb25zZXx8W10pOkdBKGwucmVzcG9uc2VUZXh0fHwiIiwhMCl9LEJBPXRoaXM7QkEuc2V0RGF0YUdldHRlcih2PT57dmFyICQ9dipKLGw9KHYrMSkqSi0xO2lmKGw9TWF0aC5taW4obCx5LTEpLHR5cGVvZiBCQS5jaHVua3Nbdl0+InUiJiYoQkEuY2h1bmtzW3ZdPW0oJCxsKSksdHlwZW9mIEJBLmNodW5rc1t2XT4idSIpdGhyb3cgbmV3IEVycm9yKCJkb1hIUiBmYWlsZWQhIik7cmV0dXJuIEJBLmNodW5rc1t2XX0pLCh1fHwheSkmJihKPXk9MSx5PXRoaXMuZ2V0dGVyKDApLmxlbmd0aCxKPXksWigiTGF6eUZpbGVzIG9uIGd6aXAgZm9yY2VzIGRvd25sb2FkIG9mIHRoZSB3aG9sZSBmaWxlIHdoZW4gbGVuZ3RoIGlzIGFjY2Vzc2VkIikpLHRoaXMuX2xlbmd0aD15LHRoaXMuX2NodW5rU2l6ZT1KLHRoaXMubGVuZ3RoS25vd249ITB9LHR5cGVvZiBYTUxIdHRwUmVxdWVzdDwidSIpe2lmKCFLQSl0aHJvdyJDYW5ub3QgZG8gc3luY2hyb25vdXMgYmluYXJ5IFhIUnMgb3V0c2lkZSB3ZWJ3b3JrZXJzIGluIG1vZGVybiBicm93c2Vycy4gVXNlIC0tZW1iZWQtZmlsZSBvciAtLXByZWxvYWQtZmlsZSBpbiBlbWNjIjt2YXIgaD1uZXcgUTtPYmplY3QuZGVmaW5lUHJvcGVydGllcyhoLHtsZW5ndGg6e2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmxlbmd0aEtub3dufHx0aGlzLmNhY2hlTGVuZ3RoKCksdGhpcy5fbGVuZ3RofX0sY2h1bmtTaXplOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5sZW5ndGhLbm93bnx8dGhpcy5jYWNoZUxlbmd0aCgpLHRoaXMuX2NodW5rU2l6ZX19fSk7dmFyIGk9e2lzRGV2aWNlOiExLGNvbnRlbnRzOmh9fWVsc2UgdmFyIGk9e2lzRGV2aWNlOiExLHVybDpnfTt2YXIgZT1DLmNyZWF0ZUZpbGUoQSxJLGksQixFKTtpLmNvbnRlbnRzP2UuY29udGVudHM9aS5jb250ZW50czppLnVybCYmKGUuY29udGVudHM9bnVsbCxlLnVybD1pLnVybCksT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZSx7dXNlZEJ5dGVzOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb250ZW50cy5sZW5ndGh9fX0pO3ZhciBGPXt9LGE9T2JqZWN0LmtleXMoZS5zdHJlYW1fb3BzKTthLmZvckVhY2goYz0+e3ZhciByPWUuc3RyZWFtX29wc1tjXTtGW2NdPWZ1bmN0aW9uKCl7cmV0dXJuIEMuZm9yY2VMb2FkRmlsZShlKSxyLmFwcGx5KG51bGwsYXJndW1lbnRzKX19KTtmdW5jdGlvbiBNKGMscix5LFIseCl7dmFyIHU9Yy5ub2RlLmNvbnRlbnRzO2lmKHg+PXUubGVuZ3RoKXJldHVybiAwO3ZhciBKPU1hdGgubWluKHUubGVuZ3RoLXgsUik7aWYodyhKPj0wKSx1LnNsaWNlKWZvcih2YXIgbT0wO208SjttKyspclt5K21dPXVbeCttXTtlbHNlIGZvcih2YXIgbT0wO208SjttKyspclt5K21dPXUuZ2V0KHgrbSk7cmV0dXJuIEp9cmV0dXJuIEYucmVhZD0oYyxyLHksUix4KT0+KEMuZm9yY2VMb2FkRmlsZShlKSxNKGMscix5LFIseCkpLEYubW1hcD0oYyxyLHksUix4KT0+e0MuZm9yY2VMb2FkRmlsZShlKTt2YXIgdT1PQShyKTtpZighdSl0aHJvdyBuZXcgQy5FcnJub0Vycm9yKDQ4KTtyZXR1cm4gTShjLEwsdSxyLHkpLHtwdHI6dSxhbGxvY2F0ZWQ6ITB9fSxlLnN0cmVhbV9vcHM9RixlfSxhYnNvbHV0ZVBhdGgoKXtLKCJGUy5hYnNvbHV0ZVBhdGggaGFzIGJlZW4gcmVtb3ZlZDsgdXNlIFBBVEhfRlMucmVzb2x2ZSBpbnN0ZWFkIil9LGNyZWF0ZUZvbGRlcigpe0soIkZTLmNyZWF0ZUZvbGRlciBoYXMgYmVlbiByZW1vdmVkOyB1c2UgRlMubWtkaXIgaW5zdGVhZCIpfSxjcmVhdGVMaW5rKCl7SygiRlMuY3JlYXRlTGluayBoYXMgYmVlbiByZW1vdmVkOyB1c2UgRlMuc3ltbGluayBpbnN0ZWFkIil9LGpvaW5QYXRoKCl7SygiRlMuam9pblBhdGggaGFzIGJlZW4gcmVtb3ZlZDsgdXNlIFBBVEguam9pbiBpbnN0ZWFkIil9LG1tYXBBbGxvYygpe0soIkZTLm1tYXBBbGxvYyBoYXMgYmVlbiByZXBsYWNlZCBieSB0aGUgdG9wIGxldmVsIGZ1bmN0aW9uIG1tYXBBbGxvYyIpfSxzdGFuZGFyZGl6ZVBhdGgoKXtLKCJGUy5zdGFuZGFyZGl6ZVBhdGggaGFzIGJlZW4gcmVtb3ZlZDsgdXNlIFBBVEgubm9ybWFsaXplIGluc3RlYWQiKX19LFpBPShBLEkpPT4odyh0eXBlb2YgQT09Im51bWJlciIpLEE/eihYLEEsSSk6IiIpLFk9e0RFRkFVTFRfUE9MTE1BU0s6NSxjYWxjdWxhdGVBdChBLEksZyl7aWYoVS5pc0FicyhJKSlyZXR1cm4gSTt2YXIgQjtpZihBPT09LTEwMClCPUMuY3dkKCk7ZWxzZXt2YXIgRT1ZLmdldFN0cmVhbUZyb21GRChBKTtCPUUucGF0aH1pZihJLmxlbmd0aD09MCl7aWYoIWcpdGhyb3cgbmV3IEMuRXJybm9FcnJvcig0NCk7cmV0dXJuIEJ9cmV0dXJuIFUuam9pbjIoQixJKX0sZG9TdGF0KEEsSSxnKXt0cnl7dmFyIEI9QShJKX1jYXRjaChpKXtpZihpJiZpLm5vZGUmJlUubm9ybWFsaXplKEkpIT09VS5ub3JtYWxpemUoQy5nZXRQYXRoKGkubm9kZSkpKXJldHVybi01NDt0aHJvdyBpfW5bZz4+Ml09Qi5kZXYsbltnKzQ+PjJdPUIubW9kZSxrW2crOD4+Ml09Qi5ubGluayxuW2crMTI+PjJdPUIudWlkLG5bZysxNj4+Ml09Qi5naWQsbltnKzIwPj4yXT1CLnJkZXYsZj1bQi5zaXplPj4+MCwocz1CLnNpemUsK01hdGguYWJzKHMpPj0xP3M+MD8rTWF0aC5mbG9vcihzLzQyOTQ5NjcyOTYpPj4+MDp+fitNYXRoLmNlaWwoKHMtKyh+fnM+Pj4wKSkvNDI5NDk2NzI5Nik+Pj4wOjApXSxuW2crMjQ+PjJdPWZbMF0sbltnKzI4Pj4yXT1mWzFdLG5bZyszMj4+Ml09NDA5NixuW2crMzY+PjJdPUIuYmxvY2tzO3ZhciBFPUIuYXRpbWUuZ2V0VGltZSgpLFE9Qi5tdGltZS5nZXRUaW1lKCksaD1CLmN0aW1lLmdldFRpbWUoKTtyZXR1cm4gZj1bTWF0aC5mbG9vcihFLzFlMyk+Pj4wLChzPU1hdGguZmxvb3IoRS8xZTMpLCtNYXRoLmFicyhzKT49MT9zPjA/K01hdGguZmxvb3Iocy80Mjk0OTY3Mjk2KT4+PjA6fn4rTWF0aC5jZWlsKChzLSsofn5zPj4+MCkpLzQyOTQ5NjcyOTYpPj4+MDowKV0sbltnKzQwPj4yXT1mWzBdLG5bZys0ND4+Ml09ZlsxXSxrW2crNDg+PjJdPUUlMWUzKjFlMyxmPVtNYXRoLmZsb29yKFEvMWUzKT4+PjAsKHM9TWF0aC5mbG9vcihRLzFlMyksK01hdGguYWJzKHMpPj0xP3M+MD8rTWF0aC5mbG9vcihzLzQyOTQ5NjcyOTYpPj4+MDp+fitNYXRoLmNlaWwoKHMtKyh+fnM+Pj4wKSkvNDI5NDk2NzI5Nik+Pj4wOjApXSxuW2crNTY+PjJdPWZbMF0sbltnKzYwPj4yXT1mWzFdLGtbZys2ND4+Ml09USUxZTMqMWUzLGY9W01hdGguZmxvb3IoaC8xZTMpPj4+MCwocz1NYXRoLmZsb29yKGgvMWUzKSwrTWF0aC5hYnMocyk+PTE/cz4wPytNYXRoLmZsb29yKHMvNDI5NDk2NzI5Nik+Pj4wOn5+K01hdGguY2VpbCgocy0rKH5+cz4+PjApKS80Mjk0OTY3Mjk2KT4+PjA6MCldLG5bZys3Mj4+Ml09ZlswXSxuW2crNzY+PjJdPWZbMV0sa1tnKzgwPj4yXT1oJTFlMyoxZTMsZj1bQi5pbm8+Pj4wLChzPUIuaW5vLCtNYXRoLmFicyhzKT49MT9zPjA/K01hdGguZmxvb3Iocy80Mjk0OTY3Mjk2KT4+PjA6fn4rTWF0aC5jZWlsKChzLSsofn5zPj4+MCkpLzQyOTQ5NjcyOTYpPj4+MDowKV0sbltnKzg4Pj4yXT1mWzBdLG5bZys5Mj4+Ml09ZlsxXSwwfSxkb01zeW5jKEEsSSxnLEIsRSl7aWYoIUMuaXNGaWxlKEkubm9kZS5tb2RlKSl0aHJvdyBuZXcgQy5FcnJub0Vycm9yKDQzKTtpZihCJjIpcmV0dXJuIDA7dmFyIFE9WC5zbGljZShBLEErZyk7Qy5tc3luYyhJLFEsRSxnLEIpfSx2YXJhcmdzOnZvaWQgMCxnZXQoKXt3KFkudmFyYXJncyE9bnVsbCk7dmFyIEE9blsrWS52YXJhcmdzPj4yXTtyZXR1cm4gWS52YXJhcmdzKz00LEF9LGdldHAoKXtyZXR1cm4gWS5nZXQoKX0sZ2V0U3RyKEEpe3ZhciBJPVpBKEEpO3JldHVybiBJfSxnZXRTdHJlYW1Gcm9tRkQoQSl7dmFyIEk9Qy5nZXRTdHJlYW1DaGVja2VkKEEpO3JldHVybiBJfX07ZnVuY3Rpb24gcEkoQSxJLGcpe1kudmFyYXJncz1nO3RyeXt2YXIgQj1ZLmdldFN0cmVhbUZyb21GRChBKTtzd2l0Y2goSSl7Y2FzZSAwOnt2YXIgRT1ZLmdldCgpO2lmKEU8MClyZXR1cm4tMjg7Zm9yKDtDLnN0cmVhbXNbRV07KUUrKzt2YXIgUTtyZXR1cm4gUT1DLmNyZWF0ZVN0cmVhbShCLEUpLFEuZmR9Y2FzZSAxOmNhc2UgMjpyZXR1cm4gMDtjYXNlIDM6cmV0dXJuIEIuZmxhZ3M7Y2FzZSA0Ont2YXIgRT1ZLmdldCgpO3JldHVybiBCLmZsYWdzfD1FLDB9Y2FzZSA1Ont2YXIgRT1ZLmdldHAoKSxoPTA7cmV0dXJuIFZbRStoPj4xXT0yLDB9Y2FzZSA2OmNhc2UgNzpyZXR1cm4gMDtjYXNlIDE2OmNhc2UgODpyZXR1cm4tMjg7Y2FzZSA5OnJldHVybiBLSSgyOCksLTE7ZGVmYXVsdDpyZXR1cm4tMjh9fWNhdGNoKGkpe2lmKHR5cGVvZiBDPiJ1Inx8aS5uYW1lIT09IkVycm5vRXJyb3IiKXRocm93IGk7cmV0dXJuLWkuZXJybm99fWZ1bmN0aW9uIHZJKEEsSSxnKXtZLnZhcmFyZ3M9Zzt0cnl7dmFyIEI9WS5nZXRTdHJlYW1Gcm9tRkQoQSk7c3dpdGNoKEkpe2Nhc2UgMjE1MDk6cmV0dXJuIEIudHR5PzA6LTU5O2Nhc2UgMjE1MDU6e2lmKCFCLnR0eSlyZXR1cm4tNTk7aWYoQi50dHkub3BzLmlvY3RsX3RjZ2V0cyl7dmFyIEU9Qi50dHkub3BzLmlvY3RsX3RjZ2V0cyhCKSxRPVkuZ2V0cCgpO25bUT4+Ml09RS5jX2lmbGFnfHwwLG5bUSs0Pj4yXT1FLmNfb2ZsYWd8fDAsbltRKzg+PjJdPUUuY19jZmxhZ3x8MCxuW1ErMTI+PjJdPUUuY19sZmxhZ3x8MDtmb3IodmFyIGg9MDtoPDMyO2grKylMW1EraCsxNz4+MF09RS5jX2NjW2hdfHwwO3JldHVybiAwfXJldHVybiAwfWNhc2UgMjE1MTA6Y2FzZSAyMTUxMTpjYXNlIDIxNTEyOnJldHVybiBCLnR0eT8wOi01OTtjYXNlIDIxNTA2OmNhc2UgMjE1MDc6Y2FzZSAyMTUwODp7aWYoIUIudHR5KXJldHVybi01OTtpZihCLnR0eS5vcHMuaW9jdGxfdGNzZXRzKXtmb3IodmFyIFE9WS5nZXRwKCksaT1uW1E+PjJdLGU9bltRKzQ+PjJdLEY9bltRKzg+PjJdLGE9bltRKzEyPj4yXSxNPVtdLGg9MDtoPDMyO2grKylNLnB1c2goTFtRK2grMTc+PjBdKTtyZXR1cm4gQi50dHkub3BzLmlvY3RsX3Rjc2V0cyhCLnR0eSxJLHtjX2lmbGFnOmksY19vZmxhZzplLGNfY2ZsYWc6RixjX2xmbGFnOmEsY19jYzpNfSl9cmV0dXJuIDB9Y2FzZSAyMTUxOTp7aWYoIUIudHR5KXJldHVybi01OTt2YXIgUT1ZLmdldHAoKTtyZXR1cm4gbltRPj4yXT0wLDB9Y2FzZSAyMTUyMDpyZXR1cm4gQi50dHk/LTI4Oi01OTtjYXNlIDIxNTMxOnt2YXIgUT1ZLmdldHAoKTtyZXR1cm4gQy5pb2N0bChCLEksUSl9Y2FzZSAyMTUyMzp7aWYoIUIudHR5KXJldHVybi01OTtpZihCLnR0eS5vcHMuaW9jdGxfdGlvY2d3aW5zeil7dmFyIGM9Qi50dHkub3BzLmlvY3RsX3Rpb2Nnd2luc3ooQi50dHkpLFE9WS5nZXRwKCk7VltRPj4xXT1jWzBdLFZbUSsyPj4xXT1jWzFdfXJldHVybiAwfWNhc2UgMjE1MjQ6cmV0dXJuIEIudHR5PzA6LTU5O2Nhc2UgMjE1MTU6cmV0dXJuIEIudHR5PzA6LTU5O2RlZmF1bHQ6cmV0dXJuLTI4fX1jYXRjaChyKXtpZih0eXBlb2YgQz4idSJ8fHIubmFtZSE9PSJFcnJub0Vycm9yIil0aHJvdyByO3JldHVybi1yLmVycm5vfX1mdW5jdGlvbiBUSShBLEksZyxCKXtZLnZhcmFyZ3M9Qjt0cnl7ST1ZLmdldFN0cihJKSxJPVkuY2FsY3VsYXRlQXQoQSxJKTt2YXIgRT1CP1kuZ2V0KCk6MDtyZXR1cm4gQy5vcGVuKEksZyxFKS5mZH1jYXRjaChRKXtpZih0eXBlb2YgQz4idSJ8fFEubmFtZSE9PSJFcnJub0Vycm9yIil0aHJvdyBRO3JldHVybi1RLmVycm5vfX12YXIgUEk9KEEsSSxnKT0+WC5jb3B5V2l0aGluKEEsSSxJK2cpLHFJPSgpPT4yMTQ3NDgzNjQ4LHhJPUE9Pnt2YXIgST1JQS5idWZmZXIsZz0oQS1JLmJ5dGVMZW5ndGgrNjU1MzUpLzY1NTM2O3RyeXtyZXR1cm4gSUEuZ3JvdyhnKSxOQSgpLDF9Y2F0Y2goQil7TihgZ3Jvd01lbW9yeTogQXR0ZW1wdGVkIHRvIGdyb3cgaGVhcCBmcm9tICR7SS5ieXRlTGVuZ3RofSBieXRlcyB0byAke0F9IGJ5dGVzLCBidXQgZ290IGVycm9yOiAke0J9YCl9fSxPST1BPT57dmFyIEk9WC5sZW5ndGg7QT4+Pj0wLHcoQT5JKTt2YXIgZz1xSSgpO2lmKEE+ZylyZXR1cm4gTihgQ2Fubm90IGVubGFyZ2UgbWVtb3J5LCByZXF1ZXN0ZWQgJHtBfSBieXRlcywgYnV0IHRoZSBsaW1pdCBpcyAke2d9IGJ5dGVzIWApLCExO2Zvcih2YXIgQj0oZSxGKT0+ZSsoRi1lJUYpJUYsRT0xO0U8PTQ7RSo9Mil7dmFyIFE9SSooMSsuMi9FKTtRPU1hdGgubWluKFEsQSsxMDA2NjMyOTYpO3ZhciBoPU1hdGgubWluKGcsQihNYXRoLm1heChBLFEpLDY1NTM2KSksaT14SShoKTtpZihpKXJldHVybiEwfXJldHVybiBOKGBGYWlsZWQgdG8gZ3JvdyB0aGUgaGVhcCBmcm9tICR7SX0gYnl0ZXMgdG8gJHtofSBieXRlcywgbm90IGVub3VnaCBtZW1vcnkhYCksITF9O2Z1bmN0aW9uIFdJKEEpe3RyeXt2YXIgST1ZLmdldFN0cmVhbUZyb21GRChBKTtyZXR1cm4gQy5jbG9zZShJKSwwfWNhdGNoKGcpe2lmKHR5cGVvZiBDPiJ1Inx8Zy5uYW1lIT09IkVycm5vRXJyb3IiKXRocm93IGc7cmV0dXJuIGcuZXJybm99fXZhciBaST0oQSxJLGcsQik9Pntmb3IodmFyIEU9MCxRPTA7UTxnO1ErKyl7dmFyIGg9a1tJPj4yXSxpPWtbSSs0Pj4yXTtJKz04O3ZhciBlPUMucmVhZChBLEwsaCxpLEIpO2lmKGU8MClyZXR1cm4tMTtpZihFKz1lLGU8aSlicmVhazt0eXBlb2YgQjwidSImJihCKz1lKX1yZXR1cm4gRX07ZnVuY3Rpb24gWEkoQSxJLGcsQil7dHJ5e3ZhciBFPVkuZ2V0U3RyZWFtRnJvbUZEKEEpLFE9WkkoRSxJLGcpO3JldHVybiBrW0I+PjJdPVEsMH1jYXRjaChoKXtpZih0eXBlb2YgQz4idSJ8fGgubmFtZSE9PSJFcnJub0Vycm9yIil0aHJvdyBoO3JldHVybiBoLmVycm5vfX12YXIgVkk9KEEsSSk9Pih3KEE9PUE+Pj4wfHxBPT0oQXwwKSksdyhJPT09KEl8MCkpLEkrMjA5NzE1Mj4+PjA8NDE5NDMwNS0hIUE/KEE+Pj4wKStJKjQyOTQ5NjcyOTY6TmFOKTtmdW5jdGlvbiBqSShBLEksZyxCLEUpe3ZhciBRPVZJKEksZyk7dHJ5e2lmKGlzTmFOKFEpKXJldHVybiA2MTt2YXIgaD1ZLmdldFN0cmVhbUZyb21GRChBKTtyZXR1cm4gQy5sbHNlZWsoaCxRLEIpLGY9W2gucG9zaXRpb24+Pj4wLChzPWgucG9zaXRpb24sK01hdGguYWJzKHMpPj0xP3M+MD8rTWF0aC5mbG9vcihzLzQyOTQ5NjcyOTYpPj4+MDp+fitNYXRoLmNlaWwoKHMtKyh+fnM+Pj4wKSkvNDI5NDk2NzI5Nik+Pj4wOjApXSxuW0U+PjJdPWZbMF0sbltFKzQ+PjJdPWZbMV0saC5nZXRkZW50cyYmUT09PTAmJkI9PT0wJiYoaC5nZXRkZW50cz1udWxsKSwwfWNhdGNoKGkpe2lmKHR5cGVvZiBDPiJ1Inx8aS5uYW1lIT09IkVycm5vRXJyb3IiKXRocm93IGk7cmV0dXJuIGkuZXJybm99fXZhciBfST0oQSxJLGcsQik9Pntmb3IodmFyIEU9MCxRPTA7UTxnO1ErKyl7dmFyIGg9a1tJPj4yXSxpPWtbSSs0Pj4yXTtJKz04O3ZhciBlPUMud3JpdGUoQSxMLGgsaSxCKTtpZihlPDApcmV0dXJuLTE7RSs9ZSx0eXBlb2YgQjwidSImJihCKz1lKX1yZXR1cm4gRX07ZnVuY3Rpb24gekkoQSxJLGcsQil7dHJ5e3ZhciBFPVkuZ2V0U3RyZWFtRnJvbUZEKEEpLFE9X0koRSxJLGcpO3JldHVybiBrW0I+PjJdPVEsMH1jYXRjaChoKXtpZih0eXBlb2YgQz4idSJ8fGgubmFtZSE9PSJFcnJub0Vycm9yIil0aHJvdyBoO3JldHVybiBoLmVycm5vfX12YXIgWEE9ZnVuY3Rpb24oQSxJLGcsQil7QXx8KEE9dGhpcyksdGhpcy5wYXJlbnQ9QSx0aGlzLm1vdW50PUEubW91bnQsdGhpcy5tb3VudGVkPW51bGwsdGhpcy5pZD1DLm5leHRJbm9kZSsrLHRoaXMubmFtZT1JLHRoaXMubW9kZT1nLHRoaXMubm9kZV9vcHM9e30sdGhpcy5zdHJlYW1fb3BzPXt9LHRoaXMucmRldj1CfSxvQT0zNjUsZUE9MTQ2O09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFhBLnByb3RvdHlwZSx7cmVhZDp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuKHRoaXMubW9kZSZvQSk9PT1vQX0sc2V0OmZ1bmN0aW9uKEEpe0E/dGhpcy5tb2RlfD1vQTp0aGlzLm1vZGUmPX5vQX19LHdyaXRlOntnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4odGhpcy5tb2RlJmVBKT09PWVBfSxzZXQ6ZnVuY3Rpb24oQSl7QT90aGlzLm1vZGV8PWVBOnRoaXMubW9kZSY9fmVBfX0saXNGb2xkZXI6e2dldDpmdW5jdGlvbigpe3JldHVybiBDLmlzRGlyKHRoaXMubW9kZSl9fSxpc0RldmljZTp7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEMuaXNDaHJkZXYodGhpcy5tb2RlKX19fSksQy5GU05vZGU9WEEsQy5jcmVhdGVQcmVsb2FkZWRGaWxlPUxJLEMuc3RhdGljSW5pdCgpO2Z1bmN0aW9uICRJKCl7TUkoImZldGNoU2V0dGluZ3MiKX12YXIgVkE9e19fc3lzY2FsbF9mY250bDY0OnBJLF9fc3lzY2FsbF9pb2N0bDp2SSxfX3N5c2NhbGxfb3BlbmF0OlRJLGVtc2NyaXB0ZW5fbWVtY3B5X2pzOlBJLGVtc2NyaXB0ZW5fcmVzaXplX2hlYXA6T0ksZmRfY2xvc2U6V0ksZmRfcmVhZDpYSSxmZF9zZWVrOmpJLGZkX3dyaXRlOnpJfSxwPVVJKCksUmc9SCgiX193YXNtX2NhbGxfY3RvcnMiKSxMZz1vLl9tYWxsb2M9SCgibWFsbG9jIiksSmc9by5fZnJlZT1IKCJmcmVlIiksdWc9by5fbWlkX3Nvbmdfc3RhcnQ9SCgibWlkX3Nvbmdfc3RhcnQiKSxtZz1vLl9taWRfc29uZ19zZWVrPUgoIm1pZF9zb25nX3NlZWsiKSxiZz1vLl9taWRfc29uZ19nZXRfdG90YWxfdGltZT1IKCJtaWRfc29uZ19nZXRfdG90YWxfdGltZSIpLHBnPW8uX21pZF9zb25nX2dldF90aW1lPUgoIm1pZF9zb25nX2dldF90aW1lIiksdmc9by5fbWlkX3NvbmdfcmVhZF93YXZlPUgoIm1pZF9zb25nX3JlYWRfd2F2ZSIpLFRnPW8uX21pZF9pc3RyZWFtX29wZW5fbWVtPUgoIm1pZF9pc3RyZWFtX29wZW5fbWVtIiksUGc9by5fbWlkX2lzdHJlYW1fY2xvc2U9SCgibWlkX2lzdHJlYW1fY2xvc2UiKSxxZz1vLl9taWRfZXhpdD1IKCJtaWRfZXhpdCIpLHhnPW8uX21pZF9pbml0PUgoIm1pZF9pbml0IiksT2c9by5fbWlkX3NvbmdfbG9hZD1IKCJtaWRfc29uZ19sb2FkIiksV2c9by5fbWlkX3NvbmdfZnJlZT1IKCJtaWRfc29uZ19mcmVlIiksWmc9by5fbWlkX2FsbG9jX29wdGlvbnM9SCgibWlkX2FsbG9jX29wdGlvbnMiKSxYZz1vLl9taWRfZ2V0X2xvYWRfcmVxdWVzdF9jb3VudD1IKCJtaWRfZ2V0X2xvYWRfcmVxdWVzdF9jb3VudCIpLFZnPW8uX21pZF9nZXRfbG9hZF9yZXF1ZXN0PUgoIm1pZF9nZXRfbG9hZF9yZXF1ZXN0IiksQWc9SCgiX19lcnJub19sb2NhdGlvbiIpLGpBPW8uX2ZmbHVzaD1IKCJmZmx1c2giKSxJZz1wLmVtc2NyaXB0ZW5fc3RhY2tfaW5pdCxqZz1wLmVtc2NyaXB0ZW5fc3RhY2tfZ2V0X2ZyZWUsX2c9cC5lbXNjcmlwdGVuX3N0YWNrX2dldF9iYXNlLF9BPXAuZW1zY3JpcHRlbl9zdGFja19nZXRfZW5kLHpnPUgoInN0YWNrU2F2ZSIpLCRnPUgoInN0YWNrUmVzdG9yZSIpLEFDPUgoInN0YWNrQWxsb2MiKSxJQz1wLmVtc2NyaXB0ZW5fc3RhY2tfZ2V0X2N1cnJlbnQsZ0M9by5keW5DYWxsX2ppamk9SCgiZHluQ2FsbF9qaWppIik7by5VVEY4VG9TdHJpbmc9WkEsby5GUz1DO3ZhciBnZz1bIndyaXRlSTUzVG9JNjQiLCJ3cml0ZUk1M1RvSTY0Q2xhbXBlZCIsIndyaXRlSTUzVG9JNjRTaWduYWxpbmciLCJ3cml0ZUk1M1RvVTY0Q2xhbXBlZCIsIndyaXRlSTUzVG9VNjRTaWduYWxpbmciLCJyZWFkSTUzRnJvbUk2NCIsInJlYWRJNTNGcm9tVTY0IiwiY29udmVydEkzMlBhaXJUb0k1MyIsImNvbnZlcnRVMzJQYWlyVG9JNTMiLCJleGl0SlMiLCJpc0xlYXBZZWFyIiwieWRheUZyb21EYXRlIiwiYXJyYXlTdW0iLCJhZGREYXlzIiwiaW5ldFB0b240IiwiaW5ldE50b3A0IiwiaW5ldFB0b242IiwiaW5ldE50b3A2IiwicmVhZFNvY2thZGRyIiwid3JpdGVTb2NrYWRkciIsImdldEhvc3RCeU5hbWUiLCJnZXRDYWxsc3RhY2siLCJlbXNjcmlwdGVuTG9nIiwiY29udmVydFBDdG9Tb3VyY2VMb2NhdGlvbiIsInJlYWRFbUFzbUFyZ3MiLCJqc3RvaV9xIiwianN0b2lfcyIsImdldEV4ZWN1dGFibGVOYW1lIiwibGlzdGVuT25jZSIsImF1dG9SZXN1bWVBdWRpb0NvbnRleHQiLCJkeW5DYWxsTGVnYWN5IiwiZ2V0RHluQ2FsbGVyIiwiZHluQ2FsbCIsImhhbmRsZUV4Y2VwdGlvbiIsImtlZXBSdW50aW1lQWxpdmUiLCJydW50aW1lS2VlcGFsaXZlUHVzaCIsInJ1bnRpbWVLZWVwYWxpdmVQb3AiLCJjYWxsVXNlckNhbGxiYWNrIiwibWF5YmVFeGl0IiwiYXNtanNNYW5nbGUiLCJoYW5kbGVBbGxvY2F0b3JJbml0IiwiSGFuZGxlQWxsb2NhdG9yIiwiZ2V0TmF0aXZlVHlwZVNpemUiLCJTVEFDS19TSVpFIiwiU1RBQ0tfQUxJR04iLCJQT0lOVEVSX1NJWkUiLCJBU1NFUlRJT05TIiwiZ2V0Q0Z1bmMiLCJjY2FsbCIsImN3cmFwIiwidWxlYjEyOEVuY29kZSIsInNpZ1RvV2FzbVR5cGVzIiwiZ2VuZXJhdGVGdW5jVHlwZSIsImNvbnZlcnRKc0Z1bmN0aW9uVG9XYXNtIiwiZ2V0RW1wdHlUYWJsZVNsb3QiLCJ1cGRhdGVUYWJsZU1hcCIsImdldEZ1bmN0aW9uQWRkcmVzcyIsImFkZEZ1bmN0aW9uIiwicmVtb3ZlRnVuY3Rpb24iLCJyZWFsbHlOZWdhdGl2ZSIsInVuU2lnbiIsInN0ckxlbiIsInJlU2lnbiIsImZvcm1hdFN0cmluZyIsInN0cmluZ1RvVVRGOCIsImludEFycmF5VG9TdHJpbmciLCJBc2NpaVRvU3RyaW5nIiwic3RyaW5nVG9Bc2NpaSIsIlVURjE2VG9TdHJpbmciLCJzdHJpbmdUb1VURjE2IiwibGVuZ3RoQnl0ZXNVVEYxNiIsIlVURjMyVG9TdHJpbmciLCJzdHJpbmdUb1VURjMyIiwibGVuZ3RoQnl0ZXNVVEYzMiIsInN0cmluZ1RvTmV3VVRGOCIsInN0cmluZ1RvVVRGOE9uU3RhY2siLCJ3cml0ZUFycmF5VG9NZW1vcnkiLCJyZWdpc3RlcktleUV2ZW50Q2FsbGJhY2siLCJtYXliZUNTdHJpbmdUb0pzU3RyaW5nIiwiZmluZEV2ZW50VGFyZ2V0IiwiZmluZENhbnZhc0V2ZW50VGFyZ2V0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiZmlsbE1vdXNlRXZlbnREYXRhIiwicmVnaXN0ZXJNb3VzZUV2ZW50Q2FsbGJhY2siLCJyZWdpc3RlcldoZWVsRXZlbnRDYWxsYmFjayIsInJlZ2lzdGVyVWlFdmVudENhbGxiYWNrIiwicmVnaXN0ZXJGb2N1c0V2ZW50Q2FsbGJhY2siLCJmaWxsRGV2aWNlT3JpZW50YXRpb25FdmVudERhdGEiLCJyZWdpc3RlckRldmljZU9yaWVudGF0aW9uRXZlbnRDYWxsYmFjayIsImZpbGxEZXZpY2VNb3Rpb25FdmVudERhdGEiLCJyZWdpc3RlckRldmljZU1vdGlvbkV2ZW50Q2FsbGJhY2siLCJzY3JlZW5PcmllbnRhdGlvbiIsImZpbGxPcmllbnRhdGlvbkNoYW5nZUV2ZW50RGF0YSIsInJlZ2lzdGVyT3JpZW50YXRpb25DaGFuZ2VFdmVudENhbGxiYWNrIiwiZmlsbEZ1bGxzY3JlZW5DaGFuZ2VFdmVudERhdGEiLCJyZWdpc3RlckZ1bGxzY3JlZW5DaGFuZ2VFdmVudENhbGxiYWNrIiwiSlNFdmVudHNfcmVxdWVzdEZ1bGxzY3JlZW4iLCJKU0V2ZW50c19yZXNpemVDYW52YXNGb3JGdWxsc2NyZWVuIiwicmVnaXN0ZXJSZXN0b3JlT2xkU3R5bGUiLCJoaWRlRXZlcnl0aGluZ0V4Y2VwdEdpdmVuRWxlbWVudCIsInJlc3RvcmVIaWRkZW5FbGVtZW50cyIsInNldExldHRlcmJveCIsInNvZnRGdWxsc2NyZWVuUmVzaXplV2ViR0xSZW5kZXJUYXJnZXQiLCJkb1JlcXVlc3RGdWxsc2NyZWVuIiwiZmlsbFBvaW50ZXJsb2NrQ2hhbmdlRXZlbnREYXRhIiwicmVnaXN0ZXJQb2ludGVybG9ja0NoYW5nZUV2ZW50Q2FsbGJhY2siLCJyZWdpc3RlclBvaW50ZXJsb2NrRXJyb3JFdmVudENhbGxiYWNrIiwicmVxdWVzdFBvaW50ZXJMb2NrIiwiZmlsbFZpc2liaWxpdHlDaGFuZ2VFdmVudERhdGEiLCJyZWdpc3RlclZpc2liaWxpdHlDaGFuZ2VFdmVudENhbGxiYWNrIiwicmVnaXN0ZXJUb3VjaEV2ZW50Q2FsbGJhY2siLCJmaWxsR2FtZXBhZEV2ZW50RGF0YSIsInJlZ2lzdGVyR2FtZXBhZEV2ZW50Q2FsbGJhY2siLCJyZWdpc3RlckJlZm9yZVVubG9hZEV2ZW50Q2FsbGJhY2siLCJmaWxsQmF0dGVyeUV2ZW50RGF0YSIsImJhdHRlcnkiLCJyZWdpc3RlckJhdHRlcnlFdmVudENhbGxiYWNrIiwic2V0Q2FudmFzRWxlbWVudFNpemUiLCJnZXRDYW52YXNFbGVtZW50U2l6ZSIsImpzU3RhY2tUcmFjZSIsInN0YWNrVHJhY2UiLCJnZXRFbnZTdHJpbmdzIiwiY2hlY2tXYXNpQ2xvY2siLCJ3YXNpUmlnaHRzVG9NdXNsT0ZsYWdzIiwid2FzaU9GbGFnc1RvTXVzbE9GbGFncyIsImNyZWF0ZUR5bmNhbGxXcmFwcGVyIiwic2FmZVNldFRpbWVvdXQiLCJzZXRJbW1lZGlhdGVXcmFwcGVkIiwiY2xlYXJJbW1lZGlhdGVXcmFwcGVkIiwicG9seWZpbGxTZXRJbW1lZGlhdGUiLCJnZXRQcm9taXNlIiwibWFrZVByb21pc2UiLCJpZHNUb1Byb21pc2VzIiwibWFrZVByb21pc2VDYWxsYmFjayIsIkV4Y2VwdGlvbkluZm8iLCJmaW5kTWF0Y2hpbmdDYXRjaCIsInNldE1haW5Mb29wIiwiZ2V0U29ja2V0RnJvbUZEIiwiZ2V0U29ja2V0QWRkcmVzcyIsIkZTX3VubGluayIsIkZTX21rZGlyVHJlZSIsIl9zZXROZXR3b3JrQ2FsbGJhY2siLCJoZWFwT2JqZWN0Rm9yV2ViR0xUeXBlIiwiaGVhcEFjY2Vzc1NoaWZ0Rm9yV2ViR0xIZWFwIiwid2ViZ2xfZW5hYmxlX0FOR0xFX2luc3RhbmNlZF9hcnJheXMiLCJ3ZWJnbF9lbmFibGVfT0VTX3ZlcnRleF9hcnJheV9vYmplY3QiLCJ3ZWJnbF9lbmFibGVfV0VCR0xfZHJhd19idWZmZXJzIiwid2ViZ2xfZW5hYmxlX1dFQkdMX211bHRpX2RyYXciLCJlbXNjcmlwdGVuV2ViR0xHZXQiLCJjb21wdXRlVW5wYWNrQWxpZ25lZEltYWdlU2l6ZSIsImNvbG9yQ2hhbm5lbHNJbkdsVGV4dHVyZUZvcm1hdCIsImVtc2NyaXB0ZW5XZWJHTEdldFRleFBpeGVsRGF0YSIsIl9fZ2xHZW5PYmplY3QiLCJlbXNjcmlwdGVuV2ViR0xHZXRVbmlmb3JtIiwid2ViZ2xHZXRVbmlmb3JtTG9jYXRpb24iLCJ3ZWJnbFByZXBhcmVVbmlmb3JtTG9jYXRpb25zQmVmb3JlRmlyc3RVc2UiLCJ3ZWJnbEdldExlZnRCcmFjZVBvcyIsImVtc2NyaXB0ZW5XZWJHTEdldFZlcnRleEF0dHJpYiIsIl9fZ2xHZXRBY3RpdmVBdHRyaWJPclVuaWZvcm0iLCJ3cml0ZUdMQXJyYXkiLCJyZWdpc3RlcldlYkdsRXZlbnRDYWxsYmFjayIsInJ1bkFuZEFib3J0SWZFcnJvciIsIlNETF91bmljb2RlIiwiU0RMX3R0ZkNvbnRleHQiLCJTRExfYXVkaW8iLCJBTExPQ19OT1JNQUwiLCJBTExPQ19TVEFDSyIsImFsbG9jYXRlIiwid3JpdGVTdHJpbmdUb01lbW9yeSIsIndyaXRlQXNjaWlUb01lbW9yeSJdO2dnLmZvckVhY2goWUkpO3ZhciBDZz1bInJ1biIsImFkZE9uUHJlUnVuIiwiYWRkT25Jbml0IiwiYWRkT25QcmVNYWluIiwiYWRkT25FeGl0IiwiYWRkT25Qb3N0UnVuIiwiYWRkUnVuRGVwZW5kZW5jeSIsInJlbW92ZVJ1bkRlcGVuZGVuY3kiLCJGU19jcmVhdGVGb2xkZXIiLCJGU19jcmVhdGVQYXRoIiwiRlNfY3JlYXRlTGF6eUZpbGUiLCJGU19jcmVhdGVMaW5rIiwiRlNfY3JlYXRlRGV2aWNlIiwiRlNfcmVhZEZpbGUiLCJvdXQiLCJlcnIiLCJjYWxsTWFpbiIsImFib3J0Iiwid2FzbU1lbW9yeSIsIndhc21FeHBvcnRzIiwic3RhY2tBbGxvYyIsInN0YWNrU2F2ZSIsInN0YWNrUmVzdG9yZSIsImdldFRlbXBSZXQwIiwic2V0VGVtcFJldDAiLCJ3cml0ZVN0YWNrQ29va2llIiwiY2hlY2tTdGFja0Nvb2tpZSIsImludEFycmF5RnJvbUJhc2U2NCIsInRyeVBhcnNlQXNEYXRhVVJJIiwiY29udmVydEkzMlBhaXJUb0k1M0NoZWNrZWQiLCJwdHJUb1N0cmluZyIsInplcm9NZW1vcnkiLCJnZXRIZWFwTWF4IiwiZ3Jvd01lbW9yeSIsIkVOViIsIk1PTlRIX0RBWVNfUkVHVUxBUiIsIk1PTlRIX0RBWVNfTEVBUCIsIk1PTlRIX0RBWVNfUkVHVUxBUl9DVU1VTEFUSVZFIiwiTU9OVEhfREFZU19MRUFQX0NVTVVMQVRJVkUiLCJFUlJOT19DT0RFUyIsIkVSUk5PX01FU1NBR0VTIiwic2V0RXJyTm8iLCJETlMiLCJQcm90b2NvbHMiLCJTb2NrZXRzIiwiaW5pdFJhbmRvbUZpbGwiLCJyYW5kb21GaWxsIiwidGltZXJzIiwid2Fybk9uY2UiLCJVTldJTkRfQ0FDSEUiLCJyZWFkRW1Bc21BcmdzQXJyYXkiLCJhc3luY0xvYWQiLCJhbGlnbk1lbW9yeSIsIm1tYXBBbGxvYyIsIndhc21UYWJsZSIsIm5vRXhpdFJ1bnRpbWUiLCJmcmVlVGFibGVJbmRleGVzIiwiZnVuY3Rpb25zSW5UYWJsZU1hcCIsInNldFZhbHVlIiwiZ2V0VmFsdWUiLCJQQVRIIiwiUEFUSF9GUyIsIlVURjhEZWNvZGVyIiwiVVRGOEFycmF5VG9TdHJpbmciLCJzdHJpbmdUb1VURjhBcnJheSIsImxlbmd0aEJ5dGVzVVRGOCIsImludEFycmF5RnJvbVN0cmluZyIsIlVURjE2RGVjb2RlciIsIkpTRXZlbnRzIiwic3BlY2lhbEhUTUxUYXJnZXRzIiwiY3VycmVudEZ1bGxzY3JlZW5TdHJhdGVneSIsInJlc3RvcmVPbGRXaW5kb3dlZFN0eWxlIiwiZGVtYW5nbGUiLCJkZW1hbmdsZUFsbCIsIkV4aXRTdGF0dXMiLCJkb1JlYWR2IiwiZG9Xcml0ZXYiLCJwcm9taXNlTWFwIiwidW5jYXVnaHRFeGNlcHRpb25Db3VudCIsImV4Y2VwdGlvbkxhc3QiLCJleGNlcHRpb25DYXVnaHQiLCJCcm93c2VyIiwid2dldCIsIlNZU0NBTExTIiwicHJlbG9hZFBsdWdpbnMiLCJGU19jcmVhdGVQcmVsb2FkZWRGaWxlIiwiRlNfbW9kZVN0cmluZ1RvRmxhZ3MiLCJGU19nZXRNb2RlIiwiRlNfc3RkaW5fZ2V0Q2hhcl9idWZmZXIiLCJGU19zdGRpbl9nZXRDaGFyIiwiRlNfY3JlYXRlRGF0YUZpbGUiLCJNRU1GUyIsIlRUWSIsIlBJUEVGUyIsIlNPQ0tGUyIsInRlbXBGaXhlZExlbmd0aEFycmF5IiwibWluaVRlbXBXZWJHTEZsb2F0QnVmZmVycyIsIm1pbmlUZW1wV2ViR0xJbnRCdWZmZXJzIiwiR0wiLCJlbXNjcmlwdGVuX3dlYmdsX3Bvd2VyX3ByZWZlcmVuY2VzIiwiQUwiLCJHTFVUIiwiRUdMIiwiR0xFVyIsIklEQlN0b3JlIiwiU0RMIiwiU0RMX2dmeCIsImFsbG9jYXRlVVRGOCIsImFsbG9jYXRlVVRGOE9uU3RhY2siXTtDZy5mb3JFYWNoKHZBKTt2YXIgU0E7Z0E9ZnVuY3Rpb24gQSgpe1NBfHx6QSgpLFNBfHwoZ0E9QSl9O2Z1bmN0aW9uIEJnKCl7SWcoKSx0SSgpfWZ1bmN0aW9uIHpBKCl7aWYoTz4wfHwoQmcoKSxGSSgpLE8+MCkpcmV0dXJuO2Z1bmN0aW9uIEEoKXtTQXx8KFNBPSEwLG8uY2FsbGVkUnVuPSEwLCFoQSYmKHNJKCksZChvKSxvLm9uUnVudGltZUluaXRpYWxpemVkJiZvLm9uUnVudGltZUluaXRpYWxpemVkKCksdyghby5fbWFpbiwnY29tcGlsZWQgd2l0aG91dCBhIG1haW4sIGJ1dCBvbmUgaXMgcHJlc2VudC4gaWYgeW91IGFkZGVkIGl0IGZyb20gSlMsIHVzZSBNb2R1bGVbIm9uUnVudGltZUluaXRpYWxpemVkIl0nKSxhSSgpKSl9by5zZXRTdGF0dXM/KG8uc2V0U3RhdHVzKCJSdW5uaW5nLi4uIiksc2V0VGltZW91dChmdW5jdGlvbigpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXtvLnNldFN0YXR1cygiIil9LDEpLEEoKX0sMSkpOkEoKSxzQSgpfWZ1bmN0aW9uIENDKCl7dmFyIEE9WixJPU4sZz0hMTtaPU49Qj0+e2c9ITB9O3RyeXtqQSgwKSxbInN0ZG91dCIsInN0ZGVyciJdLmZvckVhY2goZnVuY3Rpb24oQil7dmFyIEU9Qy5hbmFseXplUGF0aCgiL2Rldi8iK0IpO2lmKEUpe3ZhciBRPUUub2JqZWN0LGg9US5yZGV2LGk9cS50dHlzW2hdO2kmJmkub3V0cHV0JiZpLm91dHB1dC5sZW5ndGgmJihnPSEwKX19KX1jYXRjaHt9Wj1BLE49SSxnJiZiKCJzdGRpbyBzdHJlYW1zIGhhZCBjb250ZW50IGluIHRoZW0gdGhhdCB3YXMgbm90IGZsdXNoZWQuIHlvdSBzaG91bGQgc2V0IEVYSVRfUlVOVElNRSB0byAxIChzZWUgdGhlIEVtc2NyaXB0ZW4gRkFRKSwgb3IgbWFrZSBzdXJlIHRvIGVtaXQgYSBuZXdsaW5lIHdoZW4geW91IHByaW50ZiBldGMuIil9aWYoby5wcmVJbml0KWZvcih0eXBlb2Ygby5wcmVJbml0PT0iZnVuY3Rpb24iJiYoby5wcmVJbml0PVtvLnByZUluaXRdKTtvLnByZUluaXQubGVuZ3RoPjA7KW8ucHJlSW5pdC5wb3AoKSgpO3JldHVybiB6QSgpLER9fSkoKTt0eXBlb2YgZ0k9PSJvYmplY3QiJiZ0eXBlb2YgTUE9PSJvYmplY3QiP01BLmV4cG9ydHM9SUk6dHlwZW9mIGRlZmluZT09ImZ1bmN0aW9uIiYmZGVmaW5lLmFtZCYmZGVmaW5lKFtdLCgpPT5JSSl9KTt2YXIgQkk9d2coQ0koKSksRGc9MzI3ODQsRUk9MixZQT0yKkVJLEVBPTEyODtyZWdpc3RlclByb2Nlc3NvcigidGltaWRpdHlwbGF5ZXIiLGNsYXNzIGV4dGVuZHMgQXVkaW9Xb3JrbGV0UHJvY2Vzc29ye2NvbnN0cnVjdG9yKFMpe3N1cGVyKCk7bGV0IEQ9Uy5wcm9jZXNzb3JPcHRpb25zLnRpbWlkaXR5Q2ZnLG89Uy5wcm9jZXNzb3JPcHRpb25zLmJhc2VVUkw7aWYodGhpcy5fYmFzZVVybD1vLHRoaXMuX3NvbmdQdHI9MCx0aGlzLl9idWZmZXJQdHI9MCx0aGlzLl9hcnJheT1uZXcgSW50MTZBcnJheShFQSoyKSx0aGlzLl9saWI9KDAsQkkuZGVmYXVsdCkoe2xvY2F0ZUZpbGU6Rz0+dGhpcy5fYmFzZVVybCtHfSksdGhpcy5fbGliLkZTLndyaXRlRmlsZSgiL3RpbWlkaXR5LmNmZyIsRCksdGhpcy5fbGliLl9taWRfaW5pdCgiL3RpbWlkaXR5LmNmZyIpIT09MClyZXR1cm4gdGhpcy5fZGVzdHJveShuZXcgRXJyb3IoIkZhaWxlZCB0byBpbml0aWFsaXplIGxpYnRpbWlkaXR5IikpO3RoaXMuX2J1ZmZlclB0cj10aGlzLl9saWIuX21hbGxvYyhFQSpZQSksdGhpcy5wb3J0Lm9ubWVzc2FnZT10aGlzLl9oYW5kbGVNZXNzYWdlLmJpbmQodGhpcyl9YXN5bmMgX2hhbmRsZU1lc3NhZ2UoUyl7aWYoUy5kYXRhLnR5cGU9PT0iaW5zdFBheWxvYWQiKXtmb3IobGV0IEQgb2YgUy5kYXRhLmJ1ZmZzKXRoaXMuX3dyaXRlSW5zdHJ1bWVudEZpbGUoRC5pbnN0cnVtZW50TmFtZSxELmluc3RydW1lbnRCdWZmKTt0aGlzLnBvcnQucG9zdE1lc3NhZ2UodGhpcy5fbGliLl9taWRfZ2V0X2xvYWRfcmVxdWVzdF9jb3VudCh0aGlzLl9zb25nUHRyKSksdGhpcy5fbGliLl9taWRfc29uZ19mcmVlKHRoaXMuX3NvbmdQdHIpLHRoaXMuX3NvbmdQdHI9YXdhaXQgdGhpcy5fbG9hZFNvbmcodGhpcy5fbWlkaUJ1ZiksdGhpcy5fbGliLl9taWRfc29uZ19zdGFydCh0aGlzLl9zb25nUHRyKSx0aGlzLnBvcnQucG9zdE1lc3NhZ2UoImxvYWRlZCIpfWVsc2UgaWYoUy5kYXRhLnR5cGU9PT0ibG9hZE1JREkiKXtpZih0aGlzLl9zb25nUHRyJiZ0aGlzLl9kZXN0cm95U29uZygpLHRoaXMuX21pZGlCdWY9Uy5kYXRhLm1pZGlCdWZmLCEodGhpcy5fbWlkaUJ1ZiBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKXRocm93IG5ldyBFcnJvcigibG9hZCgpIGV4cGVjdHMgYSBgVWludDhBcnJheWAgYXJndW1lbnQiKTt0aGlzLl9sb2FkU29uZyh0aGlzLl9taWRpQnVmKS50aGVuKEQ9Pnt0aGlzLl9zb25nUHRyPUQsdGhpcy5fcmVxSW5zdHJ1bWVudHMoRCx0aGlzLl9taWRpQnVmKX0pfWVsc2UgUy5kYXRhPT09InBsYXkiPyh0aGlzLl9wbGF5aW5nPSEwLHRoaXMucG9ydC5wb3N0TWVzc2FnZSgicGxheWluZyBmcm9tIHRpbWlkaXR5IikpOlMuZGF0YS50eXBlPT09InNlZWsiP3RoaXMuc2VlayhTLmRhdGEuc2VjKTpTLmRhdGE9PT0icGF1c2UiJiZ0aGlzLnBhdXNlKCl9X3JlcUluc3RydW1lbnRzKFMpe2xldCBEPXRoaXMuX2xpYi5fbWlkX2dldF9sb2FkX3JlcXVlc3RfY291bnQoUyk7aWYoRD4wKXtsZXQgbz1bXTtmb3IobGV0IGQ9MDtkPEQ7ZCsrKXtsZXQgRz10aGlzLl9saWIuX21pZF9nZXRfbG9hZF9yZXF1ZXN0KFMsZCksQUE9dGhpcy5fbGliLlVURjhUb1N0cmluZyhHKTtvLnB1c2goQUEpfXRoaXMucG9ydC5wb3N0TWVzc2FnZSh7dHlwZToibWlzc2luZ0luc3RydW1lbnRzIixpbnN0cnVtZW50czpvfSl9fWFzeW5jIF9sb2FkU29uZyhTKXtsZXQgRD10aGlzLl9saWIuX21pZF9hbGxvY19vcHRpb25zKHNhbXBsZVJhdGUsRGcsRUksRUEpLG89dGhpcy5fbGliLl9tYWxsb2MoUy5ieXRlTGVuZ3RoKTt0aGlzLl9saWIuSEVBUFU4LnNldChTLG8pO2xldCBkPXRoaXMuX2xpYi5fbWlkX2lzdHJlYW1fb3Blbl9tZW0obyxTLmJ5dGVMZW5ndGgpLEc9dGhpcy5fbGliLl9taWRfc29uZ19sb2FkKGQsRCk7cmV0dXJuIHRoaXMuX2xpYi5fbWlkX2lzdHJlYW1fY2xvc2UoZCksdGhpcy5fbGliLl9mcmVlKEQpLHRoaXMuX2xpYi5fZnJlZShvKSxHPT09MD90aGlzLl9kZXN0cm95KG5ldyBFcnJvcigiRmFpbGVkIHRvIGxvYWQgTUlESSBmaWxlIikpOkd9X3dyaXRlSW5zdHJ1bWVudEZpbGUoUyxEKXtsZXQgbz1TLnNwbGl0KCIvIikuc2xpY2UoMCwtMSkuam9pbigiLyIpO3RoaXMuX21rZGlycChvKSx0aGlzLnBvcnQucG9zdE1lc3NhZ2UobyksdGhpcy5fbGliLkZTLndyaXRlRmlsZShTLEQse2VuY29kaW5nOiJiaW5hcnkifSl9X21rZGlycChTKXtsZXQgRD1TLnNwbGl0KCIvIiksbz0iLyI7Zm9yKGxldCBkPTA7ZDxELmxlbmd0aDtkKyspe2xldCBHPURbZF07dHJ5e3RoaXMuX2xpYi5GUy5ta2RpcihgJHtvfSR7R31gKX1jYXRjaHt9bys9YCR7R30vYH19X29uQXVkaW9Qcm9jZXNzKFMpe2xldCBEPXRoaXMuX3NvbmdQdHImJnRoaXMuX3BsYXlpbmc/dGhpcy5fcmVhZE1pZGlEYXRhKCk6MCxvPVNbMF1bMF0sZD1TWzBdWzFdO2ZvcihsZXQgRz0wO0c8RDtHKyspb1tHXT10aGlzLl9hcnJheVtHKjJdLzMyNzY3LGRbR109dGhpcy5fYXJyYXlbRyoyKzFdLzMyNzY3O2ZvcihsZXQgRz1EO0c8RUE7RysrKW9bR109MCxkW0ddPTA7dGhpcy5fc29uZ1B0ciYmdGhpcy5fcGxheWluZyYmRD09PTAmJih0aGlzLnNlZWsoMCksdGhpcy5wYXVzZSgpLHRoaXMuX2xpYi5fbWlkX3Nvbmdfc3RhcnQodGhpcy5fc29uZ1B0ciksdGhpcy5wb3J0LnBvc3RNZXNzYWdlKCJlbmRlZCIpKX1fcmVhZE1pZGlEYXRhKCl7bGV0IFM9dGhpcy5fbGliLl9taWRfc29uZ19yZWFkX3dhdmUodGhpcy5fc29uZ1B0cix0aGlzLl9idWZmZXJQdHIsRUEqWUEpLEQ9Uy9ZQTtyZXR1cm4gRD09PTA/MDoodGhpcy5fYXJyYXkuc2V0KHRoaXMuX2xpYi5IRUFQMTYuc3ViYXJyYXkodGhpcy5fYnVmZmVyUHRyLzIsKHRoaXMuX2J1ZmZlclB0citTKS8yKSksRCl9cHJvY2VzcyhTLEQsbyl7cmV0dXJuIHRoaXMuX3BsYXlpbmcmJihEPXRoaXMuX29uQXVkaW9Qcm9jZXNzKEQpKSwhdGhpcy5kZXN0cm95ZWR9cGF1c2UoKXtpZih0aGlzLmRlc3Ryb3llZCl0aHJvdyBuZXcgRXJyb3IoInBhdXNlKCkgY2FsbGVkIGFmdGVyIGRlc3Ryb3koKSIpO3RoaXMuX3BsYXlpbmc9ITF9c2VlayhTKXtpZighdGhpcy5fc29uZ1B0cilyZXR1cm47bGV0IEQ9TWF0aC5mbG9vcihTKjFlMyk7dGhpcy5fbGliLl9taWRfc29uZ19zZWVrKHRoaXMuX3NvbmdQdHIsRCl9ZGVzdHJveSgpe2lmKHRoaXMuZGVzdHJveWVkKXRocm93IG5ldyBFcnJvcigiZGVzdHJveSgpIGNhbGxlZCBhZnRlciBkZXN0cm95KCkiKTt0aGlzLl9kZXN0cm95KCl9X2Rlc3Ryb3koUyl7aWYoIXRoaXMuZGVzdHJveWVkJiYodGhpcy5kZXN0cm95ZWQ9ITAsdGhpcy5fYXJyYXk9bnVsbCx0aGlzLl9zb25nUHRyJiZ0aGlzLl9kZXN0cm95U29uZygpLHRoaXMuX2J1ZmZlclB0ciYmKHRoaXMuX2xpYi5fZnJlZSh0aGlzLl9idWZmZXJQdHIpLHRoaXMuX2J1ZmZlclB0cj0wKSxTKSl0aHJvdyBuZXcgRXJyb3IoImVycm9yIixTKX1fZGVzdHJveVNvbmcoKXt0aGlzLl9saWIuX21pZF9zb25nX2ZyZWUodGhpcy5fc29uZ1B0ciksdGhpcy5fc29uZ1B0cj0wfX0pO30pKCk7Cg==";var o=K(I()),n=class extends o.EventEmitter{constructor(U,Q,R){super(),this._worklet=U,this._baseURL=R,this._worklet.port.onmessage=this._handleMessage.bind(this),this.context=Q,this._worklet.connect(Q.destination)}async _handleMessage(U){if(U.data.type==="missingInstruments"){let Q=[];try{Q=await Promise.all(U.data.instruments.map(R=>this.fetchInstrument(R)))}catch(R){console.log("Error loading instrument patch files"),console.log(R)}this._worklet.port.postMessage({type:"instPayload",buffs:Q})}else U.data==="loaded"&&this.emit("song-loaded")}play(){this.context.resume(),this._worklet.port.postMessage("play")}pause(){this._worklet.port.postMessage("pause")}seek(U){this._worklet.port.postMessage({type:"seek",sec:U})}async load(U){let Q=await M(U);this._worklet.port.postMessage({type:"loadMIDI",midiBuff:Q}),await new Promise((R,V)=>{this.on("song-loaded",()=>R()),setTimeout(()=>V("timeout on loading midi song instruments, 10000"),1e4)})}async fetchInstrument(U){let Q=this._baseURL+U;return/(?:\.([^.]+))?$/.exec(U)!=="pat"&&(Q=this._baseURL+U+".pat"),{instrumentName:U,instrumentBuff:await M(Q)}}};async function M(F){let Q=await(await t(F)).arrayBuffer();return new Uint8Array(Q)}async function r(F){return await(await t(F)).text()}async function t(F){let U={mode:"cors",credentials:"same-origin"},Q=await window.fetch(F);if(Q.status!==200)throw new Error(`Could not load ${F}`);return Q}async function P(F="/",U="gravis.cfg",Q=new AudioContext){F.endsWith("/")||(F+="/");try{await Q.audioWorklet.addModule(a)}catch(B){console.log(B)}let R=U;R.includes(`
`)||(R=await r(F+U));let V=new AudioWorkletNode(Q,"timidityplayer",{outputChannelCount:[2],processorOptions:{baseURL:F,timidityCfg:R}});return new n(V,Q,F)}export{n as MIDIPlayer,P as default,r as fetchText};
//# sourceMappingURL=timidity-bundle.js.map
